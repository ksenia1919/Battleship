// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 29.05.2022 15:36:40 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.Windows.Forms.tlb (1)
// LIBID: {215D64D2-031C-33C7-96E3-61794CD1EE61}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.0 mscorlib, (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscorlib.tlb)
//   (3) v1.1 Accessibility, (C:\Windows\SysWOW64\oleacc.dll)
//   (4) v2.0 System, (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.tlb)
// Parent TypeLibrary:
//   (0) v27.0 Borland_Studio_ToolsAPI, (C:\Program Files (x86)\Embarcadero\Studio\21.0\bin\Borland.Studio.ToolsAPI.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   System_Windows_Forms_TLBH
#define   System_Windows_Forms_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"
#include "Accessibility_TLB.h"
#include "System_TLB.h"

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace System_windows_forms_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    2.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_System_Windows_Forms;
extern __declspec (package) const GUID IID__AccessibleObject;
extern __declspec (package) const GUID GUID_Appearance;
extern __declspec (package) const GUID IID__Form;
extern __declspec (package) const GUID GUID_ArrangeDirection;
extern __declspec (package) const GUID IID__AxHost;
extern __declspec (package) const GUID IID__Control;
extern __declspec (package) const GUID IID_IWin32Window;
extern __declspec (package) const GUID GUID_ImeMode;
extern __declspec (package) const GUID GUID_Keys;
extern __declspec (package) const GUID IID__ContainerControl;
extern __declspec (package) const GUID IID__BindingNavigator;
extern __declspec (package) const GUID IID__ToolStrip;
extern __declspec (package) const GUID GUID_Border3DSide;
extern __declspec (package) const GUID GUID_Border3DStyle;
extern __declspec (package) const GUID GUID_BorderStyle;
extern __declspec (package) const GUID IID__Button;
extern __declspec (package) const GUID IID__ButtonBase;
extern __declspec (package) const GUID GUID_DialogResult;
extern __declspec (package) const GUID IID__MouseEventArgs;
extern __declspec (package) const GUID IID__ButtonBaseAccessibleObject;
extern __declspec (package) const GUID IID__ControlAccessibleObject;
extern __declspec (package) const GUID IID__KeyEventArgs;
extern __declspec (package) const GUID IID__CheckBox;
extern __declspec (package) const GUID IID__CheckBoxAccessibleObject;
extern __declspec (package) const GUID IID__CheckedListBox;
extern __declspec (package) const GUID IID__ListBox;
extern __declspec (package) const GUID GUID_SelectionMode;
extern __declspec (package) const GUID IID__KeyPressEventArgs;
extern __declspec (package) const GUID IID__ItemCheckEventArgs;
extern __declspec (package) const GUID IID_IDataObject;
extern __declspec (package) const GUID IID__ListView;
extern __declspec (package) const GUID GUID_HorizontalAlignment;
extern __declspec (package) const GUID IID__ComboBox;
extern __declspec (package) const GUID IID__ListControl;
extern __declspec (package) const GUID IID__ChildAccessibleObject;
extern __declspec (package) const GUID IID__ScrollableControl;
extern __declspec (package) const GUID GUID_LeftRightAlignment;
extern __declspec (package) const GUID IID__ContextMenuStrip;
extern __declspec (package) const GUID IID__ToolStripDropDownMenu;
extern __declspec (package) const GUID GUID_MouseButtons;
extern __declspec (package) const GUID IID__DragEventArgs;
extern __declspec (package) const GUID IID__GiveFeedbackEventArgs;
extern __declspec (package) const GUID IID__HelpEventArgs;
extern __declspec (package) const GUID IID__QueryContinueDragEventArgs;
extern __declspec (package) const GUID IID__DataGrid;
extern __declspec (package) const GUID IID__ScrollBar;
extern __declspec (package) const GUID IID__NavigateEventArgs;
extern __declspec (package) const GUID IID__ScrollEventArgs;
extern __declspec (package) const GUID IID__DataGridTextBox;
extern __declspec (package) const GUID IID__TextBox;
extern __declspec (package) const GUID IID__DataGridView;
extern __declspec (package) const GUID IID__Panel;
extern __declspec (package) const GUID GUID_DataGridViewElementStates;
extern __declspec (package) const GUID IID__DataGridViewComboBoxEditingControl;
extern __declspec (package) const GUID IID__DataGridViewTextBoxEditingControl;
extern __declspec (package) const GUID IID__DateTimePicker;
extern __declspec (package) const GUID IID__DateTimePickerAccessibleObject;
extern __declspec (package) const GUID IID__DomainUpDown;
extern __declspec (package) const GUID IID__UpDownBase;
extern __declspec (package) const GUID IID__DomainItemAccessibleObject;
extern __declspec (package) const GUID IID__DomainUpDownAccessibleObject;
extern __declspec (package) const GUID GUID_DragAction;
extern __declspec (package) const GUID IID__FlowLayoutPanel;
extern __declspec (package) const GUID GUID_FormBorderStyle;
extern __declspec (package) const GUID IID__MenuStrip;
extern __declspec (package) const GUID GUID_FormStartPosition;
extern __declspec (package) const GUID GUID_FormWindowState;
extern __declspec (package) const GUID IID__GroupBox;
extern __declspec (package) const GUID IID__HScrollBar;
extern __declspec (package) const GUID IID__ItemDragEventArgs;
extern __declspec (package) const GUID IID__Label;
extern __declspec (package) const GUID IID__LinkClickedEventArgs;
extern __declspec (package) const GUID IID__LinkLabel;
extern __declspec (package) const GUID IID__LinkLabelLinkClickedEventArgs;
extern __declspec (package) const GUID IID__ListViewItemMouseHoverEventArgs;
extern __declspec (package) const GUID IID__MaskedTextBox;
extern __declspec (package) const GUID IID__TextBoxBase;
extern __declspec (package) const GUID IID__MdiClient;
extern __declspec (package) const GUID GUID_Shortcut;
extern __declspec (package) const GUID IID__MonthCalendar;
extern __declspec (package) const GUID IID__NumericUpDown;
extern __declspec (package) const GUID GUID_SystemParameter;
extern __declspec (package) const GUID IID__PictureBox;
extern __declspec (package) const GUID IID__PrintPreviewControl;
extern __declspec (package) const GUID IID__PrintPreviewDialog;
extern __declspec (package) const GUID IID__ProgressBar;
extern __declspec (package) const GUID IID__PropertyGrid;
extern __declspec (package) const GUID GUID_PropertySort;
extern __declspec (package) const GUID IID__PropertyTabChangedEventArgs;
extern __declspec (package) const GUID IID__PropertyValueChangedEventArgs;
extern __declspec (package) const GUID IID__QueryAccessibilityHelpEventArgs;
extern __declspec (package) const GUID IID__RadioButton;
extern __declspec (package) const GUID IID__RadioButtonAccessibleObject;
extern __declspec (package) const GUID IID__RichTextBox;
extern __declspec (package) const GUID GUID_ScrollEventType;
extern __declspec (package) const GUID IID__SplitContainer;
extern __declspec (package) const GUID IID__SplitterPanel;
extern __declspec (package) const GUID IID__SplitterEventArgs;
extern __declspec (package) const GUID IID__Splitter;
extern __declspec (package) const GUID IID__StatusBar;
extern __declspec (package) const GUID IID__StatusStrip;
extern __declspec (package) const GUID IID__TabControl;
extern __declspec (package) const GUID IID__TabPage;
extern __declspec (package) const GUID IID__TableLayoutPanel;
extern __declspec (package) const GUID IID__ThreadExceptionDialog;
extern __declspec (package) const GUID IID__ToolBar;
extern __declspec (package) const GUID IID__ToolStripAccessibleObject;
extern __declspec (package) const GUID IID__ToolStripContainer;
extern __declspec (package) const GUID IID__ToolStripPanel;
extern __declspec (package) const GUID IID__ToolStripContentPanel;
extern __declspec (package) const GUID IID__ToolStripDropDown;
extern __declspec (package) const GUID IID__ToolStripDropDownAccessibleObject;
extern __declspec (package) const GUID IID__ToolStripItemAccessibleObject;
extern __declspec (package) const GUID IID__ToolStripOverflow;
extern __declspec (package) const GUID GUID_ToolStripStatusLabelBorderSides;
extern __declspec (package) const GUID IID__TrackBar;
extern __declspec (package) const GUID IID__TreeView;
extern __declspec (package) const GUID IID__TreeNodeMouseHoverEventArgs;
extern __declspec (package) const GUID GUID_TreeViewHitTestLocations;
extern __declspec (package) const GUID IID__UserControl;
extern __declspec (package) const GUID IID__VScrollBar;
extern __declspec (package) const GUID IID__WebBrowser;
extern __declspec (package) const GUID IID__WebBrowserBase;
extern __declspec (package) const GUID IID__ComponentEditorForm;
extern __declspec (package) const GUID IID__ComponentEditorPage;
extern __declspec (package) const GUID CLSID_AccessibleObject;
extern __declspec (package) const GUID CLSID_Form;
extern __declspec (package) const GUID CLSID_AxHost;
extern __declspec (package) const GUID CLSID_Control;
extern __declspec (package) const GUID CLSID_ContainerControl;
extern __declspec (package) const GUID CLSID_BindingNavigator;
extern __declspec (package) const GUID CLSID_ToolStrip;
extern __declspec (package) const GUID CLSID_Button;
extern __declspec (package) const GUID CLSID_ButtonBase;
extern __declspec (package) const GUID CLSID_MouseEventArgs;
extern __declspec (package) const GUID CLSID_ButtonBaseAccessibleObject;
extern __declspec (package) const GUID CLSID_ControlAccessibleObject;
extern __declspec (package) const GUID CLSID_KeyEventArgs;
extern __declspec (package) const GUID CLSID_CheckBox;
extern __declspec (package) const GUID CLSID_CheckBoxAccessibleObject;
extern __declspec (package) const GUID CLSID_CheckedListBox;
extern __declspec (package) const GUID CLSID_ListBox;
extern __declspec (package) const GUID CLSID_KeyPressEventArgs;
extern __declspec (package) const GUID CLSID_ItemCheckEventArgs;
extern __declspec (package) const GUID CLSID_ListView;
extern __declspec (package) const GUID CLSID_ComboBox;
extern __declspec (package) const GUID CLSID_ListControl;
extern __declspec (package) const GUID CLSID_ChildAccessibleObject;
extern __declspec (package) const GUID CLSID_ScrollableControl;
extern __declspec (package) const GUID CLSID_ContextMenuStrip;
extern __declspec (package) const GUID CLSID_ToolStripDropDownMenu;
extern __declspec (package) const GUID CLSID_DragEventArgs;
extern __declspec (package) const GUID CLSID_GiveFeedbackEventArgs;
extern __declspec (package) const GUID CLSID_HelpEventArgs;
extern __declspec (package) const GUID CLSID_QueryContinueDragEventArgs;
extern __declspec (package) const GUID CLSID_DataGrid;
extern __declspec (package) const GUID CLSID_ScrollBar;
extern __declspec (package) const GUID CLSID_NavigateEventArgs;
extern __declspec (package) const GUID CLSID_ScrollEventArgs;
extern __declspec (package) const GUID CLSID_DataGridTextBox;
extern __declspec (package) const GUID CLSID_TextBox;
extern __declspec (package) const GUID CLSID_DataGridView;
extern __declspec (package) const GUID CLSID_Panel;
extern __declspec (package) const GUID CLSID_DataGridViewComboBoxEditingControl;
extern __declspec (package) const GUID CLSID_DataGridViewTextBoxEditingControl;
extern __declspec (package) const GUID CLSID_DateTimePicker;
extern __declspec (package) const GUID CLSID_DateTimePickerAccessibleObject;
extern __declspec (package) const GUID CLSID_DomainUpDown;
extern __declspec (package) const GUID CLSID_UpDownBase;
extern __declspec (package) const GUID CLSID_DomainItemAccessibleObject;
extern __declspec (package) const GUID CLSID_DomainUpDownAccessibleObject;
extern __declspec (package) const GUID CLSID_FlowLayoutPanel;
extern __declspec (package) const GUID CLSID_MenuStrip;
extern __declspec (package) const GUID CLSID_GroupBox;
extern __declspec (package) const GUID CLSID_HScrollBar;
extern __declspec (package) const GUID CLSID_ItemDragEventArgs;
extern __declspec (package) const GUID CLSID_Label;
extern __declspec (package) const GUID CLSID_LinkClickedEventArgs;
extern __declspec (package) const GUID CLSID_LinkLabel;
extern __declspec (package) const GUID CLSID_LinkLabelLinkClickedEventArgs;
extern __declspec (package) const GUID CLSID_ListViewItemMouseHoverEventArgs;
extern __declspec (package) const GUID CLSID_MaskedTextBox;
extern __declspec (package) const GUID CLSID_TextBoxBase;
extern __declspec (package) const GUID CLSID_MdiClient;
extern __declspec (package) const GUID CLSID_MonthCalendar;
extern __declspec (package) const GUID CLSID_NumericUpDown;
extern __declspec (package) const GUID CLSID_PictureBox;
extern __declspec (package) const GUID CLSID_PrintPreviewControl;
extern __declspec (package) const GUID CLSID_PrintPreviewDialog;
extern __declspec (package) const GUID CLSID_ProgressBar;
extern __declspec (package) const GUID CLSID_PropertyGrid;
extern __declspec (package) const GUID CLSID_PropertyTabChangedEventArgs;
extern __declspec (package) const GUID CLSID_PropertyValueChangedEventArgs;
extern __declspec (package) const GUID CLSID_QueryAccessibilityHelpEventArgs;
extern __declspec (package) const GUID CLSID_RadioButton;
extern __declspec (package) const GUID CLSID_RadioButtonAccessibleObject;
extern __declspec (package) const GUID CLSID_RichTextBox;
extern __declspec (package) const GUID CLSID_SplitContainer;
extern __declspec (package) const GUID CLSID_SplitterPanel;
extern __declspec (package) const GUID CLSID_SplitterEventArgs;
extern __declspec (package) const GUID CLSID_Splitter;
extern __declspec (package) const GUID CLSID_StatusBar;
extern __declspec (package) const GUID CLSID_StatusStrip;
extern __declspec (package) const GUID CLSID_TabControl;
extern __declspec (package) const GUID CLSID_TabPage;
extern __declspec (package) const GUID CLSID_TableLayoutPanel;
extern __declspec (package) const GUID CLSID_ThreadExceptionDialog;
extern __declspec (package) const GUID CLSID_ToolBar;
extern __declspec (package) const GUID CLSID_ToolStripAccessibleObject;
extern __declspec (package) const GUID CLSID_ToolStripContainer;
extern __declspec (package) const GUID CLSID_ToolStripPanel;
extern __declspec (package) const GUID CLSID_ToolStripContentPanel;
extern __declspec (package) const GUID CLSID_ToolStripDropDown;
extern __declspec (package) const GUID CLSID_ToolStripDropDownAccessibleObject;
extern __declspec (package) const GUID CLSID_ToolStripItemAccessibleObject;
extern __declspec (package) const GUID CLSID_ToolStripOverflow;
extern __declspec (package) const GUID CLSID_TrackBar;
extern __declspec (package) const GUID CLSID_TreeView;
extern __declspec (package) const GUID CLSID_TreeNodeMouseHoverEventArgs;
extern __declspec (package) const GUID CLSID_UserControl;
extern __declspec (package) const GUID CLSID_VScrollBar;
extern __declspec (package) const GUID CLSID_WebBrowser;
extern __declspec (package) const GUID CLSID_WebBrowserBase;
extern __declspec (package) const GUID CLSID_ComponentEditorForm;
extern __declspec (package) const GUID CLSID_ComponentEditorPage;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    Appearance;
enum class    ArrangeDirection;
enum class    ImeMode;
enum class    Keys;
enum class    Border3DSide;
enum class    Border3DStyle;
enum class    BorderStyle;
enum class    DialogResult;
enum class    SelectionMode;
enum class    HorizontalAlignment;
enum class    LeftRightAlignment;
enum class    MouseButtons;
enum class    DataGridViewElementStates;
enum class    DragAction;
enum class    FormBorderStyle;
enum class    FormStartPosition;
enum class    FormWindowState;
enum class    Shortcut;
enum class    SystemParameter;
enum class    PropertySort;
enum class    ScrollEventType;
enum class    ToolStripStatusLabelBorderSides;
enum class    TreeViewHitTestLocations;
interface DECLSPEC_UUID("{399C0499-29D3-3D95-AF77-111DCDB92177}") _AccessibleObject;
typedef TComInterface<_AccessibleObject, &IID__AccessibleObject> _AccessibleObjectPtr;

interface DECLSPEC_UUID("{AD0C79DB-37BE-3B61-9C53-2E4857237227}") _Form;
typedef TComInterface<_Form, &IID__Form> _FormPtr;

interface DECLSPEC_UUID("{548054D5-75C5-3A72-A87B-D6F305254065}") _AxHost;
typedef TComInterface<_AxHost, &IID__AxHost> _AxHostPtr;

interface DECLSPEC_UUID("{83ACBFAE-1A16-33EB-ABA0-BA8DF0B206D7}") _Control;
typedef TComInterface<_Control, &IID__Control> _ControlPtr;

interface DECLSPEC_UUID("{458AB8A2-A1EA-4D7B-8EBE-DEE5D3D9442C}") IWin32Window;
typedef TComInterface<IWin32Window, &IID_IWin32Window> IWin32WindowPtr;

interface DECLSPEC_UUID("{A5AF2165-C1BE-39AF-AB35-CD950D01A701}") _ContainerControl;
typedef TComInterface<_ContainerControl, &IID__ContainerControl> _ContainerControlPtr;

interface DECLSPEC_UUID("{E3FF0D90-9E82-3736-A253-3B2F41EF981A}") _BindingNavigator;
typedef TComInterface<_BindingNavigator, &IID__BindingNavigator> _BindingNavigatorPtr;

interface DECLSPEC_UUID("{A81676FD-EAA3-39C3-9354-A58951270EB6}") _ToolStrip;
typedef TComInterface<_ToolStrip, &IID__ToolStrip> _ToolStripPtr;

interface DECLSPEC_UUID("{9486855D-B3A4-32E8-AF74-EC881982E3FF}") _Button;
typedef TComInterface<_Button, &IID__Button> _ButtonPtr;

interface DECLSPEC_UUID("{D14C1282-8647-317E-A549-D2CBCC264C3A}") _ButtonBase;
typedef TComInterface<_ButtonBase, &IID__ButtonBase> _ButtonBasePtr;

interface DECLSPEC_UUID("{276A1A21-AAEF-3378-8902-01F695868FF9}") _MouseEventArgs;
typedef TComInterface<_MouseEventArgs, &IID__MouseEventArgs> _MouseEventArgsPtr;

interface DECLSPEC_UUID("{4343B837-6EC8-3E43-8A59-046C35024677}") _ButtonBaseAccessibleObject;
typedef TComInterface<_ButtonBaseAccessibleObject, &IID__ButtonBaseAccessibleObject> _ButtonBaseAccessibleObjectPtr;

interface DECLSPEC_UUID("{7496E5C0-90D3-372E-885F-BDD1A0316856}") _ControlAccessibleObject;
typedef TComInterface<_ControlAccessibleObject, &IID__ControlAccessibleObject> _ControlAccessibleObjectPtr;

interface DECLSPEC_UUID("{4AAA99AA-77B1-3CF7-85D8-D9CF69271AC6}") _KeyEventArgs;
typedef TComInterface<_KeyEventArgs, &IID__KeyEventArgs> _KeyEventArgsPtr;

interface DECLSPEC_UUID("{1C7817C6-6A49-301E-B20A-05FF053C3D56}") _CheckBox;
typedef TComInterface<_CheckBox, &IID__CheckBox> _CheckBoxPtr;

interface DECLSPEC_UUID("{5D9FCE71-04C3-395E-B972-F1205E8DE615}") _CheckBoxAccessibleObject;
typedef TComInterface<_CheckBoxAccessibleObject, &IID__CheckBoxAccessibleObject> _CheckBoxAccessibleObjectPtr;

interface DECLSPEC_UUID("{1833C4C9-4E61-3D96-AEB5-65B43DE96A01}") _CheckedListBox;
typedef TComInterface<_CheckedListBox, &IID__CheckedListBox> _CheckedListBoxPtr;

interface DECLSPEC_UUID("{E36590E6-CFD5-340E-9650-73500A802C43}") _ListBox;
typedef TComInterface<_ListBox, &IID__ListBox> _ListBoxPtr;

interface DECLSPEC_UUID("{B8755BC8-51FE-3D19-A3EC-5A5A5CF120E0}") _KeyPressEventArgs;
typedef TComInterface<_KeyPressEventArgs, &IID__KeyPressEventArgs> _KeyPressEventArgsPtr;

interface DECLSPEC_UUID("{29BDF32D-E055-38E7-8DCB-920A3038FEF7}") _ItemCheckEventArgs;
typedef TComInterface<_ItemCheckEventArgs, &IID__ItemCheckEventArgs> _ItemCheckEventArgsPtr;

interface DECLSPEC_UUID("{3CEE8CC1-1ADB-327F-9B97-7A9C8089BFB3}") IDataObject;
typedef TComInterface<IDataObject, &IID_IDataObject> IDataObjectPtr;

interface DECLSPEC_UUID("{A87AED55-DDA4-3668-BEFA-1A776496DD3E}") _ListView;
typedef TComInterface<_ListView, &IID__ListView> _ListViewPtr;

interface DECLSPEC_UUID("{2EFEC16E-EEC9-39A3-9D8A-5E72B5C14F78}") _ComboBox;
typedef TComInterface<_ComboBox, &IID__ComboBox> _ComboBoxPtr;

interface DECLSPEC_UUID("{D58DFF0C-34C3-3D1E-8251-5F83EE7367C9}") _ListControl;
typedef TComInterface<_ListControl, &IID__ListControl> _ListControlPtr;

interface DECLSPEC_UUID("{518F00C6-2AAB-3B25-A76A-F62883781E18}") _ChildAccessibleObject;
typedef TComInterface<_ChildAccessibleObject, &IID__ChildAccessibleObject> _ChildAccessibleObjectPtr;

interface DECLSPEC_UUID("{812A8B20-CB02-3483-8A29-424C6CDAC4B7}") _ScrollableControl;
typedef TComInterface<_ScrollableControl, &IID__ScrollableControl> _ScrollableControlPtr;

interface DECLSPEC_UUID("{4B4939AF-61C1-378F-BDF0-68B9B3EE48E3}") _ContextMenuStrip;
typedef TComInterface<_ContextMenuStrip, &IID__ContextMenuStrip> _ContextMenuStripPtr;

interface DECLSPEC_UUID("{8E07FA2C-B44B-3818-BA44-D88F2A69E8B6}") _ToolStripDropDownMenu;
typedef TComInterface<_ToolStripDropDownMenu, &IID__ToolStripDropDownMenu> _ToolStripDropDownMenuPtr;

interface DECLSPEC_UUID("{AEDF37AB-9041-3D55-9ACA-BDEDE24566D2}") _DragEventArgs;
typedef TComInterface<_DragEventArgs, &IID__DragEventArgs> _DragEventArgsPtr;

interface DECLSPEC_UUID("{77AD1D22-59C4-3634-9D55-50291CDA49F6}") _GiveFeedbackEventArgs;
typedef TComInterface<_GiveFeedbackEventArgs, &IID__GiveFeedbackEventArgs> _GiveFeedbackEventArgsPtr;

interface DECLSPEC_UUID("{7FA2B402-744D-34F5-AD8B-BD7C018B31F5}") _HelpEventArgs;
typedef TComInterface<_HelpEventArgs, &IID__HelpEventArgs> _HelpEventArgsPtr;

interface DECLSPEC_UUID("{9FD0D341-0808-3A17-A978-ADB5ED517F59}") _QueryContinueDragEventArgs;
typedef TComInterface<_QueryContinueDragEventArgs, &IID__QueryContinueDragEventArgs> _QueryContinueDragEventArgsPtr;

interface DECLSPEC_UUID("{518A56E2-FBCE-3386-BB15-4A0F67872BDC}") _DataGrid;
typedef TComInterface<_DataGrid, &IID__DataGrid> _DataGridPtr;

interface DECLSPEC_UUID("{59C5A9AD-941B-3279-BED8-EDCC2951CADC}") _ScrollBar;
typedef TComInterface<_ScrollBar, &IID__ScrollBar> _ScrollBarPtr;

interface DECLSPEC_UUID("{42959ECE-0606-3758-9679-A48E88F9BAF8}") _NavigateEventArgs;
typedef TComInterface<_NavigateEventArgs, &IID__NavigateEventArgs> _NavigateEventArgsPtr;

interface DECLSPEC_UUID("{CCD8C82C-DFBF-3E14-BE9B-38555F6221F2}") _ScrollEventArgs;
typedef TComInterface<_ScrollEventArgs, &IID__ScrollEventArgs> _ScrollEventArgsPtr;

interface DECLSPEC_UUID("{2780E0D4-2B06-3E1F-ADDF-D8DBBB3FB960}") _DataGridTextBox;
typedef TComInterface<_DataGridTextBox, &IID__DataGridTextBox> _DataGridTextBoxPtr;

interface DECLSPEC_UUID("{EAEF4300-9FB3-306F-8F67-180DEB8DDFB7}") _TextBox;
typedef TComInterface<_TextBox, &IID__TextBox> _TextBoxPtr;

interface DECLSPEC_UUID("{5968374C-8F43-353B-8F0A-780A0A7DDB79}") _DataGridView;
typedef TComInterface<_DataGridView, &IID__DataGridView> _DataGridViewPtr;

interface DECLSPEC_UUID("{549A3DD8-D85F-3D08-87E2-49B08490008B}") _Panel;
typedef TComInterface<_Panel, &IID__Panel> _PanelPtr;

interface DECLSPEC_UUID("{C6615083-0A23-3997-A54B-F618EB824AF0}") _DataGridViewComboBoxEditingControl;
typedef TComInterface<_DataGridViewComboBoxEditingControl, &IID__DataGridViewComboBoxEditingControl> _DataGridViewComboBoxEditingControlPtr;

interface DECLSPEC_UUID("{A7750701-44A2-353A-923A-7BA68A8E22AF}") _DataGridViewTextBoxEditingControl;
typedef TComInterface<_DataGridViewTextBoxEditingControl, &IID__DataGridViewTextBoxEditingControl> _DataGridViewTextBoxEditingControlPtr;

interface DECLSPEC_UUID("{2BAD7D35-895F-3D4A-B883-0B3CD324B8BD}") _DateTimePicker;
typedef TComInterface<_DateTimePicker, &IID__DateTimePicker> _DateTimePickerPtr;

interface DECLSPEC_UUID("{5BEF6F14-89F8-3AD5-BE92-0649CFA5ABB1}") _DateTimePickerAccessibleObject;
typedef TComInterface<_DateTimePickerAccessibleObject, &IID__DateTimePickerAccessibleObject> _DateTimePickerAccessibleObjectPtr;

interface DECLSPEC_UUID("{44792A74-5DD8-3410-A897-F568E4E58161}") _DomainUpDown;
typedef TComInterface<_DomainUpDown, &IID__DomainUpDown> _DomainUpDownPtr;

interface DECLSPEC_UUID("{C26446AC-E09B-3545-B01A-5575923636C3}") _UpDownBase;
typedef TComInterface<_UpDownBase, &IID__UpDownBase> _UpDownBasePtr;

interface DECLSPEC_UUID("{0D46DA02-69FB-3A29-9AC6-395925C38479}") _DomainItemAccessibleObject;
typedef TComInterface<_DomainItemAccessibleObject, &IID__DomainItemAccessibleObject> _DomainItemAccessibleObjectPtr;

interface DECLSPEC_UUID("{131B8005-94C2-37D5-B738-CD2337635E73}") _DomainUpDownAccessibleObject;
typedef TComInterface<_DomainUpDownAccessibleObject, &IID__DomainUpDownAccessibleObject> _DomainUpDownAccessibleObjectPtr;

interface DECLSPEC_UUID("{B55C4C83-1F69-3D93-9C4E-2AA5619E0C68}") _FlowLayoutPanel;
typedef TComInterface<_FlowLayoutPanel, &IID__FlowLayoutPanel> _FlowLayoutPanelPtr;

interface DECLSPEC_UUID("{EB5A3078-05D9-3F32-9045-89F756938A3D}") _MenuStrip;
typedef TComInterface<_MenuStrip, &IID__MenuStrip> _MenuStripPtr;

interface DECLSPEC_UUID("{11B0B536-2F72-3A3F-B2A3-0420A9F5041F}") _GroupBox;
typedef TComInterface<_GroupBox, &IID__GroupBox> _GroupBoxPtr;

interface DECLSPEC_UUID("{7BC4A820-B20F-3ECE-BDD6-EE7E14EB7E0D}") _HScrollBar;
typedef TComInterface<_HScrollBar, &IID__HScrollBar> _HScrollBarPtr;

interface DECLSPEC_UUID("{7FA2A2C6-276C-3F23-AF2A-800CCD05CFF2}") _ItemDragEventArgs;
typedef TComInterface<_ItemDragEventArgs, &IID__ItemDragEventArgs> _ItemDragEventArgsPtr;

interface DECLSPEC_UUID("{00AE8203-987D-3B7E-9448-5B3393282D7F}") _Label;
typedef TComInterface<_Label, &IID__Label> _LabelPtr;

interface DECLSPEC_UUID("{93194740-9A53-3D3E-902C-240FBE0C90E4}") _LinkClickedEventArgs;
typedef TComInterface<_LinkClickedEventArgs, &IID__LinkClickedEventArgs> _LinkClickedEventArgsPtr;

interface DECLSPEC_UUID("{4EE61C0D-D2D5-3A50-972B-C0A957D3A541}") _LinkLabel;
typedef TComInterface<_LinkLabel, &IID__LinkLabel> _LinkLabelPtr;

interface DECLSPEC_UUID("{CB38AE7B-5208-351D-8B84-3ECA81DE0F34}") _LinkLabelLinkClickedEventArgs;
typedef TComInterface<_LinkLabelLinkClickedEventArgs, &IID__LinkLabelLinkClickedEventArgs> _LinkLabelLinkClickedEventArgsPtr;

interface DECLSPEC_UUID("{A2F121D8-4775-3FB2-93A3-C5862AE8C359}") _ListViewItemMouseHoverEventArgs;
typedef TComInterface<_ListViewItemMouseHoverEventArgs, &IID__ListViewItemMouseHoverEventArgs> _ListViewItemMouseHoverEventArgsPtr;

interface DECLSPEC_UUID("{22B0C1A9-E74E-381A-BABB-66BEF71FF08E}") _MaskedTextBox;
typedef TComInterface<_MaskedTextBox, &IID__MaskedTextBox> _MaskedTextBoxPtr;

interface DECLSPEC_UUID("{ABC30865-8929-3F02-9D70-6C3D68C83837}") _TextBoxBase;
typedef TComInterface<_TextBoxBase, &IID__TextBoxBase> _TextBoxBasePtr;

interface DECLSPEC_UUID("{6AB0BB67-4A4B-32F9-A18A-6481916C946F}") _MdiClient;
typedef TComInterface<_MdiClient, &IID__MdiClient> _MdiClientPtr;

interface DECLSPEC_UUID("{C3FA9EA8-275E-35E9-89DA-18B1FCA593EE}") _MonthCalendar;
typedef TComInterface<_MonthCalendar, &IID__MonthCalendar> _MonthCalendarPtr;

interface DECLSPEC_UUID("{2AD9F14A-0097-3C69-9F8E-5DDB52F3878B}") _NumericUpDown;
typedef TComInterface<_NumericUpDown, &IID__NumericUpDown> _NumericUpDownPtr;

interface DECLSPEC_UUID("{BB1C5180-87D0-330C-B698-EE2132DF362E}") _PictureBox;
typedef TComInterface<_PictureBox, &IID__PictureBox> _PictureBoxPtr;

interface DECLSPEC_UUID("{FA3B8143-ECB8-3A38-9DE5-DB0EEA708B5F}") _PrintPreviewControl;
typedef TComInterface<_PrintPreviewControl, &IID__PrintPreviewControl> _PrintPreviewControlPtr;

interface DECLSPEC_UUID("{57C090D5-80BC-33B8-B782-706A8D833767}") _PrintPreviewDialog;
typedef TComInterface<_PrintPreviewDialog, &IID__PrintPreviewDialog> _PrintPreviewDialogPtr;

interface DECLSPEC_UUID("{8E935BCB-21E1-377C-A59F-89F7BA5A4E0F}") _ProgressBar;
typedef TComInterface<_ProgressBar, &IID__ProgressBar> _ProgressBarPtr;

interface DECLSPEC_UUID("{0C831618-60D7-32B2-9790-1EBDC5ADEFE5}") _PropertyGrid;
typedef TComInterface<_PropertyGrid, &IID__PropertyGrid> _PropertyGridPtr;

interface DECLSPEC_UUID("{DB6FE495-8F5B-3C66-9A17-4C40D5593906}") _PropertyTabChangedEventArgs;
typedef TComInterface<_PropertyTabChangedEventArgs, &IID__PropertyTabChangedEventArgs> _PropertyTabChangedEventArgsPtr;

interface DECLSPEC_UUID("{6D43DF59-7EA8-300F-ACB2-760A070CFCF2}") _PropertyValueChangedEventArgs;
typedef TComInterface<_PropertyValueChangedEventArgs, &IID__PropertyValueChangedEventArgs> _PropertyValueChangedEventArgsPtr;

interface DECLSPEC_UUID("{2FE9F084-1511-3052-BE7C-9010B522C10E}") _QueryAccessibilityHelpEventArgs;
typedef TComInterface<_QueryAccessibilityHelpEventArgs, &IID__QueryAccessibilityHelpEventArgs> _QueryAccessibilityHelpEventArgsPtr;

interface DECLSPEC_UUID("{3E431682-BBDE-31B1-AE7F-9D8DD582BD0D}") _RadioButton;
typedef TComInterface<_RadioButton, &IID__RadioButton> _RadioButtonPtr;

interface DECLSPEC_UUID("{EDC3C736-47FD-3F25-90E4-123234D64FD4}") _RadioButtonAccessibleObject;
typedef TComInterface<_RadioButtonAccessibleObject, &IID__RadioButtonAccessibleObject> _RadioButtonAccessibleObjectPtr;

interface DECLSPEC_UUID("{1B264763-A1C7-3441-9D61-7EDAEC2D0C44}") _RichTextBox;
typedef TComInterface<_RichTextBox, &IID__RichTextBox> _RichTextBoxPtr;

interface DECLSPEC_UUID("{C1DA069E-4C0B-3664-BBA1-F81864825085}") _SplitContainer;
typedef TComInterface<_SplitContainer, &IID__SplitContainer> _SplitContainerPtr;

interface DECLSPEC_UUID("{3A4C8B1A-4AF9-344A-BC88-DFE863328C86}") _SplitterPanel;
typedef TComInterface<_SplitterPanel, &IID__SplitterPanel> _SplitterPanelPtr;

interface DECLSPEC_UUID("{8E61AD1D-76AE-3501-9B36-481BFEBD3E3E}") _SplitterEventArgs;
typedef TComInterface<_SplitterEventArgs, &IID__SplitterEventArgs> _SplitterEventArgsPtr;

interface DECLSPEC_UUID("{C318A56D-0B03-3A5A-93F6-7DF0B3268237}") _Splitter;
typedef TComInterface<_Splitter, &IID__Splitter> _SplitterPtr;

interface DECLSPEC_UUID("{93409DA8-FE37-3D4E-9A08-B35B34122C64}") _StatusBar;
typedef TComInterface<_StatusBar, &IID__StatusBar> _StatusBarPtr;

interface DECLSPEC_UUID("{71CA209D-40D3-3409-B341-DA9B922CCA45}") _StatusStrip;
typedef TComInterface<_StatusStrip, &IID__StatusStrip> _StatusStripPtr;

interface DECLSPEC_UUID("{470DE738-5261-302A-B205-4744652D2FD3}") _TabControl;
typedef TComInterface<_TabControl, &IID__TabControl> _TabControlPtr;

interface DECLSPEC_UUID("{59183431-BD56-33D2-A2ED-FA414ADF8DCB}") _TabPage;
typedef TComInterface<_TabPage, &IID__TabPage> _TabPagePtr;

interface DECLSPEC_UUID("{05CBE5B2-0292-37DE-BE51-5B7599CA5A11}") _TableLayoutPanel;
typedef TComInterface<_TableLayoutPanel, &IID__TableLayoutPanel> _TableLayoutPanelPtr;

interface DECLSPEC_UUID("{B00AA2F6-4D83-3937-B4AC-4C2C2C3F6C70}") _ThreadExceptionDialog;
typedef TComInterface<_ThreadExceptionDialog, &IID__ThreadExceptionDialog> _ThreadExceptionDialogPtr;

interface DECLSPEC_UUID("{F6AB38B6-1C02-3B01-A7F8-510ED1C0B253}") _ToolBar;
typedef TComInterface<_ToolBar, &IID__ToolBar> _ToolBarPtr;

interface DECLSPEC_UUID("{6F7A7383-2ABE-39D6-85F6-7117ED41979C}") _ToolStripAccessibleObject;
typedef TComInterface<_ToolStripAccessibleObject, &IID__ToolStripAccessibleObject> _ToolStripAccessibleObjectPtr;

interface DECLSPEC_UUID("{2A42F137-D50D-3D62-AF58-4DF7A4F57C9B}") _ToolStripContainer;
typedef TComInterface<_ToolStripContainer, &IID__ToolStripContainer> _ToolStripContainerPtr;

interface DECLSPEC_UUID("{FB97C26A-FB56-3F71-BBC4-B1377E7B142D}") _ToolStripPanel;
typedef TComInterface<_ToolStripPanel, &IID__ToolStripPanel> _ToolStripPanelPtr;

interface DECLSPEC_UUID("{6EE3853E-DDEF-3F29-8F1B-1ED7180D9229}") _ToolStripContentPanel;
typedef TComInterface<_ToolStripContentPanel, &IID__ToolStripContentPanel> _ToolStripContentPanelPtr;

interface DECLSPEC_UUID("{C2322B43-25B3-3B30-B3DB-67E4DA2E6533}") _ToolStripDropDown;
typedef TComInterface<_ToolStripDropDown, &IID__ToolStripDropDown> _ToolStripDropDownPtr;

interface DECLSPEC_UUID("{DF0D9304-0E85-3FFC-8283-6F291F32EE61}") _ToolStripDropDownAccessibleObject;
typedef TComInterface<_ToolStripDropDownAccessibleObject, &IID__ToolStripDropDownAccessibleObject> _ToolStripDropDownAccessibleObjectPtr;

interface DECLSPEC_UUID("{8FD9748A-D04F-3DFB-96A8-5624290F4554}") _ToolStripItemAccessibleObject;
typedef TComInterface<_ToolStripItemAccessibleObject, &IID__ToolStripItemAccessibleObject> _ToolStripItemAccessibleObjectPtr;

interface DECLSPEC_UUID("{75781CE7-317D-3C54-95D4-3E4DC04B4D3F}") _ToolStripOverflow;
typedef TComInterface<_ToolStripOverflow, &IID__ToolStripOverflow> _ToolStripOverflowPtr;

interface DECLSPEC_UUID("{7A8CC9AD-4E8D-3AAF-941A-1511C9C1372A}") _TrackBar;
typedef TComInterface<_TrackBar, &IID__TrackBar> _TrackBarPtr;

interface DECLSPEC_UUID("{BA97ED62-9EBD-34E8-94AD-F71AEF67DEFF}") _TreeView;
typedef TComInterface<_TreeView, &IID__TreeView> _TreeViewPtr;

interface DECLSPEC_UUID("{F51EDF6C-9E49-334A-8AAE-B0C7C631ABE4}") _TreeNodeMouseHoverEventArgs;
typedef TComInterface<_TreeNodeMouseHoverEventArgs, &IID__TreeNodeMouseHoverEventArgs> _TreeNodeMouseHoverEventArgsPtr;

interface DECLSPEC_UUID("{6BEEDF4B-B688-3C0D-8B16-D53290790DFB}") _UserControl;
typedef TComInterface<_UserControl, &IID__UserControl> _UserControlPtr;

interface DECLSPEC_UUID("{469D64EC-EB30-3462-A93B-E01BAA5CAF83}") _VScrollBar;
typedef TComInterface<_VScrollBar, &IID__VScrollBar> _VScrollBarPtr;

interface DECLSPEC_UUID("{BB134D18-9643-3862-AA3B-17EBDB1A0DEF}") _WebBrowser;
typedef TComInterface<_WebBrowser, &IID__WebBrowser> _WebBrowserPtr;

interface DECLSPEC_UUID("{764905A9-B10E-3C61-96DD-FA6F4BF8648D}") _WebBrowserBase;
typedef TComInterface<_WebBrowserBase, &IID__WebBrowserBase> _WebBrowserBasePtr;

interface DECLSPEC_UUID("{A7006EFC-6E21-3B74-A9D7-9A2F12E46C8E}") _ComponentEditorForm;
typedef TComInterface<_ComponentEditorForm, &IID__ComponentEditorForm> _ComponentEditorFormPtr;

interface DECLSPEC_UUID("{C858A49A-FDCB-395D-BBB8-9B2B66DC0FB5}") _ComponentEditorPage;
typedef TComInterface<_ComponentEditorPage, &IID__ComponentEditorPage> _ComponentEditorPagePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _AccessibleObject AccessibleObject;
typedef _AccessibleObjectPtr AccessibleObjectPtr;
typedef _Form Form;
typedef _FormPtr FormPtr;
typedef _AxHost AxHost;
typedef _AxHostPtr AxHostPtr;
typedef _Control Control;
typedef _ControlPtr ControlPtr;
typedef _ContainerControl ContainerControl;
typedef _ContainerControlPtr ContainerControlPtr;
typedef _BindingNavigator BindingNavigator;
typedef _BindingNavigatorPtr BindingNavigatorPtr;
typedef _ToolStrip ToolStrip;
typedef _ToolStripPtr ToolStripPtr;
typedef _Button Button;
typedef _ButtonPtr ButtonPtr;
typedef _ButtonBase ButtonBase;
typedef _ButtonBasePtr ButtonBasePtr;
typedef _MouseEventArgs MouseEventArgs;
typedef _MouseEventArgsPtr MouseEventArgsPtr;
typedef _ButtonBaseAccessibleObject ButtonBaseAccessibleObject;
typedef _ButtonBaseAccessibleObjectPtr ButtonBaseAccessibleObjectPtr;
typedef _ControlAccessibleObject ControlAccessibleObject;
typedef _ControlAccessibleObjectPtr ControlAccessibleObjectPtr;
typedef _KeyEventArgs KeyEventArgs;
typedef _KeyEventArgsPtr KeyEventArgsPtr;
typedef _CheckBox CheckBox;
typedef _CheckBoxPtr CheckBoxPtr;
typedef _CheckBoxAccessibleObject CheckBoxAccessibleObject;
typedef _CheckBoxAccessibleObjectPtr CheckBoxAccessibleObjectPtr;
typedef _CheckedListBox CheckedListBox;
typedef _CheckedListBoxPtr CheckedListBoxPtr;
typedef _ListBox ListBox;
typedef _ListBoxPtr ListBoxPtr;
typedef _KeyPressEventArgs KeyPressEventArgs;
typedef _KeyPressEventArgsPtr KeyPressEventArgsPtr;
typedef _ItemCheckEventArgs ItemCheckEventArgs;
typedef _ItemCheckEventArgsPtr ItemCheckEventArgsPtr;
typedef _ListView ListView;
typedef _ListViewPtr ListViewPtr;
typedef _ComboBox ComboBox;
typedef _ComboBoxPtr ComboBoxPtr;
typedef _ListControl ListControl;
typedef _ListControlPtr ListControlPtr;
typedef _ChildAccessibleObject ChildAccessibleObject;
typedef _ChildAccessibleObjectPtr ChildAccessibleObjectPtr;
typedef _ScrollableControl ScrollableControl;
typedef _ScrollableControlPtr ScrollableControlPtr;
typedef _ContextMenuStrip ContextMenuStrip;
typedef _ContextMenuStripPtr ContextMenuStripPtr;
typedef _ToolStripDropDownMenu ToolStripDropDownMenu;
typedef _ToolStripDropDownMenuPtr ToolStripDropDownMenuPtr;
typedef _DragEventArgs DragEventArgs;
typedef _DragEventArgsPtr DragEventArgsPtr;
typedef _GiveFeedbackEventArgs GiveFeedbackEventArgs;
typedef _GiveFeedbackEventArgsPtr GiveFeedbackEventArgsPtr;
typedef _HelpEventArgs HelpEventArgs;
typedef _HelpEventArgsPtr HelpEventArgsPtr;
typedef _QueryContinueDragEventArgs QueryContinueDragEventArgs;
typedef _QueryContinueDragEventArgsPtr QueryContinueDragEventArgsPtr;
typedef _DataGrid DataGrid;
typedef _DataGridPtr DataGridPtr;
typedef _ScrollBar ScrollBar;
typedef _ScrollBarPtr ScrollBarPtr;
typedef _NavigateEventArgs NavigateEventArgs;
typedef _NavigateEventArgsPtr NavigateEventArgsPtr;
typedef _ScrollEventArgs ScrollEventArgs;
typedef _ScrollEventArgsPtr ScrollEventArgsPtr;
typedef _DataGridTextBox DataGridTextBox;
typedef _DataGridTextBoxPtr DataGridTextBoxPtr;
typedef _TextBox TextBox;
typedef _TextBoxPtr TextBoxPtr;
typedef _DataGridView DataGridView;
typedef _DataGridViewPtr DataGridViewPtr;
typedef _Panel Panel;
typedef _PanelPtr PanelPtr;
typedef _DataGridViewComboBoxEditingControl DataGridViewComboBoxEditingControl;
typedef _DataGridViewComboBoxEditingControlPtr DataGridViewComboBoxEditingControlPtr;
typedef _DataGridViewTextBoxEditingControl DataGridViewTextBoxEditingControl;
typedef _DataGridViewTextBoxEditingControlPtr DataGridViewTextBoxEditingControlPtr;
typedef _DateTimePicker DateTimePicker;
typedef _DateTimePickerPtr DateTimePickerPtr;
typedef _DateTimePickerAccessibleObject DateTimePickerAccessibleObject;
typedef _DateTimePickerAccessibleObjectPtr DateTimePickerAccessibleObjectPtr;
typedef _DomainUpDown DomainUpDown;
typedef _DomainUpDownPtr DomainUpDownPtr;
typedef _UpDownBase UpDownBase;
typedef _UpDownBasePtr UpDownBasePtr;
typedef _DomainItemAccessibleObject DomainItemAccessibleObject;
typedef _DomainItemAccessibleObjectPtr DomainItemAccessibleObjectPtr;
typedef _DomainUpDownAccessibleObject DomainUpDownAccessibleObject;
typedef _DomainUpDownAccessibleObjectPtr DomainUpDownAccessibleObjectPtr;
typedef _FlowLayoutPanel FlowLayoutPanel;
typedef _FlowLayoutPanelPtr FlowLayoutPanelPtr;
typedef _MenuStrip MenuStrip;
typedef _MenuStripPtr MenuStripPtr;
typedef _GroupBox GroupBox;
typedef _GroupBoxPtr GroupBoxPtr;
typedef _HScrollBar HScrollBar;
typedef _HScrollBarPtr HScrollBarPtr;
typedef _ItemDragEventArgs ItemDragEventArgs;
typedef _ItemDragEventArgsPtr ItemDragEventArgsPtr;
typedef _Label Label;
typedef _LabelPtr LabelPtr;
typedef _LinkClickedEventArgs LinkClickedEventArgs;
typedef _LinkClickedEventArgsPtr LinkClickedEventArgsPtr;
typedef _LinkLabel LinkLabel;
typedef _LinkLabelPtr LinkLabelPtr;
typedef _LinkLabelLinkClickedEventArgs LinkLabelLinkClickedEventArgs;
typedef _LinkLabelLinkClickedEventArgsPtr LinkLabelLinkClickedEventArgsPtr;
typedef _ListViewItemMouseHoverEventArgs ListViewItemMouseHoverEventArgs;
typedef _ListViewItemMouseHoverEventArgsPtr ListViewItemMouseHoverEventArgsPtr;
typedef _MaskedTextBox MaskedTextBox;
typedef _MaskedTextBoxPtr MaskedTextBoxPtr;
typedef _TextBoxBase TextBoxBase;
typedef _TextBoxBasePtr TextBoxBasePtr;
typedef _MdiClient MdiClient;
typedef _MdiClientPtr MdiClientPtr;
typedef _MonthCalendar MonthCalendar;
typedef _MonthCalendarPtr MonthCalendarPtr;
typedef _NumericUpDown NumericUpDown;
typedef _NumericUpDownPtr NumericUpDownPtr;
typedef _PictureBox PictureBox;
typedef _PictureBoxPtr PictureBoxPtr;
typedef _PrintPreviewControl PrintPreviewControl;
typedef _PrintPreviewControlPtr PrintPreviewControlPtr;
typedef _PrintPreviewDialog PrintPreviewDialog;
typedef _PrintPreviewDialogPtr PrintPreviewDialogPtr;
typedef _ProgressBar ProgressBar;
typedef _ProgressBarPtr ProgressBarPtr;
typedef _PropertyGrid PropertyGrid;
typedef _PropertyGridPtr PropertyGridPtr;
typedef _PropertyTabChangedEventArgs PropertyTabChangedEventArgs;
typedef _PropertyTabChangedEventArgsPtr PropertyTabChangedEventArgsPtr;
typedef _PropertyValueChangedEventArgs PropertyValueChangedEventArgs;
typedef _PropertyValueChangedEventArgsPtr PropertyValueChangedEventArgsPtr;
typedef _QueryAccessibilityHelpEventArgs QueryAccessibilityHelpEventArgs;
typedef _QueryAccessibilityHelpEventArgsPtr QueryAccessibilityHelpEventArgsPtr;
typedef _RadioButton RadioButton;
typedef _RadioButtonPtr RadioButtonPtr;
typedef _RadioButtonAccessibleObject RadioButtonAccessibleObject;
typedef _RadioButtonAccessibleObjectPtr RadioButtonAccessibleObjectPtr;
typedef _RichTextBox RichTextBox;
typedef _RichTextBoxPtr RichTextBoxPtr;
typedef _SplitContainer SplitContainer;
typedef _SplitContainerPtr SplitContainerPtr;
typedef _SplitterPanel SplitterPanel;
typedef _SplitterPanelPtr SplitterPanelPtr;
typedef _SplitterEventArgs SplitterEventArgs;
typedef _SplitterEventArgsPtr SplitterEventArgsPtr;
typedef _Splitter Splitter;
typedef _SplitterPtr SplitterPtr;
typedef _StatusBar StatusBar;
typedef _StatusBarPtr StatusBarPtr;
typedef _StatusStrip StatusStrip;
typedef _StatusStripPtr StatusStripPtr;
typedef _TabControl TabControl;
typedef _TabControlPtr TabControlPtr;
typedef _TabPage TabPage;
typedef _TabPagePtr TabPagePtr;
typedef _TableLayoutPanel TableLayoutPanel;
typedef _TableLayoutPanelPtr TableLayoutPanelPtr;
typedef _ThreadExceptionDialog ThreadExceptionDialog;
typedef _ThreadExceptionDialogPtr ThreadExceptionDialogPtr;
typedef _ToolBar ToolBar;
typedef _ToolBarPtr ToolBarPtr;
typedef _ToolStripAccessibleObject ToolStripAccessibleObject;
typedef _ToolStripAccessibleObjectPtr ToolStripAccessibleObjectPtr;
typedef _ToolStripContainer ToolStripContainer;
typedef _ToolStripContainerPtr ToolStripContainerPtr;
typedef _ToolStripPanel ToolStripPanel;
typedef _ToolStripPanelPtr ToolStripPanelPtr;
typedef _ToolStripContentPanel ToolStripContentPanel;
typedef _ToolStripContentPanelPtr ToolStripContentPanelPtr;
typedef _ToolStripDropDown ToolStripDropDown;
typedef _ToolStripDropDownPtr ToolStripDropDownPtr;
typedef _ToolStripDropDownAccessibleObject ToolStripDropDownAccessibleObject;
typedef _ToolStripDropDownAccessibleObjectPtr ToolStripDropDownAccessibleObjectPtr;
typedef _ToolStripItemAccessibleObject ToolStripItemAccessibleObject;
typedef _ToolStripItemAccessibleObjectPtr ToolStripItemAccessibleObjectPtr;
typedef _ToolStripOverflow ToolStripOverflow;
typedef _ToolStripOverflowPtr ToolStripOverflowPtr;
typedef _TrackBar TrackBar;
typedef _TrackBarPtr TrackBarPtr;
typedef _TreeView TreeView;
typedef _TreeViewPtr TreeViewPtr;
typedef _TreeNodeMouseHoverEventArgs TreeNodeMouseHoverEventArgs;
typedef _TreeNodeMouseHoverEventArgsPtr TreeNodeMouseHoverEventArgsPtr;
typedef _UserControl UserControl;
typedef _UserControlPtr UserControlPtr;
typedef _VScrollBar VScrollBar;
typedef _VScrollBarPtr VScrollBarPtr;
typedef _WebBrowser WebBrowser;
typedef _WebBrowserPtr WebBrowserPtr;
typedef _WebBrowserBase WebBrowserBase;
typedef _WebBrowserBasePtr WebBrowserBasePtr;
typedef _ComponentEditorForm ComponentEditorForm;
typedef _ComponentEditorFormPtr ComponentEditorFormPtr;
typedef _ComponentEditorPage ComponentEditorPage;
typedef _ComponentEditorPagePtr ComponentEditorPagePtr;

#define LIBID_OF_AccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_Form (&LIBID_System_Windows_Forms)
#define LIBID_OF_AxHost (&LIBID_System_Windows_Forms)
#define LIBID_OF_Control (&LIBID_System_Windows_Forms)
#define LIBID_OF_ContainerControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_BindingNavigator (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStrip (&LIBID_System_Windows_Forms)
#define LIBID_OF_Button (&LIBID_System_Windows_Forms)
#define LIBID_OF_ButtonBase (&LIBID_System_Windows_Forms)
#define LIBID_OF_MouseEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_ButtonBaseAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_ControlAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_KeyEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_CheckBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_CheckBoxAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_CheckedListBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_ListBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_KeyPressEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_ItemCheckEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_ListView (&LIBID_System_Windows_Forms)
#define LIBID_OF_ComboBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_ListControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_ChildAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_ScrollableControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_ContextMenuStrip (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripDropDownMenu (&LIBID_System_Windows_Forms)
#define LIBID_OF_DragEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_GiveFeedbackEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_HelpEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_QueryContinueDragEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_DataGrid (&LIBID_System_Windows_Forms)
#define LIBID_OF_ScrollBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_NavigateEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_ScrollEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_DataGridTextBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_TextBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_DataGridView (&LIBID_System_Windows_Forms)
#define LIBID_OF_Panel (&LIBID_System_Windows_Forms)
#define LIBID_OF_DataGridViewComboBoxEditingControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_DataGridViewTextBoxEditingControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_DateTimePicker (&LIBID_System_Windows_Forms)
#define LIBID_OF_DateTimePickerAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_DomainUpDown (&LIBID_System_Windows_Forms)
#define LIBID_OF_UpDownBase (&LIBID_System_Windows_Forms)
#define LIBID_OF_DomainItemAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_DomainUpDownAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_FlowLayoutPanel (&LIBID_System_Windows_Forms)
#define LIBID_OF_MenuStrip (&LIBID_System_Windows_Forms)
#define LIBID_OF_GroupBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_HScrollBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_ItemDragEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_Label (&LIBID_System_Windows_Forms)
#define LIBID_OF_LinkClickedEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_LinkLabel (&LIBID_System_Windows_Forms)
#define LIBID_OF_LinkLabelLinkClickedEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_ListViewItemMouseHoverEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_MaskedTextBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_TextBoxBase (&LIBID_System_Windows_Forms)
#define LIBID_OF_MdiClient (&LIBID_System_Windows_Forms)
#define LIBID_OF_MonthCalendar (&LIBID_System_Windows_Forms)
#define LIBID_OF_NumericUpDown (&LIBID_System_Windows_Forms)
#define LIBID_OF_PictureBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_PrintPreviewControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_PrintPreviewDialog (&LIBID_System_Windows_Forms)
#define LIBID_OF_ProgressBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_PropertyGrid (&LIBID_System_Windows_Forms)
#define LIBID_OF_PropertyTabChangedEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_PropertyValueChangedEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_QueryAccessibilityHelpEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_RadioButton (&LIBID_System_Windows_Forms)
#define LIBID_OF_RadioButtonAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_RichTextBox (&LIBID_System_Windows_Forms)
#define LIBID_OF_SplitContainer (&LIBID_System_Windows_Forms)
#define LIBID_OF_SplitterPanel (&LIBID_System_Windows_Forms)
#define LIBID_OF_SplitterEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_Splitter (&LIBID_System_Windows_Forms)
#define LIBID_OF_StatusBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_StatusStrip (&LIBID_System_Windows_Forms)
#define LIBID_OF_TabControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_TabPage (&LIBID_System_Windows_Forms)
#define LIBID_OF_TableLayoutPanel (&LIBID_System_Windows_Forms)
#define LIBID_OF_ThreadExceptionDialog (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripContainer (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripPanel (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripContentPanel (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripDropDown (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripDropDownAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripItemAccessibleObject (&LIBID_System_Windows_Forms)
#define LIBID_OF_ToolStripOverflow (&LIBID_System_Windows_Forms)
#define LIBID_OF_TrackBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_TreeView (&LIBID_System_Windows_Forms)
#define LIBID_OF_TreeNodeMouseHoverEventArgs (&LIBID_System_Windows_Forms)
#define LIBID_OF_UserControl (&LIBID_System_Windows_Forms)
#define LIBID_OF_VScrollBar (&LIBID_System_Windows_Forms)
#define LIBID_OF_WebBrowser (&LIBID_System_Windows_Forms)
#define LIBID_OF_WebBrowserBase (&LIBID_System_Windows_Forms)
#define LIBID_OF_ComponentEditorForm (&LIBID_System_Windows_Forms)
#define LIBID_OF_ComponentEditorPage (&LIBID_System_Windows_Forms)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class Appearance
{
  Appearance_Button = 1, 
  Appearance_Normal = 0
};

enum class ArrangeDirection
{
  ArrangeDirection_Down = 4, 
  ArrangeDirection_Left = 0, 
  ArrangeDirection_Right = 0, 
  ArrangeDirection_Up = 4
};

enum class ImeMode
{
  ImeMode_Alpha = 8, 
  ImeMode_AlphaFull = 7, 
  ImeMode_Close = 11, 
  ImeMode_Disable = 3, 
  ImeMode_Hangul = 10, 
  ImeMode_HangulFull = 9, 
  ImeMode_Hiragana = 4, 
  ImeMode_Inherit = (int)-1,  //0xFFFFFFFF
  ImeMode_Katakana = 5, 
  ImeMode_KatakanaHalf = 6, 
  ImeMode_NoControl = 0, 
  ImeMode_Off = 2, 
  ImeMode_On = 1, 
  ImeMode_OnHalf = 12
};

enum class Keys
{
  Keys_A = 65, 
  Keys_Add = 107, 
  Keys_Alt = 262144, 
  Keys_Apps = 93, 
  Keys_Attn = 246, 
  Keys_B = 66, 
  Keys_Back = 8, 
  Keys_BrowserBack = 166, 
  Keys_BrowserFavorites = 171, 
  Keys_BrowserForward = 167, 
  Keys_BrowserHome = 172, 
  Keys_BrowserRefresh = 168, 
  Keys_BrowserSearch = 170, 
  Keys_BrowserStop = 169, 
  Keys_C = 67, 
  Keys_Cancel = 3, 
  Keys_Capital = 20, 
  Keys_CapsLock = 20, 
  Keys_Clear = 12, 
  Keys_Control = 131072, 
  Keys_ControlKey = 17, 
  Keys_Crsel = 247, 
  Keys_D = 68, 
  Keys_D0 = 48, 
  Keys_D1 = 49, 
  Keys_D2 = 50, 
  Keys_D3 = 51, 
  Keys_D4 = 52, 
  Keys_D5 = 53, 
  Keys_D6 = 54, 
  Keys_D7 = 55, 
  Keys_D8 = 56, 
  Keys_D9 = 57, 
  Keys_Decimal = 110, 
  Keys_Delete = 46, 
  Keys_Divide = 111, 
  Keys_Down = 40, 
  Keys_E = 69, 
  Keys_End = 35, 
  Keys_Enter = 13, 
  Keys_EraseEof = 249, 
  Keys_Escape = 27, 
  Keys_Execute = 43, 
  Keys_Exsel = 248, 
  Keys_F = 70, 
  Keys_F1 = 112, 
  Keys_F10 = 121, 
  Keys_F11 = 122, 
  Keys_F12 = 123, 
  Keys_F13 = 124, 
  Keys_F14 = 125, 
  Keys_F15 = 126, 
  Keys_F16 = 127, 
  Keys_F17 = 128, 
  Keys_F18 = 129, 
  Keys_F19 = 130, 
  Keys_F2 = 113, 
  Keys_F20 = 131, 
  Keys_F21 = 132, 
  Keys_F22 = 133, 
  Keys_F23 = 134, 
  Keys_F24 = 135, 
  Keys_F3 = 114, 
  Keys_F4 = 115, 
  Keys_F5 = 116, 
  Keys_F6 = 117, 
  Keys_F7 = 118, 
  Keys_F8 = 119, 
  Keys_F9 = 120, 
  Keys_FinalMode = 24, 
  Keys_G = 71, 
  Keys_H = 72, 
  Keys_HanguelMode = 21, 
  Keys_HangulMode = 21, 
  Keys_HanjaMode = 25, 
  Keys_Help = 47, 
  Keys_Home = 36, 
  Keys_I = 73, 
  Keys_IMEAccept = 30, 
  Keys_IMEAceept = 30, 
  Keys_IMEConvert = 28, 
  Keys_IMEModeChange = 31, 
  Keys_IMENonconvert = 29, 
  Keys_Insert = 45, 
  Keys_J = 74, 
  Keys_JunjaMode = 23, 
  Keys_K = 75, 
  Keys_KanaMode = 21, 
  Keys_KanjiMode = 25, 
  Keys_KeyCode = 65535, 
  Keys_L = 76, 
  Keys_LButton = 1, 
  Keys_LControlKey = 162, 
  Keys_LMenu = 164, 
  Keys_LShiftKey = 160, 
  Keys_LWin = 91, 
  Keys_LaunchApplication1 = 182, 
  Keys_LaunchApplication2 = 183, 
  Keys_LaunchMail = 180, 
  Keys_Left = 37, 
  Keys_LineFeed = 10, 
  Keys_M = 77, 
  Keys_MButton = 4, 
  Keys_MediaNextTrack = 176, 
  Keys_MediaPlayPause = 179, 
  Keys_MediaPreviousTrack = 177, 
  Keys_MediaStop = 178, 
  Keys_Menu = 18, 
  Keys_Modifiers = (int)-65536,  //0xFFFF0000
  Keys_Multiply = 106, 
  Keys_N = 78, 
  Keys_Next = 34, 
  Keys_NoName = 252, 
  Keys_None = 0, 
  Keys_NumLock = 144, 
  Keys_NumPad0 = 96, 
  Keys_NumPad1 = 97, 
  Keys_NumPad2 = 98, 
  Keys_NumPad3 = 99, 
  Keys_NumPad4 = 100, 
  Keys_NumPad5 = 101, 
  Keys_NumPad6 = 102, 
  Keys_NumPad7 = 103, 
  Keys_NumPad8 = 104, 
  Keys_NumPad9 = 105, 
  Keys_O = 79, 
  Keys_Oem1 = 186, 
  Keys_Oem102 = 226, 
  Keys_Oem2 = 191, 
  Keys_Oem3 = 192, 
  Keys_Oem4 = 219, 
  Keys_Oem5 = 220, 
  Keys_Oem6 = 221, 
  Keys_Oem7 = 222, 
  Keys_Oem8 = 223, 
  Keys_OemBackslash = 226, 
  Keys_OemClear = 254, 
  Keys_OemCloseBrackets = 221, 
  Keys_OemMinus = 189, 
  Keys_OemOpenBrackets = 219, 
  Keys_OemPeriod = 190, 
  Keys_OemPipe = 220, 
  Keys_OemQuestion = 191, 
  Keys_OemQuotes = 222, 
  Keys_OemSemicolon = 186, 
  Keys_Oemcomma = 188, 
  Keys_Oemplus = 187, 
  Keys_Oemtilde = 192, 
  Keys_P = 80, 
  Keys_Pa1 = 253, 
  Keys_Packet = 231, 
  Keys_PageDown = 34, 
  Keys_PageUp = 33, 
  Keys_Pause = 19, 
  Keys_Play = 250, 
  Keys_Print = 42, 
  Keys_PrintScreen = 44, 
  Keys_Prior = 33, 
  Keys_ProcessKey = 229, 
  Keys_Q = 81, 
  Keys_R = 82, 
  Keys_RButton = 2, 
  Keys_RControlKey = 163, 
  Keys_RMenu = 165, 
  Keys_RShiftKey = 161, 
  Keys_RWin = 92, 
  Keys_Return = 13, 
  Keys_Right = 39, 
  Keys_S = 83, 
  Keys_Scroll = 145, 
  Keys_Select = 41, 
  Keys_SelectMedia = 181, 
  Keys_Separator = 108, 
  Keys_Shift = 65536, 
  Keys_ShiftKey = 16, 
  Keys_Sleep = 95, 
  Keys_Snapshot = 44, 
  Keys_Space = 32, 
  Keys_Subtract = 109, 
  Keys_T = 84, 
  Keys_Tab = 9, 
  Keys_U = 85, 
  Keys_Up = 38, 
  Keys_V = 86, 
  Keys_VolumeDown = 174, 
  Keys_VolumeMute = 173, 
  Keys_VolumeUp = 175, 
  Keys_W = 87, 
  Keys_X = 88, 
  Keys_XButton1 = 5, 
  Keys_XButton2 = 6, 
  Keys_Y = 89, 
  Keys_Z = 90, 
  Keys_Zoom = 251
};

enum class Border3DSide
{
  Border3DSide_All = 2063, 
  Border3DSide_Bottom = 8, 
  Border3DSide_Left = 1, 
  Border3DSide_Middle = 2048, 
  Border3DSide_Right = 4, 
  Border3DSide_Top = 2
};

enum class Border3DStyle
{
  Border3DStyle_Adjust = 8192, 
  Border3DStyle_Bump = 9, 
  Border3DStyle_Etched = 6, 
  Border3DStyle_Flat = 16394, 
  Border3DStyle_Raised = 5, 
  Border3DStyle_RaisedInner = 4, 
  Border3DStyle_RaisedOuter = 1, 
  Border3DStyle_Sunken = 10, 
  Border3DStyle_SunkenInner = 8, 
  Border3DStyle_SunkenOuter = 2
};

enum class BorderStyle
{
  BorderStyle_Fixed3D = 2, 
  BorderStyle_FixedSingle = 1, 
  BorderStyle_None = 0
};

enum class DialogResult
{
  DialogResult_Abort = 3, 
  DialogResult_Cancel = 2, 
  DialogResult_Ignore = 5, 
  DialogResult_No = 7, 
  DialogResult_None = 0, 
  DialogResult_OK = 1, 
  DialogResult_Retry = 4, 
  DialogResult_Yes = 6
};

enum class SelectionMode
{
  SelectionMode_MultiExtended = 3, 
  SelectionMode_MultiSimple = 2, 
  SelectionMode_None = 0, 
  SelectionMode_One = 1
};

enum class HorizontalAlignment
{
  HorizontalAlignment_Center = 2, 
  HorizontalAlignment_Left = 0, 
  HorizontalAlignment_Right = 1
};

enum class LeftRightAlignment
{
  LeftRightAlignment_Left = 0, 
  LeftRightAlignment_Right = 1
};

enum class MouseButtons
{
  MouseButtons_Left = 1048576, 
  MouseButtons_Middle = 4194304, 
  MouseButtons_None = 0, 
  MouseButtons_Right = 2097152, 
  MouseButtons_XButton1 = 8388608, 
  MouseButtons_XButton2 = 16777216
};

enum class DataGridViewElementStates
{
  DataGridViewElementStates_Displayed = 1, 
  DataGridViewElementStates_Frozen = 2, 
  DataGridViewElementStates_None = 0, 
  DataGridViewElementStates_ReadOnly = 4, 
  DataGridViewElementStates_Resizable = 8, 
  DataGridViewElementStates_ResizableSet = 16, 
  DataGridViewElementStates_Selected = 32, 
  DataGridViewElementStates_Visible = 64
};

enum class DragAction
{
  DragAction_Cancel = 2, 
  DragAction_Continue = 0, 
  DragAction_Drop = 1
};

enum class FormBorderStyle
{
  FormBorderStyle_Fixed3D = 2, 
  FormBorderStyle_FixedDialog = 3, 
  FormBorderStyle_FixedSingle = 1, 
  FormBorderStyle_FixedToolWindow = 5, 
  FormBorderStyle_None = 0, 
  FormBorderStyle_Sizable = 4, 
  FormBorderStyle_SizableToolWindow = 6
};

enum class FormStartPosition
{
  FormStartPosition_CenterParent = 4, 
  FormStartPosition_CenterScreen = 1, 
  FormStartPosition_Manual = 0, 
  FormStartPosition_WindowsDefaultBounds = 3, 
  FormStartPosition_WindowsDefaultLocation = 2
};

enum class FormWindowState
{
  FormWindowState_Maximized = 2, 
  FormWindowState_Minimized = 1, 
  FormWindowState_Normal = 0
};

enum class Shortcut
{
  Shortcut_Alt0 = 262192, 
  Shortcut_Alt1 = 262193, 
  Shortcut_Alt2 = 262194, 
  Shortcut_Alt3 = 262195, 
  Shortcut_Alt4 = 262196, 
  Shortcut_Alt5 = 262197, 
  Shortcut_Alt6 = 262198, 
  Shortcut_Alt7 = 262199, 
  Shortcut_Alt8 = 262200, 
  Shortcut_Alt9 = 262201, 
  Shortcut_AltBksp = 262152, 
  Shortcut_AltDownArrow = 262184, 
  Shortcut_AltF1 = 262256, 
  Shortcut_AltF10 = 262265, 
  Shortcut_AltF11 = 262266, 
  Shortcut_AltF12 = 262267, 
  Shortcut_AltF2 = 262257, 
  Shortcut_AltF3 = 262258, 
  Shortcut_AltF4 = 262259, 
  Shortcut_AltF5 = 262260, 
  Shortcut_AltF6 = 262261, 
  Shortcut_AltF7 = 262262, 
  Shortcut_AltF8 = 262263, 
  Shortcut_AltF9 = 262264, 
  Shortcut_AltLeftArrow = 262181, 
  Shortcut_AltRightArrow = 262183, 
  Shortcut_AltUpArrow = 262182, 
  Shortcut_Ctrl0 = 131120, 
  Shortcut_Ctrl1 = 131121, 
  Shortcut_Ctrl2 = 131122, 
  Shortcut_Ctrl3 = 131123, 
  Shortcut_Ctrl4 = 131124, 
  Shortcut_Ctrl5 = 131125, 
  Shortcut_Ctrl6 = 131126, 
  Shortcut_Ctrl7 = 131127, 
  Shortcut_Ctrl8 = 131128, 
  Shortcut_Ctrl9 = 131129, 
  Shortcut_CtrlA = 131137, 
  Shortcut_CtrlB = 131138, 
  Shortcut_CtrlC = 131139, 
  Shortcut_CtrlD = 131140, 
  Shortcut_CtrlDel = 131118, 
  Shortcut_CtrlE = 131141, 
  Shortcut_CtrlF = 131142, 
  Shortcut_CtrlF1 = 131184, 
  Shortcut_CtrlF10 = 131193, 
  Shortcut_CtrlF11 = 131194, 
  Shortcut_CtrlF12 = 131195, 
  Shortcut_CtrlF2 = 131185, 
  Shortcut_CtrlF3 = 131186, 
  Shortcut_CtrlF4 = 131187, 
  Shortcut_CtrlF5 = 131188, 
  Shortcut_CtrlF6 = 131189, 
  Shortcut_CtrlF7 = 131190, 
  Shortcut_CtrlF8 = 131191, 
  Shortcut_CtrlF9 = 131192, 
  Shortcut_CtrlG = 131143, 
  Shortcut_CtrlH = 131144, 
  Shortcut_CtrlI = 131145, 
  Shortcut_CtrlIns = 131117, 
  Shortcut_CtrlJ = 131146, 
  Shortcut_CtrlK = 131147, 
  Shortcut_CtrlL = 131148, 
  Shortcut_CtrlM = 131149, 
  Shortcut_CtrlN = 131150, 
  Shortcut_CtrlO = 131151, 
  Shortcut_CtrlP = 131152, 
  Shortcut_CtrlQ = 131153, 
  Shortcut_CtrlR = 131154, 
  Shortcut_CtrlS = 131155, 
  Shortcut_CtrlShift0 = 196656, 
  Shortcut_CtrlShift1 = 196657, 
  Shortcut_CtrlShift2 = 196658, 
  Shortcut_CtrlShift3 = 196659, 
  Shortcut_CtrlShift4 = 196660, 
  Shortcut_CtrlShift5 = 196661, 
  Shortcut_CtrlShift6 = 196662, 
  Shortcut_CtrlShift7 = 196663, 
  Shortcut_CtrlShift8 = 196664, 
  Shortcut_CtrlShift9 = 196665, 
  Shortcut_CtrlShiftA = 196673, 
  Shortcut_CtrlShiftB = 196674, 
  Shortcut_CtrlShiftC = 196675, 
  Shortcut_CtrlShiftD = 196676, 
  Shortcut_CtrlShiftE = 196677, 
  Shortcut_CtrlShiftF = 196678, 
  Shortcut_CtrlShiftF1 = 196720, 
  Shortcut_CtrlShiftF10 = 196729, 
  Shortcut_CtrlShiftF11 = 196730, 
  Shortcut_CtrlShiftF12 = 196731, 
  Shortcut_CtrlShiftF2 = 196721, 
  Shortcut_CtrlShiftF3 = 196722, 
  Shortcut_CtrlShiftF4 = 196723, 
  Shortcut_CtrlShiftF5 = 196724, 
  Shortcut_CtrlShiftF6 = 196725, 
  Shortcut_CtrlShiftF7 = 196726, 
  Shortcut_CtrlShiftF8 = 196727, 
  Shortcut_CtrlShiftF9 = 196728, 
  Shortcut_CtrlShiftG = 196679, 
  Shortcut_CtrlShiftH = 196680, 
  Shortcut_CtrlShiftI = 196681, 
  Shortcut_CtrlShiftJ = 196682, 
  Shortcut_CtrlShiftK = 196683, 
  Shortcut_CtrlShiftL = 196684, 
  Shortcut_CtrlShiftM = 196685, 
  Shortcut_CtrlShiftN = 196686, 
  Shortcut_CtrlShiftO = 196687, 
  Shortcut_CtrlShiftP = 196688, 
  Shortcut_CtrlShiftQ = 196689, 
  Shortcut_CtrlShiftR = 196690, 
  Shortcut_CtrlShiftS = 196691, 
  Shortcut_CtrlShiftT = 196692, 
  Shortcut_CtrlShiftU = 196693, 
  Shortcut_CtrlShiftV = 196694, 
  Shortcut_CtrlShiftW = 196695, 
  Shortcut_CtrlShiftX = 196696, 
  Shortcut_CtrlShiftY = 196697, 
  Shortcut_CtrlShiftZ = 196698, 
  Shortcut_CtrlT = 131156, 
  Shortcut_CtrlU = 131157, 
  Shortcut_CtrlV = 131158, 
  Shortcut_CtrlW = 131159, 
  Shortcut_CtrlX = 131160, 
  Shortcut_CtrlY = 131161, 
  Shortcut_CtrlZ = 131162, 
  Shortcut_Del = 46, 
  Shortcut_F1 = 112, 
  Shortcut_F10 = 121, 
  Shortcut_F11 = 122, 
  Shortcut_F12 = 123, 
  Shortcut_F2 = 113, 
  Shortcut_F3 = 114, 
  Shortcut_F4 = 115, 
  Shortcut_F5 = 116, 
  Shortcut_F6 = 117, 
  Shortcut_F7 = 118, 
  Shortcut_F8 = 119, 
  Shortcut_F9 = 120, 
  Shortcut_Ins = 45, 
  Shortcut_None = 0, 
  Shortcut_ShiftDel = 65582, 
  Shortcut_ShiftF1 = 65648, 
  Shortcut_ShiftF10 = 65657, 
  Shortcut_ShiftF11 = 65658, 
  Shortcut_ShiftF12 = 65659, 
  Shortcut_ShiftF2 = 65649, 
  Shortcut_ShiftF3 = 65650, 
  Shortcut_ShiftF4 = 65651, 
  Shortcut_ShiftF5 = 65652, 
  Shortcut_ShiftF6 = 65653, 
  Shortcut_ShiftF7 = 65654, 
  Shortcut_ShiftF8 = 65655, 
  Shortcut_ShiftF9 = 65656, 
  Shortcut_ShiftIns = 65581
};

enum class SystemParameter
{
  SystemParameter_CaretWidthMetric = 8, 
  SystemParameter_DropShadow = 0, 
  SystemParameter_FlatMenu = 1, 
  SystemParameter_FontSmoothingContrastMetric = 2, 
  SystemParameter_FontSmoothingTypeMetric = 3, 
  SystemParameter_HorizontalFocusThicknessMetric = 10, 
  SystemParameter_MenuFadeEnabled = 4, 
  SystemParameter_SelectionFade = 5, 
  SystemParameter_ToolTipAnimationMetric = 6, 
  SystemParameter_UIEffects = 7, 
  SystemParameter_VerticalFocusThicknessMetric = 9
};

enum class PropertySort
{
  PropertySort_Alphabetical = 1, 
  PropertySort_Categorized = 2, 
  PropertySort_CategorizedAlphabetical = 3, 
  PropertySort_NoSort = 0
};

enum class ScrollEventType
{
  ScrollEventType_EndScroll = 8, 
  ScrollEventType_First = 6, 
  ScrollEventType_LargeDecrement = 2, 
  ScrollEventType_LargeIncrement = 3, 
  ScrollEventType_Last = 7, 
  ScrollEventType_SmallDecrement = 0, 
  ScrollEventType_SmallIncrement = 1, 
  ScrollEventType_ThumbPosition = 4, 
  ScrollEventType_ThumbTrack = 5
};

enum class ToolStripStatusLabelBorderSides
{
  ToolStripStatusLabelBorderSides_All = 15, 
  ToolStripStatusLabelBorderSides_Bottom = 8, 
  ToolStripStatusLabelBorderSides_Left = 1, 
  ToolStripStatusLabelBorderSides_None = 0, 
  ToolStripStatusLabelBorderSides_Right = 4, 
  ToolStripStatusLabelBorderSides_Top = 2
};

enum class TreeViewHitTestLocations
{
  TreeViewHitTestLocations_AboveClientArea = 256, 
  TreeViewHitTestLocations_BelowClientArea = 512, 
  TreeViewHitTestLocations_Image = 2, 
  TreeViewHitTestLocations_Indent = 8, 
  TreeViewHitTestLocations_Label = 4, 
  TreeViewHitTestLocations_LeftOfClientArea = 2048, 
  TreeViewHitTestLocations_None = 1, 
  TreeViewHitTestLocations_PlusMinus = 16, 
  TreeViewHitTestLocations_RightOfClientArea = 1024, 
  TreeViewHitTestLocations_RightOfLabel = 32, 
  TreeViewHitTestLocations_StateImage = 64
};

// *********************************************************************//
// Interface: _AccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {399C0499-29D3-3D95-AF77-111DCDB92177}
// *********************************************************************//
interface _AccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD0C79DB-37BE-3B61-9C53-2E4857237227}
// *********************************************************************//
interface _Form  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _AxHost
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {548054D5-75C5-3A72-A87B-D6F305254065}
// *********************************************************************//
interface _AxHost  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83ACBFAE-1A16-33EB-ABA0-BA8DF0B206D7}
// *********************************************************************//
interface _Control  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWin32Window
// Flags:     (256) OleAutomation
// GUID:      {458AB8A2-A1EA-4D7B-8EBE-DEE5D3D9442C}
// *********************************************************************//
interface IWin32Window  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Handle(long* pRetVal/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: _ContainerControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A5AF2165-C1BE-39AF-AB35-CD950D01A701}
// *********************************************************************//
interface _ContainerControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _BindingNavigator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E3FF0D90-9E82-3736-A253-3B2F41EF981A}
// *********************************************************************//
interface _BindingNavigator  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A81676FD-EAA3-39C3-9354-A58951270EB6}
// *********************************************************************//
interface _ToolStrip  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Button
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9486855D-B3A4-32E8-AF74-EC881982E3FF}
// *********************************************************************//
interface _Button  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ButtonBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14C1282-8647-317E-A549-D2CBCC264C3A}
// *********************************************************************//
interface _ButtonBase  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MouseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {276A1A21-AAEF-3378-8902-01F695868FF9}
// *********************************************************************//
interface _MouseEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ButtonBaseAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4343B837-6EC8-3E43-8A59-046C35024677}
// *********************************************************************//
interface _ButtonBaseAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ControlAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7496E5C0-90D3-372E-885F-BDD1A0316856}
// *********************************************************************//
interface _ControlAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _KeyEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4AAA99AA-77B1-3CF7-85D8-D9CF69271AC6}
// *********************************************************************//
interface _KeyEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1C7817C6-6A49-301E-B20A-05FF053C3D56}
// *********************************************************************//
interface _CheckBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CheckBoxAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5D9FCE71-04C3-395E-B972-F1205E8DE615}
// *********************************************************************//
interface _CheckBoxAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CheckedListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1833C4C9-4E61-3D96-AEB5-65B43DE96A01}
// *********************************************************************//
interface _CheckedListBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E36590E6-CFD5-340E-9650-73500A802C43}
// *********************************************************************//
interface _ListBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _KeyPressEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B8755BC8-51FE-3D19-A3EC-5A5A5CF120E0}
// *********************************************************************//
interface _KeyPressEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ItemCheckEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29BDF32D-E055-38E7-8DCB-920A3038FEF7}
// *********************************************************************//
interface _ItemCheckEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDataObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3CEE8CC1-1ADB-327F-9B97-7A9C8089BFB3}
// *********************************************************************//
interface IDataObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                            VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetData_2(BSTR format/*[in]*/, VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetData_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                              VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                            VARIANT data/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetData_2(BSTR format/*[in]*/, VARIANT data/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetData_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                              VARIANT data/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetData_4(VARIANT data/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataPresent(BSTR format/*[in]*/, 
                                                   VARIANT_BOOL autoConvert/*[in]*/, 
                                                   VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataPresent_2(BSTR format/*[in]*/, 
                                                     VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                                     VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFormats(VARIANT_BOOL autoConvert/*[in]*/, 
                                               LPSAFEARRAY* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFormats_2(LPSAFEARRAY* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/)
  {
    VARIANT pRetVal;
    OLECHECK(this->GetData(format, autoConvert, (VARIANT*)&pRetVal));
    return pRetVal;
  }

  VARIANT __fastcall GetData_2(BSTR format/*[in]*/)
  {
    VARIANT pRetVal;
    OLECHECK(this->GetData_2(format, (VARIANT*)&pRetVal));
    return pRetVal;
  }

  VARIANT __fastcall GetData_3(Mscorlib_tlb::_Type* format/*[in]*/)
  {
    VARIANT pRetVal;
    OLECHECK(this->GetData_3(format, (VARIANT*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall GetDataPresent(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->GetDataPresent(format, autoConvert, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall GetDataPresent_2(BSTR format/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->GetDataPresent_2(format, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->GetDataPresent_3(format, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  LPSAFEARRAY __fastcall GetFormats(VARIANT_BOOL autoConvert/*[in]*/)
  {
    LPSAFEARRAY pRetVal;
    OLECHECK(this->GetFormats(autoConvert, (LPSAFEARRAY*)&pRetVal));
    return pRetVal;
  }

  LPSAFEARRAY __fastcall GetFormats_2(void)
  {
    LPSAFEARRAY pRetVal;
    OLECHECK(this->GetFormats_2((LPSAFEARRAY*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A87AED55-DDA4-3668-BEFA-1A776496DD3E}
// *********************************************************************//
interface _ListView  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComboBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EFEC16E-EEC9-39A3-9D8A-5E72B5C14F78}
// *********************************************************************//
interface _ComboBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D58DFF0C-34C3-3D1E-8251-5F83EE7367C9}
// *********************************************************************//
interface _ListControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ChildAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518F00C6-2AAB-3B25-A76A-F62883781E18}
// *********************************************************************//
interface _ChildAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ScrollableControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {812A8B20-CB02-3483-8A29-424C6CDAC4B7}
// *********************************************************************//
interface _ScrollableControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ContextMenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B4939AF-61C1-378F-BDF0-68B9B3EE48E3}
// *********************************************************************//
interface _ContextMenuStrip  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripDropDownMenu
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E07FA2C-B44B-3818-BA44-D88F2A69E8B6}
// *********************************************************************//
interface _ToolStripDropDownMenu  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AEDF37AB-9041-3D55-9ACA-BDEDE24566D2}
// *********************************************************************//
interface _DragEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _GiveFeedbackEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {77AD1D22-59C4-3634-9D55-50291CDA49F6}
// *********************************************************************//
interface _GiveFeedbackEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _HelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2B402-744D-34F5-AD8B-BD7C018B31F5}
// *********************************************************************//
interface _HelpEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _QueryContinueDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FD0D341-0808-3A17-A978-ADB5ED517F59}
// *********************************************************************//
interface _QueryContinueDragEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518A56E2-FBCE-3386-BB15-4A0F67872BDC}
// *********************************************************************//
interface _DataGrid  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59C5A9AD-941B-3279-BED8-EDCC2951CADC}
// *********************************************************************//
interface _ScrollBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _NavigateEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42959ECE-0606-3758-9679-A48E88F9BAF8}
// *********************************************************************//
interface _NavigateEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ScrollEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCD8C82C-DFBF-3E14-BE9B-38555F6221F2}
// *********************************************************************//
interface _ScrollEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataGridTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2780E0D4-2B06-3E1F-ADDF-D8DBBB3FB960}
// *********************************************************************//
interface _DataGridTextBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAEF4300-9FB3-306F-8F67-180DEB8DDFB7}
// *********************************************************************//
interface _TextBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataGridView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5968374C-8F43-353B-8F0A-780A0A7DDB79}
// *********************************************************************//
interface _DataGridView  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Panel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {549A3DD8-D85F-3D08-87E2-49B08490008B}
// *********************************************************************//
interface _Panel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataGridViewComboBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C6615083-0A23-3997-A54B-F618EB824AF0}
// *********************************************************************//
interface _DataGridViewComboBoxEditingControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataGridViewTextBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7750701-44A2-353A-923A-7BA68A8E22AF}
// *********************************************************************//
interface _DataGridViewTextBoxEditingControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DateTimePicker
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2BAD7D35-895F-3D4A-B883-0B3CD324B8BD}
// *********************************************************************//
interface _DateTimePicker  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DateTimePickerAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5BEF6F14-89F8-3AD5-BE92-0649CFA5ABB1}
// *********************************************************************//
interface _DateTimePickerAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DomainUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {44792A74-5DD8-3410-A897-F568E4E58161}
// *********************************************************************//
interface _DomainUpDown  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _UpDownBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C26446AC-E09B-3545-B01A-5575923636C3}
// *********************************************************************//
interface _UpDownBase  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DomainItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0D46DA02-69FB-3A29-9AC6-395925C38479}
// *********************************************************************//
interface _DomainItemAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DomainUpDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {131B8005-94C2-37D5-B738-CD2337635E73}
// *********************************************************************//
interface _DomainUpDownAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FlowLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B55C4C83-1F69-3D93-9C4E-2AA5619E0C68}
// *********************************************************************//
interface _FlowLayoutPanel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB5A3078-05D9-3F32-9045-89F756938A3D}
// *********************************************************************//
interface _MenuStrip  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _GroupBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11B0B536-2F72-3A3F-B2A3-0420A9F5041F}
// *********************************************************************//
interface _GroupBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _HScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7BC4A820-B20F-3ECE-BDD6-EE7E14EB7E0D}
// *********************************************************************//
interface _HScrollBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ItemDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2A2C6-276C-3F23-AF2A-800CCD05CFF2}
// *********************************************************************//
interface _ItemDragEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Label
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00AE8203-987D-3B7E-9448-5B3393282D7F}
// *********************************************************************//
interface _Label  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93194740-9A53-3D3E-902C-240FBE0C90E4}
// *********************************************************************//
interface _LinkClickedEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LinkLabel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4EE61C0D-D2D5-3A50-972B-C0A957D3A541}
// *********************************************************************//
interface _LinkLabel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LinkLabelLinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CB38AE7B-5208-351D-8B84-3ECA81DE0F34}
// *********************************************************************//
interface _LinkLabelLinkClickedEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListViewItemMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2F121D8-4775-3FB2-93A3-C5862AE8C359}
// *********************************************************************//
interface _ListViewItemMouseHoverEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MaskedTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22B0C1A9-E74E-381A-BABB-66BEF71FF08E}
// *********************************************************************//
interface _MaskedTextBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TextBoxBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {ABC30865-8929-3F02-9D70-6C3D68C83837}
// *********************************************************************//
interface _TextBoxBase  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MdiClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6AB0BB67-4A4B-32F9-A18A-6481916C946F}
// *********************************************************************//
interface _MdiClient  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MonthCalendar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3FA9EA8-275E-35E9-89DA-18B1FCA593EE}
// *********************************************************************//
interface _MonthCalendar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _NumericUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2AD9F14A-0097-3C69-9F8E-5DDB52F3878B}
// *********************************************************************//
interface _NumericUpDown  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PictureBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB1C5180-87D0-330C-B698-EE2132DF362E}
// *********************************************************************//
interface _PictureBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PrintPreviewControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FA3B8143-ECB8-3A38-9DE5-DB0EEA708B5F}
// *********************************************************************//
interface _PrintPreviewControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PrintPreviewDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57C090D5-80BC-33B8-B782-706A8D833767}
// *********************************************************************//
interface _PrintPreviewDialog  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ProgressBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E935BCB-21E1-377C-A59F-89F7BA5A4E0F}
// *********************************************************************//
interface _ProgressBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PropertyGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C831618-60D7-32B2-9790-1EBDC5ADEFE5}
// *********************************************************************//
interface _PropertyGrid  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PropertyTabChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DB6FE495-8F5B-3C66-9A17-4C40D5593906}
// *********************************************************************//
interface _PropertyTabChangedEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PropertyValueChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6D43DF59-7EA8-300F-ACB2-760A070CFCF2}
// *********************************************************************//
interface _PropertyValueChangedEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _QueryAccessibilityHelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2FE9F084-1511-3052-BE7C-9010B522C10E}
// *********************************************************************//
interface _QueryAccessibilityHelpEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _RadioButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E431682-BBDE-31B1-AE7F-9D8DD582BD0D}
// *********************************************************************//
interface _RadioButton  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _RadioButtonAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EDC3C736-47FD-3F25-90E4-123234D64FD4}
// *********************************************************************//
interface _RadioButtonAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _RichTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B264763-A1C7-3441-9D61-7EDAEC2D0C44}
// *********************************************************************//
interface _RichTextBox  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SplitContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C1DA069E-4C0B-3664-BBA1-F81864825085}
// *********************************************************************//
interface _SplitContainer  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SplitterPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A4C8B1A-4AF9-344A-BC88-DFE863328C86}
// *********************************************************************//
interface _SplitterPanel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SplitterEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E61AD1D-76AE-3501-9B36-481BFEBD3E3E}
// *********************************************************************//
interface _SplitterEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Splitter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C318A56D-0B03-3A5A-93F6-7DF0B3268237}
// *********************************************************************//
interface _Splitter  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _StatusBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93409DA8-FE37-3D4E-9A08-B35B34122C64}
// *********************************************************************//
interface _StatusBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _StatusStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {71CA209D-40D3-3409-B341-DA9B922CCA45}
// *********************************************************************//
interface _StatusStrip  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TabControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {470DE738-5261-302A-B205-4744652D2FD3}
// *********************************************************************//
interface _TabControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TabPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59183431-BD56-33D2-A2ED-FA414ADF8DCB}
// *********************************************************************//
interface _TabPage  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TableLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05CBE5B2-0292-37DE-BE51-5B7599CA5A11}
// *********************************************************************//
interface _TableLayoutPanel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ThreadExceptionDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B00AA2F6-4D83-3937-B4AC-4C2C2C3F6C70}
// *********************************************************************//
interface _ThreadExceptionDialog  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F6AB38B6-1C02-3B01-A7F8-510ED1C0B253}
// *********************************************************************//
interface _ToolBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F7A7383-2ABE-39D6-85F6-7117ED41979C}
// *********************************************************************//
interface _ToolStripAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2A42F137-D50D-3D62-AF58-4DF7A4F57C9B}
// *********************************************************************//
interface _ToolStripContainer  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FB97C26A-FB56-3F71-BBC4-B1377E7B142D}
// *********************************************************************//
interface _ToolStripPanel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripContentPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6EE3853E-DDEF-3F29-8F1B-1ED7180D9229}
// *********************************************************************//
interface _ToolStripContentPanel  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripDropDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C2322B43-25B3-3B30-B3DB-67E4DA2E6533}
// *********************************************************************//
interface _ToolStripDropDown  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripDropDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF0D9304-0E85-3FFC-8283-6F291F32EE61}
// *********************************************************************//
interface _ToolStripDropDownAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD9748A-D04F-3DFB-96A8-5624290F4554}
// *********************************************************************//
interface _ToolStripItemAccessibleObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToolStripOverflow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75781CE7-317D-3C54-95D4-3E4DC04B4D3F}
// *********************************************************************//
interface _ToolStripOverflow  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TrackBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A8CC9AD-4E8D-3AAF-941A-1511C9C1372A}
// *********************************************************************//
interface _TrackBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TreeView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA97ED62-9EBD-34E8-94AD-F71AEF67DEFF}
// *********************************************************************//
interface _TreeView  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TreeNodeMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F51EDF6C-9E49-334A-8AAE-B0C7C631ABE4}
// *********************************************************************//
interface _TreeNodeMouseHoverEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _UserControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEEDF4B-B688-3C0D-8B16-D53290790DFB}
// *********************************************************************//
interface _UserControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {469D64EC-EB30-3462-A93B-E01BAA5CAF83}
// *********************************************************************//
interface _VScrollBar  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB134D18-9643-3862-AA3B-17EBDB1A0DEF}
// *********************************************************************//
interface _WebBrowser  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WebBrowserBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {764905A9-B10E-3C61-96DD-FA6F4BF8648D}
// *********************************************************************//
interface _WebBrowserBase  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentEditorForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7006EFC-6E21-3B74-A9D7-9A2F12E46C8E}
// *********************************************************************//
interface _ComponentEditorForm  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentEditorPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C858A49A-FDCB-395D-BBB8-9B2B66DC0FB5}
// *********************************************************************//
interface _ComponentEditorPage  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOM_AccessibleObject
// Interface: _AccessibleObject
// *********************************************************************//
template <class T /* _AccessibleObject */ >
class TCOM_AccessibleObjectT : public TComInterface<_AccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_AccessibleObjectT() {}
  TCOM_AccessibleObjectT(_AccessibleObject *intf, bool addRef = false) : TComInterface<_AccessibleObject>(intf, addRef) {}
  TCOM_AccessibleObjectT(const TCOM_AccessibleObjectT& src) : TComInterface<_AccessibleObject>(src) {}
  TCOM_AccessibleObjectT& operator=(const TCOM_AccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_AccessibleObjectT<_AccessibleObject> TCOM_AccessibleObject;

// *********************************************************************//
// DispIntf:  _AccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {399C0499-29D3-3D95-AF77-111DCDB92177}
// *********************************************************************//
template<class T>
class _AccessibleObjectDispT : public TAutoDriver<_AccessibleObject>
{
public:
  _AccessibleObjectDispT(){}

  _AccessibleObjectDispT(_AccessibleObject *pintf)
  {
    TAutoDriver<_AccessibleObject>::Bind(pintf, false);
  }

  _AccessibleObjectDispT(_AccessibleObjectPtr pintf)
  {
    TAutoDriver<_AccessibleObject>::Bind(pintf, true);
  }

  _AccessibleObjectDispT& operator=(_AccessibleObject *pintf)
  {
    TAutoDriver<_AccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _AccessibleObjectDispT& operator=(_AccessibleObjectPtr pintf)
  {
    TAutoDriver<_AccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessibleObject);
  }


};
typedef _AccessibleObjectDispT<_AccessibleObject> _AccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_Form
// Interface: _Form
// *********************************************************************//
template <class T /* _Form */ >
class TCOM_FormT : public TComInterface<_Form>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FormT() {}
  TCOM_FormT(_Form *intf, bool addRef = false) : TComInterface<_Form>(intf, addRef) {}
  TCOM_FormT(const TCOM_FormT& src) : TComInterface<_Form>(src) {}
  TCOM_FormT& operator=(const TCOM_FormT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FormT<_Form> TCOM_Form;

// *********************************************************************//
// DispIntf:  _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD0C79DB-37BE-3B61-9C53-2E4857237227}
// *********************************************************************//
template<class T>
class _FormDispT : public TAutoDriver<_Form>
{
public:
  _FormDispT(){}

  _FormDispT(_Form *pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, false);
  }

  _FormDispT(_FormPtr pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, true);
  }

  _FormDispT& operator=(_Form *pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, false);
    return *this;
  }

  _FormDispT& operator=(_FormPtr pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Form));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Form);
  }


};
typedef _FormDispT<_Form> _FormDisp;

// *********************************************************************//
// SmartIntf: TCOM_AxHost
// Interface: _AxHost
// *********************************************************************//
template <class T /* _AxHost */ >
class TCOM_AxHostT : public TComInterface<_AxHost>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_AxHostT() {}
  TCOM_AxHostT(_AxHost *intf, bool addRef = false) : TComInterface<_AxHost>(intf, addRef) {}
  TCOM_AxHostT(const TCOM_AxHostT& src) : TComInterface<_AxHost>(src) {}
  TCOM_AxHostT& operator=(const TCOM_AxHostT& src) { Bind(src, true); return *this;}


};
typedef TCOM_AxHostT<_AxHost> TCOM_AxHost;

// *********************************************************************//
// DispIntf:  _AxHost
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {548054D5-75C5-3A72-A87B-D6F305254065}
// *********************************************************************//
template<class T>
class _AxHostDispT : public TAutoDriver<_AxHost>
{
public:
  _AxHostDispT(){}

  _AxHostDispT(_AxHost *pintf)
  {
    TAutoDriver<_AxHost>::Bind(pintf, false);
  }

  _AxHostDispT(_AxHostPtr pintf)
  {
    TAutoDriver<_AxHost>::Bind(pintf, true);
  }

  _AxHostDispT& operator=(_AxHost *pintf)
  {
    TAutoDriver<_AxHost>::Bind(pintf, false);
    return *this;
  }

  _AxHostDispT& operator=(_AxHostPtr pintf)
  {
    TAutoDriver<_AxHost>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AxHost));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AxHost);
  }


};
typedef _AxHostDispT<_AxHost> _AxHostDisp;

// *********************************************************************//
// SmartIntf: TCOM_Control
// Interface: _Control
// *********************************************************************//
template <class T /* _Control */ >
class TCOM_ControlT : public TComInterface<_Control>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ControlT() {}
  TCOM_ControlT(_Control *intf, bool addRef = false) : TComInterface<_Control>(intf, addRef) {}
  TCOM_ControlT(const TCOM_ControlT& src) : TComInterface<_Control>(src) {}
  TCOM_ControlT& operator=(const TCOM_ControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ControlT<_Control> TCOM_Control;

// *********************************************************************//
// DispIntf:  _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83ACBFAE-1A16-33EB-ABA0-BA8DF0B206D7}
// *********************************************************************//
template<class T>
class _ControlDispT : public TAutoDriver<_Control>
{
public:
  _ControlDispT(){}

  _ControlDispT(_Control *pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, false);
  }

  _ControlDispT(_ControlPtr pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, true);
  }

  _ControlDispT& operator=(_Control *pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, false);
    return *this;
  }

  _ControlDispT& operator=(_ControlPtr pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Control));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Control);
  }


};
typedef _ControlDispT<_Control> _ControlDisp;

typedef TComInterface<IWin32Window>  TCOMIWin32Window;

// *********************************************************************//
// SmartIntf: TCOM_ContainerControl
// Interface: _ContainerControl
// *********************************************************************//
template <class T /* _ContainerControl */ >
class TCOM_ContainerControlT : public TComInterface<_ContainerControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ContainerControlT() {}
  TCOM_ContainerControlT(_ContainerControl *intf, bool addRef = false) : TComInterface<_ContainerControl>(intf, addRef) {}
  TCOM_ContainerControlT(const TCOM_ContainerControlT& src) : TComInterface<_ContainerControl>(src) {}
  TCOM_ContainerControlT& operator=(const TCOM_ContainerControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ContainerControlT<_ContainerControl> TCOM_ContainerControl;

// *********************************************************************//
// DispIntf:  _ContainerControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A5AF2165-C1BE-39AF-AB35-CD950D01A701}
// *********************************************************************//
template<class T>
class _ContainerControlDispT : public TAutoDriver<_ContainerControl>
{
public:
  _ContainerControlDispT(){}

  _ContainerControlDispT(_ContainerControl *pintf)
  {
    TAutoDriver<_ContainerControl>::Bind(pintf, false);
  }

  _ContainerControlDispT(_ContainerControlPtr pintf)
  {
    TAutoDriver<_ContainerControl>::Bind(pintf, true);
  }

  _ContainerControlDispT& operator=(_ContainerControl *pintf)
  {
    TAutoDriver<_ContainerControl>::Bind(pintf, false);
    return *this;
  }

  _ContainerControlDispT& operator=(_ContainerControlPtr pintf)
  {
    TAutoDriver<_ContainerControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ContainerControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ContainerControl);
  }


};
typedef _ContainerControlDispT<_ContainerControl> _ContainerControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_BindingNavigator
// Interface: _BindingNavigator
// *********************************************************************//
template <class T /* _BindingNavigator */ >
class TCOM_BindingNavigatorT : public TComInterface<_BindingNavigator>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_BindingNavigatorT() {}
  TCOM_BindingNavigatorT(_BindingNavigator *intf, bool addRef = false) : TComInterface<_BindingNavigator>(intf, addRef) {}
  TCOM_BindingNavigatorT(const TCOM_BindingNavigatorT& src) : TComInterface<_BindingNavigator>(src) {}
  TCOM_BindingNavigatorT& operator=(const TCOM_BindingNavigatorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_BindingNavigatorT<_BindingNavigator> TCOM_BindingNavigator;

// *********************************************************************//
// DispIntf:  _BindingNavigator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E3FF0D90-9E82-3736-A253-3B2F41EF981A}
// *********************************************************************//
template<class T>
class _BindingNavigatorDispT : public TAutoDriver<_BindingNavigator>
{
public:
  _BindingNavigatorDispT(){}

  _BindingNavigatorDispT(_BindingNavigator *pintf)
  {
    TAutoDriver<_BindingNavigator>::Bind(pintf, false);
  }

  _BindingNavigatorDispT(_BindingNavigatorPtr pintf)
  {
    TAutoDriver<_BindingNavigator>::Bind(pintf, true);
  }

  _BindingNavigatorDispT& operator=(_BindingNavigator *pintf)
  {
    TAutoDriver<_BindingNavigator>::Bind(pintf, false);
    return *this;
  }

  _BindingNavigatorDispT& operator=(_BindingNavigatorPtr pintf)
  {
    TAutoDriver<_BindingNavigator>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BindingNavigator));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BindingNavigator);
  }


};
typedef _BindingNavigatorDispT<_BindingNavigator> _BindingNavigatorDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStrip
// Interface: _ToolStrip
// *********************************************************************//
template <class T /* _ToolStrip */ >
class TCOM_ToolStripT : public TComInterface<_ToolStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripT() {}
  TCOM_ToolStripT(_ToolStrip *intf, bool addRef = false) : TComInterface<_ToolStrip>(intf, addRef) {}
  TCOM_ToolStripT(const TCOM_ToolStripT& src) : TComInterface<_ToolStrip>(src) {}
  TCOM_ToolStripT& operator=(const TCOM_ToolStripT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripT<_ToolStrip> TCOM_ToolStrip;

// *********************************************************************//
// DispIntf:  _ToolStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A81676FD-EAA3-39C3-9354-A58951270EB6}
// *********************************************************************//
template<class T>
class _ToolStripDispT : public TAutoDriver<_ToolStrip>
{
public:
  _ToolStripDispT(){}

  _ToolStripDispT(_ToolStrip *pintf)
  {
    TAutoDriver<_ToolStrip>::Bind(pintf, false);
  }

  _ToolStripDispT(_ToolStripPtr pintf)
  {
    TAutoDriver<_ToolStrip>::Bind(pintf, true);
  }

  _ToolStripDispT& operator=(_ToolStrip *pintf)
  {
    TAutoDriver<_ToolStrip>::Bind(pintf, false);
    return *this;
  }

  _ToolStripDispT& operator=(_ToolStripPtr pintf)
  {
    TAutoDriver<_ToolStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStrip);
  }


};
typedef _ToolStripDispT<_ToolStrip> _ToolStripDisp;

// *********************************************************************//
// SmartIntf: TCOM_Button
// Interface: _Button
// *********************************************************************//
template <class T /* _Button */ >
class TCOM_ButtonT : public TComInterface<_Button>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ButtonT() {}
  TCOM_ButtonT(_Button *intf, bool addRef = false) : TComInterface<_Button>(intf, addRef) {}
  TCOM_ButtonT(const TCOM_ButtonT& src) : TComInterface<_Button>(src) {}
  TCOM_ButtonT& operator=(const TCOM_ButtonT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ButtonT<_Button> TCOM_Button;

// *********************************************************************//
// DispIntf:  _Button
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9486855D-B3A4-32E8-AF74-EC881982E3FF}
// *********************************************************************//
template<class T>
class _ButtonDispT : public TAutoDriver<_Button>
{
public:
  _ButtonDispT(){}

  _ButtonDispT(_Button *pintf)
  {
    TAutoDriver<_Button>::Bind(pintf, false);
  }

  _ButtonDispT(_ButtonPtr pintf)
  {
    TAutoDriver<_Button>::Bind(pintf, true);
  }

  _ButtonDispT& operator=(_Button *pintf)
  {
    TAutoDriver<_Button>::Bind(pintf, false);
    return *this;
  }

  _ButtonDispT& operator=(_ButtonPtr pintf)
  {
    TAutoDriver<_Button>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Button));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Button);
  }


};
typedef _ButtonDispT<_Button> _ButtonDisp;

// *********************************************************************//
// SmartIntf: TCOM_ButtonBase
// Interface: _ButtonBase
// *********************************************************************//
template <class T /* _ButtonBase */ >
class TCOM_ButtonBaseT : public TComInterface<_ButtonBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ButtonBaseT() {}
  TCOM_ButtonBaseT(_ButtonBase *intf, bool addRef = false) : TComInterface<_ButtonBase>(intf, addRef) {}
  TCOM_ButtonBaseT(const TCOM_ButtonBaseT& src) : TComInterface<_ButtonBase>(src) {}
  TCOM_ButtonBaseT& operator=(const TCOM_ButtonBaseT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ButtonBaseT<_ButtonBase> TCOM_ButtonBase;

// *********************************************************************//
// DispIntf:  _ButtonBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14C1282-8647-317E-A549-D2CBCC264C3A}
// *********************************************************************//
template<class T>
class _ButtonBaseDispT : public TAutoDriver<_ButtonBase>
{
public:
  _ButtonBaseDispT(){}

  _ButtonBaseDispT(_ButtonBase *pintf)
  {
    TAutoDriver<_ButtonBase>::Bind(pintf, false);
  }

  _ButtonBaseDispT(_ButtonBasePtr pintf)
  {
    TAutoDriver<_ButtonBase>::Bind(pintf, true);
  }

  _ButtonBaseDispT& operator=(_ButtonBase *pintf)
  {
    TAutoDriver<_ButtonBase>::Bind(pintf, false);
    return *this;
  }

  _ButtonBaseDispT& operator=(_ButtonBasePtr pintf)
  {
    TAutoDriver<_ButtonBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ButtonBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ButtonBase);
  }


};
typedef _ButtonBaseDispT<_ButtonBase> _ButtonBaseDisp;

// *********************************************************************//
// SmartIntf: TCOM_MouseEventArgs
// Interface: _MouseEventArgs
// *********************************************************************//
template <class T /* _MouseEventArgs */ >
class TCOM_MouseEventArgsT : public TComInterface<_MouseEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MouseEventArgsT() {}
  TCOM_MouseEventArgsT(_MouseEventArgs *intf, bool addRef = false) : TComInterface<_MouseEventArgs>(intf, addRef) {}
  TCOM_MouseEventArgsT(const TCOM_MouseEventArgsT& src) : TComInterface<_MouseEventArgs>(src) {}
  TCOM_MouseEventArgsT& operator=(const TCOM_MouseEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MouseEventArgsT<_MouseEventArgs> TCOM_MouseEventArgs;

// *********************************************************************//
// DispIntf:  _MouseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {276A1A21-AAEF-3378-8902-01F695868FF9}
// *********************************************************************//
template<class T>
class _MouseEventArgsDispT : public TAutoDriver<_MouseEventArgs>
{
public:
  _MouseEventArgsDispT(){}

  _MouseEventArgsDispT(_MouseEventArgs *pintf)
  {
    TAutoDriver<_MouseEventArgs>::Bind(pintf, false);
  }

  _MouseEventArgsDispT(_MouseEventArgsPtr pintf)
  {
    TAutoDriver<_MouseEventArgs>::Bind(pintf, true);
  }

  _MouseEventArgsDispT& operator=(_MouseEventArgs *pintf)
  {
    TAutoDriver<_MouseEventArgs>::Bind(pintf, false);
    return *this;
  }

  _MouseEventArgsDispT& operator=(_MouseEventArgsPtr pintf)
  {
    TAutoDriver<_MouseEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MouseEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MouseEventArgs);
  }


};
typedef _MouseEventArgsDispT<_MouseEventArgs> _MouseEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ButtonBaseAccessibleObject
// Interface: _ButtonBaseAccessibleObject
// *********************************************************************//
template <class T /* _ButtonBaseAccessibleObject */ >
class TCOM_ButtonBaseAccessibleObjectT : public TComInterface<_ButtonBaseAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ButtonBaseAccessibleObjectT() {}
  TCOM_ButtonBaseAccessibleObjectT(_ButtonBaseAccessibleObject *intf, bool addRef = false) : TComInterface<_ButtonBaseAccessibleObject>(intf, addRef) {}
  TCOM_ButtonBaseAccessibleObjectT(const TCOM_ButtonBaseAccessibleObjectT& src) : TComInterface<_ButtonBaseAccessibleObject>(src) {}
  TCOM_ButtonBaseAccessibleObjectT& operator=(const TCOM_ButtonBaseAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ButtonBaseAccessibleObjectT<_ButtonBaseAccessibleObject> TCOM_ButtonBaseAccessibleObject;

// *********************************************************************//
// DispIntf:  _ButtonBaseAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4343B837-6EC8-3E43-8A59-046C35024677}
// *********************************************************************//
template<class T>
class _ButtonBaseAccessibleObjectDispT : public TAutoDriver<_ButtonBaseAccessibleObject>
{
public:
  _ButtonBaseAccessibleObjectDispT(){}

  _ButtonBaseAccessibleObjectDispT(_ButtonBaseAccessibleObject *pintf)
  {
    TAutoDriver<_ButtonBaseAccessibleObject>::Bind(pintf, false);
  }

  _ButtonBaseAccessibleObjectDispT(_ButtonBaseAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ButtonBaseAccessibleObject>::Bind(pintf, true);
  }

  _ButtonBaseAccessibleObjectDispT& operator=(_ButtonBaseAccessibleObject *pintf)
  {
    TAutoDriver<_ButtonBaseAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ButtonBaseAccessibleObjectDispT& operator=(_ButtonBaseAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ButtonBaseAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ButtonBaseAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ButtonBaseAccessibleObject);
  }


};
typedef _ButtonBaseAccessibleObjectDispT<_ButtonBaseAccessibleObject> _ButtonBaseAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ControlAccessibleObject
// Interface: _ControlAccessibleObject
// *********************************************************************//
template <class T /* _ControlAccessibleObject */ >
class TCOM_ControlAccessibleObjectT : public TComInterface<_ControlAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ControlAccessibleObjectT() {}
  TCOM_ControlAccessibleObjectT(_ControlAccessibleObject *intf, bool addRef = false) : TComInterface<_ControlAccessibleObject>(intf, addRef) {}
  TCOM_ControlAccessibleObjectT(const TCOM_ControlAccessibleObjectT& src) : TComInterface<_ControlAccessibleObject>(src) {}
  TCOM_ControlAccessibleObjectT& operator=(const TCOM_ControlAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ControlAccessibleObjectT<_ControlAccessibleObject> TCOM_ControlAccessibleObject;

// *********************************************************************//
// DispIntf:  _ControlAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7496E5C0-90D3-372E-885F-BDD1A0316856}
// *********************************************************************//
template<class T>
class _ControlAccessibleObjectDispT : public TAutoDriver<_ControlAccessibleObject>
{
public:
  _ControlAccessibleObjectDispT(){}

  _ControlAccessibleObjectDispT(_ControlAccessibleObject *pintf)
  {
    TAutoDriver<_ControlAccessibleObject>::Bind(pintf, false);
  }

  _ControlAccessibleObjectDispT(_ControlAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ControlAccessibleObject>::Bind(pintf, true);
  }

  _ControlAccessibleObjectDispT& operator=(_ControlAccessibleObject *pintf)
  {
    TAutoDriver<_ControlAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ControlAccessibleObjectDispT& operator=(_ControlAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ControlAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ControlAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ControlAccessibleObject);
  }


};
typedef _ControlAccessibleObjectDispT<_ControlAccessibleObject> _ControlAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_KeyEventArgs
// Interface: _KeyEventArgs
// *********************************************************************//
template <class T /* _KeyEventArgs */ >
class TCOM_KeyEventArgsT : public TComInterface<_KeyEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_KeyEventArgsT() {}
  TCOM_KeyEventArgsT(_KeyEventArgs *intf, bool addRef = false) : TComInterface<_KeyEventArgs>(intf, addRef) {}
  TCOM_KeyEventArgsT(const TCOM_KeyEventArgsT& src) : TComInterface<_KeyEventArgs>(src) {}
  TCOM_KeyEventArgsT& operator=(const TCOM_KeyEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_KeyEventArgsT<_KeyEventArgs> TCOM_KeyEventArgs;

// *********************************************************************//
// DispIntf:  _KeyEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4AAA99AA-77B1-3CF7-85D8-D9CF69271AC6}
// *********************************************************************//
template<class T>
class _KeyEventArgsDispT : public TAutoDriver<_KeyEventArgs>
{
public:
  _KeyEventArgsDispT(){}

  _KeyEventArgsDispT(_KeyEventArgs *pintf)
  {
    TAutoDriver<_KeyEventArgs>::Bind(pintf, false);
  }

  _KeyEventArgsDispT(_KeyEventArgsPtr pintf)
  {
    TAutoDriver<_KeyEventArgs>::Bind(pintf, true);
  }

  _KeyEventArgsDispT& operator=(_KeyEventArgs *pintf)
  {
    TAutoDriver<_KeyEventArgs>::Bind(pintf, false);
    return *this;
  }

  _KeyEventArgsDispT& operator=(_KeyEventArgsPtr pintf)
  {
    TAutoDriver<_KeyEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_KeyEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_KeyEventArgs);
  }


};
typedef _KeyEventArgsDispT<_KeyEventArgs> _KeyEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_CheckBox
// Interface: _CheckBox
// *********************************************************************//
template <class T /* _CheckBox */ >
class TCOM_CheckBoxT : public TComInterface<_CheckBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CheckBoxT() {}
  TCOM_CheckBoxT(_CheckBox *intf, bool addRef = false) : TComInterface<_CheckBox>(intf, addRef) {}
  TCOM_CheckBoxT(const TCOM_CheckBoxT& src) : TComInterface<_CheckBox>(src) {}
  TCOM_CheckBoxT& operator=(const TCOM_CheckBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CheckBoxT<_CheckBox> TCOM_CheckBox;

// *********************************************************************//
// DispIntf:  _CheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1C7817C6-6A49-301E-B20A-05FF053C3D56}
// *********************************************************************//
template<class T>
class _CheckBoxDispT : public TAutoDriver<_CheckBox>
{
public:
  _CheckBoxDispT(){}

  _CheckBoxDispT(_CheckBox *pintf)
  {
    TAutoDriver<_CheckBox>::Bind(pintf, false);
  }

  _CheckBoxDispT(_CheckBoxPtr pintf)
  {
    TAutoDriver<_CheckBox>::Bind(pintf, true);
  }

  _CheckBoxDispT& operator=(_CheckBox *pintf)
  {
    TAutoDriver<_CheckBox>::Bind(pintf, false);
    return *this;
  }

  _CheckBoxDispT& operator=(_CheckBoxPtr pintf)
  {
    TAutoDriver<_CheckBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CheckBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CheckBox);
  }


};
typedef _CheckBoxDispT<_CheckBox> _CheckBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_CheckBoxAccessibleObject
// Interface: _CheckBoxAccessibleObject
// *********************************************************************//
template <class T /* _CheckBoxAccessibleObject */ >
class TCOM_CheckBoxAccessibleObjectT : public TComInterface<_CheckBoxAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CheckBoxAccessibleObjectT() {}
  TCOM_CheckBoxAccessibleObjectT(_CheckBoxAccessibleObject *intf, bool addRef = false) : TComInterface<_CheckBoxAccessibleObject>(intf, addRef) {}
  TCOM_CheckBoxAccessibleObjectT(const TCOM_CheckBoxAccessibleObjectT& src) : TComInterface<_CheckBoxAccessibleObject>(src) {}
  TCOM_CheckBoxAccessibleObjectT& operator=(const TCOM_CheckBoxAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CheckBoxAccessibleObjectT<_CheckBoxAccessibleObject> TCOM_CheckBoxAccessibleObject;

// *********************************************************************//
// DispIntf:  _CheckBoxAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5D9FCE71-04C3-395E-B972-F1205E8DE615}
// *********************************************************************//
template<class T>
class _CheckBoxAccessibleObjectDispT : public TAutoDriver<_CheckBoxAccessibleObject>
{
public:
  _CheckBoxAccessibleObjectDispT(){}

  _CheckBoxAccessibleObjectDispT(_CheckBoxAccessibleObject *pintf)
  {
    TAutoDriver<_CheckBoxAccessibleObject>::Bind(pintf, false);
  }

  _CheckBoxAccessibleObjectDispT(_CheckBoxAccessibleObjectPtr pintf)
  {
    TAutoDriver<_CheckBoxAccessibleObject>::Bind(pintf, true);
  }

  _CheckBoxAccessibleObjectDispT& operator=(_CheckBoxAccessibleObject *pintf)
  {
    TAutoDriver<_CheckBoxAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _CheckBoxAccessibleObjectDispT& operator=(_CheckBoxAccessibleObjectPtr pintf)
  {
    TAutoDriver<_CheckBoxAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CheckBoxAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CheckBoxAccessibleObject);
  }


};
typedef _CheckBoxAccessibleObjectDispT<_CheckBoxAccessibleObject> _CheckBoxAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_CheckedListBox
// Interface: _CheckedListBox
// *********************************************************************//
template <class T /* _CheckedListBox */ >
class TCOM_CheckedListBoxT : public TComInterface<_CheckedListBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CheckedListBoxT() {}
  TCOM_CheckedListBoxT(_CheckedListBox *intf, bool addRef = false) : TComInterface<_CheckedListBox>(intf, addRef) {}
  TCOM_CheckedListBoxT(const TCOM_CheckedListBoxT& src) : TComInterface<_CheckedListBox>(src) {}
  TCOM_CheckedListBoxT& operator=(const TCOM_CheckedListBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CheckedListBoxT<_CheckedListBox> TCOM_CheckedListBox;

// *********************************************************************//
// DispIntf:  _CheckedListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1833C4C9-4E61-3D96-AEB5-65B43DE96A01}
// *********************************************************************//
template<class T>
class _CheckedListBoxDispT : public TAutoDriver<_CheckedListBox>
{
public:
  _CheckedListBoxDispT(){}

  _CheckedListBoxDispT(_CheckedListBox *pintf)
  {
    TAutoDriver<_CheckedListBox>::Bind(pintf, false);
  }

  _CheckedListBoxDispT(_CheckedListBoxPtr pintf)
  {
    TAutoDriver<_CheckedListBox>::Bind(pintf, true);
  }

  _CheckedListBoxDispT& operator=(_CheckedListBox *pintf)
  {
    TAutoDriver<_CheckedListBox>::Bind(pintf, false);
    return *this;
  }

  _CheckedListBoxDispT& operator=(_CheckedListBoxPtr pintf)
  {
    TAutoDriver<_CheckedListBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CheckedListBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CheckedListBox);
  }


};
typedef _CheckedListBoxDispT<_CheckedListBox> _CheckedListBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListBox
// Interface: _ListBox
// *********************************************************************//
template <class T /* _ListBox */ >
class TCOM_ListBoxT : public TComInterface<_ListBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListBoxT() {}
  TCOM_ListBoxT(_ListBox *intf, bool addRef = false) : TComInterface<_ListBox>(intf, addRef) {}
  TCOM_ListBoxT(const TCOM_ListBoxT& src) : TComInterface<_ListBox>(src) {}
  TCOM_ListBoxT& operator=(const TCOM_ListBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListBoxT<_ListBox> TCOM_ListBox;

// *********************************************************************//
// DispIntf:  _ListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E36590E6-CFD5-340E-9650-73500A802C43}
// *********************************************************************//
template<class T>
class _ListBoxDispT : public TAutoDriver<_ListBox>
{
public:
  _ListBoxDispT(){}

  _ListBoxDispT(_ListBox *pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, false);
  }

  _ListBoxDispT(_ListBoxPtr pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, true);
  }

  _ListBoxDispT& operator=(_ListBox *pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, false);
    return *this;
  }

  _ListBoxDispT& operator=(_ListBoxPtr pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListBox);
  }


};
typedef _ListBoxDispT<_ListBox> _ListBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_KeyPressEventArgs
// Interface: _KeyPressEventArgs
// *********************************************************************//
template <class T /* _KeyPressEventArgs */ >
class TCOM_KeyPressEventArgsT : public TComInterface<_KeyPressEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_KeyPressEventArgsT() {}
  TCOM_KeyPressEventArgsT(_KeyPressEventArgs *intf, bool addRef = false) : TComInterface<_KeyPressEventArgs>(intf, addRef) {}
  TCOM_KeyPressEventArgsT(const TCOM_KeyPressEventArgsT& src) : TComInterface<_KeyPressEventArgs>(src) {}
  TCOM_KeyPressEventArgsT& operator=(const TCOM_KeyPressEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_KeyPressEventArgsT<_KeyPressEventArgs> TCOM_KeyPressEventArgs;

// *********************************************************************//
// DispIntf:  _KeyPressEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B8755BC8-51FE-3D19-A3EC-5A5A5CF120E0}
// *********************************************************************//
template<class T>
class _KeyPressEventArgsDispT : public TAutoDriver<_KeyPressEventArgs>
{
public:
  _KeyPressEventArgsDispT(){}

  _KeyPressEventArgsDispT(_KeyPressEventArgs *pintf)
  {
    TAutoDriver<_KeyPressEventArgs>::Bind(pintf, false);
  }

  _KeyPressEventArgsDispT(_KeyPressEventArgsPtr pintf)
  {
    TAutoDriver<_KeyPressEventArgs>::Bind(pintf, true);
  }

  _KeyPressEventArgsDispT& operator=(_KeyPressEventArgs *pintf)
  {
    TAutoDriver<_KeyPressEventArgs>::Bind(pintf, false);
    return *this;
  }

  _KeyPressEventArgsDispT& operator=(_KeyPressEventArgsPtr pintf)
  {
    TAutoDriver<_KeyPressEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_KeyPressEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_KeyPressEventArgs);
  }


};
typedef _KeyPressEventArgsDispT<_KeyPressEventArgs> _KeyPressEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ItemCheckEventArgs
// Interface: _ItemCheckEventArgs
// *********************************************************************//
template <class T /* _ItemCheckEventArgs */ >
class TCOM_ItemCheckEventArgsT : public TComInterface<_ItemCheckEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ItemCheckEventArgsT() {}
  TCOM_ItemCheckEventArgsT(_ItemCheckEventArgs *intf, bool addRef = false) : TComInterface<_ItemCheckEventArgs>(intf, addRef) {}
  TCOM_ItemCheckEventArgsT(const TCOM_ItemCheckEventArgsT& src) : TComInterface<_ItemCheckEventArgs>(src) {}
  TCOM_ItemCheckEventArgsT& operator=(const TCOM_ItemCheckEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ItemCheckEventArgsT<_ItemCheckEventArgs> TCOM_ItemCheckEventArgs;

// *********************************************************************//
// DispIntf:  _ItemCheckEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29BDF32D-E055-38E7-8DCB-920A3038FEF7}
// *********************************************************************//
template<class T>
class _ItemCheckEventArgsDispT : public TAutoDriver<_ItemCheckEventArgs>
{
public:
  _ItemCheckEventArgsDispT(){}

  _ItemCheckEventArgsDispT(_ItemCheckEventArgs *pintf)
  {
    TAutoDriver<_ItemCheckEventArgs>::Bind(pintf, false);
  }

  _ItemCheckEventArgsDispT(_ItemCheckEventArgsPtr pintf)
  {
    TAutoDriver<_ItemCheckEventArgs>::Bind(pintf, true);
  }

  _ItemCheckEventArgsDispT& operator=(_ItemCheckEventArgs *pintf)
  {
    TAutoDriver<_ItemCheckEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ItemCheckEventArgsDispT& operator=(_ItemCheckEventArgsPtr pintf)
  {
    TAutoDriver<_ItemCheckEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ItemCheckEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ItemCheckEventArgs);
  }


};
typedef _ItemCheckEventArgsDispT<_ItemCheckEventArgs> _ItemCheckEventArgsDisp;

typedef TComInterface<IDataObject>  TCOMIDataObject;

// *********************************************************************//
// DispIntf:  IDataObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3CEE8CC1-1ADB-327F-9B97-7A9C8089BFB3}
// *********************************************************************//
template<class T>
class IDataObjectDispT : public TAutoDriver<IDataObject>
{
public:
  IDataObjectDispT(){}

  IDataObjectDispT(IDataObject *pintf)
  {
    TAutoDriver<IDataObject>::Bind(pintf, false);
  }

  IDataObjectDispT(IDataObjectPtr pintf)
  {
    TAutoDriver<IDataObject>::Bind(pintf, true);
  }

  IDataObjectDispT& operator=(IDataObject *pintf)
  {
    TAutoDriver<IDataObject>::Bind(pintf, false);
    return *this;
  }

  IDataObjectDispT& operator=(IDataObjectPtr pintf)
  {
    TAutoDriver<IDataObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                     VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/);
  HRESULT         __fastcall GetData_2(BSTR format/*[in]*/, VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall GetData_2(BSTR format/*[in]*/);
  HRESULT         __fastcall GetData_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                       VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall GetData_3(Mscorlib_tlb::_Type* format/*[in]*/);
  HRESULT         __fastcall SetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                     VARIANT data/*[in]*/);
  HRESULT         __fastcall SetData_2(BSTR format/*[in]*/, VARIANT data/*[in]*/);
  HRESULT         __fastcall SetData_3(Mscorlib_tlb::_Type* format/*[in]*/, VARIANT data/*[in]*/);
  HRESULT         __fastcall SetData_4(VARIANT data/*[in]*/);
  HRESULT         __fastcall GetDataPresent(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                            VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetDataPresent(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/);
  HRESULT         __fastcall GetDataPresent_2(BSTR format/*[in]*/, 
                                              VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetDataPresent_2(BSTR format/*[in]*/);
  HRESULT         __fastcall GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                              VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/);
  HRESULT         __fastcall GetFormats(VARIANT_BOOL autoConvert/*[in]*/, 
                                        LPSAFEARRAY* pRetVal/*[out,retval]*/);
  LPSAFEARRAY     __fastcall GetFormats(VARIANT_BOOL autoConvert/*[in]*/);
  HRESULT         __fastcall GetFormats_2(LPSAFEARRAY* pRetVal/*[out,retval]*/);
  LPSAFEARRAY     __fastcall GetFormats_2(void);

};
typedef IDataObjectDispT<IDataObject> IDataObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListView
// Interface: _ListView
// *********************************************************************//
template <class T /* _ListView */ >
class TCOM_ListViewT : public TComInterface<_ListView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListViewT() {}
  TCOM_ListViewT(_ListView *intf, bool addRef = false) : TComInterface<_ListView>(intf, addRef) {}
  TCOM_ListViewT(const TCOM_ListViewT& src) : TComInterface<_ListView>(src) {}
  TCOM_ListViewT& operator=(const TCOM_ListViewT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListViewT<_ListView> TCOM_ListView;

// *********************************************************************//
// DispIntf:  _ListView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A87AED55-DDA4-3668-BEFA-1A776496DD3E}
// *********************************************************************//
template<class T>
class _ListViewDispT : public TAutoDriver<_ListView>
{
public:
  _ListViewDispT(){}

  _ListViewDispT(_ListView *pintf)
  {
    TAutoDriver<_ListView>::Bind(pintf, false);
  }

  _ListViewDispT(_ListViewPtr pintf)
  {
    TAutoDriver<_ListView>::Bind(pintf, true);
  }

  _ListViewDispT& operator=(_ListView *pintf)
  {
    TAutoDriver<_ListView>::Bind(pintf, false);
    return *this;
  }

  _ListViewDispT& operator=(_ListViewPtr pintf)
  {
    TAutoDriver<_ListView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListView);
  }


};
typedef _ListViewDispT<_ListView> _ListViewDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComboBox
// Interface: _ComboBox
// *********************************************************************//
template <class T /* _ComboBox */ >
class TCOM_ComboBoxT : public TComInterface<_ComboBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComboBoxT() {}
  TCOM_ComboBoxT(_ComboBox *intf, bool addRef = false) : TComInterface<_ComboBox>(intf, addRef) {}
  TCOM_ComboBoxT(const TCOM_ComboBoxT& src) : TComInterface<_ComboBox>(src) {}
  TCOM_ComboBoxT& operator=(const TCOM_ComboBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComboBoxT<_ComboBox> TCOM_ComboBox;

// *********************************************************************//
// DispIntf:  _ComboBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EFEC16E-EEC9-39A3-9D8A-5E72B5C14F78}
// *********************************************************************//
template<class T>
class _ComboBoxDispT : public TAutoDriver<_ComboBox>
{
public:
  _ComboBoxDispT(){}

  _ComboBoxDispT(_ComboBox *pintf)
  {
    TAutoDriver<_ComboBox>::Bind(pintf, false);
  }

  _ComboBoxDispT(_ComboBoxPtr pintf)
  {
    TAutoDriver<_ComboBox>::Bind(pintf, true);
  }

  _ComboBoxDispT& operator=(_ComboBox *pintf)
  {
    TAutoDriver<_ComboBox>::Bind(pintf, false);
    return *this;
  }

  _ComboBoxDispT& operator=(_ComboBoxPtr pintf)
  {
    TAutoDriver<_ComboBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComboBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComboBox);
  }


};
typedef _ComboBoxDispT<_ComboBox> _ComboBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListControl
// Interface: _ListControl
// *********************************************************************//
template <class T /* _ListControl */ >
class TCOM_ListControlT : public TComInterface<_ListControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListControlT() {}
  TCOM_ListControlT(_ListControl *intf, bool addRef = false) : TComInterface<_ListControl>(intf, addRef) {}
  TCOM_ListControlT(const TCOM_ListControlT& src) : TComInterface<_ListControl>(src) {}
  TCOM_ListControlT& operator=(const TCOM_ListControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListControlT<_ListControl> TCOM_ListControl;

// *********************************************************************//
// DispIntf:  _ListControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D58DFF0C-34C3-3D1E-8251-5F83EE7367C9}
// *********************************************************************//
template<class T>
class _ListControlDispT : public TAutoDriver<_ListControl>
{
public:
  _ListControlDispT(){}

  _ListControlDispT(_ListControl *pintf)
  {
    TAutoDriver<_ListControl>::Bind(pintf, false);
  }

  _ListControlDispT(_ListControlPtr pintf)
  {
    TAutoDriver<_ListControl>::Bind(pintf, true);
  }

  _ListControlDispT& operator=(_ListControl *pintf)
  {
    TAutoDriver<_ListControl>::Bind(pintf, false);
    return *this;
  }

  _ListControlDispT& operator=(_ListControlPtr pintf)
  {
    TAutoDriver<_ListControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListControl);
  }


};
typedef _ListControlDispT<_ListControl> _ListControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_ChildAccessibleObject
// Interface: _ChildAccessibleObject
// *********************************************************************//
template <class T /* _ChildAccessibleObject */ >
class TCOM_ChildAccessibleObjectT : public TComInterface<_ChildAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ChildAccessibleObjectT() {}
  TCOM_ChildAccessibleObjectT(_ChildAccessibleObject *intf, bool addRef = false) : TComInterface<_ChildAccessibleObject>(intf, addRef) {}
  TCOM_ChildAccessibleObjectT(const TCOM_ChildAccessibleObjectT& src) : TComInterface<_ChildAccessibleObject>(src) {}
  TCOM_ChildAccessibleObjectT& operator=(const TCOM_ChildAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ChildAccessibleObjectT<_ChildAccessibleObject> TCOM_ChildAccessibleObject;

// *********************************************************************//
// DispIntf:  _ChildAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518F00C6-2AAB-3B25-A76A-F62883781E18}
// *********************************************************************//
template<class T>
class _ChildAccessibleObjectDispT : public TAutoDriver<_ChildAccessibleObject>
{
public:
  _ChildAccessibleObjectDispT(){}

  _ChildAccessibleObjectDispT(_ChildAccessibleObject *pintf)
  {
    TAutoDriver<_ChildAccessibleObject>::Bind(pintf, false);
  }

  _ChildAccessibleObjectDispT(_ChildAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ChildAccessibleObject>::Bind(pintf, true);
  }

  _ChildAccessibleObjectDispT& operator=(_ChildAccessibleObject *pintf)
  {
    TAutoDriver<_ChildAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ChildAccessibleObjectDispT& operator=(_ChildAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ChildAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChildAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChildAccessibleObject);
  }


};
typedef _ChildAccessibleObjectDispT<_ChildAccessibleObject> _ChildAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ScrollableControl
// Interface: _ScrollableControl
// *********************************************************************//
template <class T /* _ScrollableControl */ >
class TCOM_ScrollableControlT : public TComInterface<_ScrollableControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ScrollableControlT() {}
  TCOM_ScrollableControlT(_ScrollableControl *intf, bool addRef = false) : TComInterface<_ScrollableControl>(intf, addRef) {}
  TCOM_ScrollableControlT(const TCOM_ScrollableControlT& src) : TComInterface<_ScrollableControl>(src) {}
  TCOM_ScrollableControlT& operator=(const TCOM_ScrollableControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ScrollableControlT<_ScrollableControl> TCOM_ScrollableControl;

// *********************************************************************//
// DispIntf:  _ScrollableControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {812A8B20-CB02-3483-8A29-424C6CDAC4B7}
// *********************************************************************//
template<class T>
class _ScrollableControlDispT : public TAutoDriver<_ScrollableControl>
{
public:
  _ScrollableControlDispT(){}

  _ScrollableControlDispT(_ScrollableControl *pintf)
  {
    TAutoDriver<_ScrollableControl>::Bind(pintf, false);
  }

  _ScrollableControlDispT(_ScrollableControlPtr pintf)
  {
    TAutoDriver<_ScrollableControl>::Bind(pintf, true);
  }

  _ScrollableControlDispT& operator=(_ScrollableControl *pintf)
  {
    TAutoDriver<_ScrollableControl>::Bind(pintf, false);
    return *this;
  }

  _ScrollableControlDispT& operator=(_ScrollableControlPtr pintf)
  {
    TAutoDriver<_ScrollableControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScrollableControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScrollableControl);
  }


};
typedef _ScrollableControlDispT<_ScrollableControl> _ScrollableControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_ContextMenuStrip
// Interface: _ContextMenuStrip
// *********************************************************************//
template <class T /* _ContextMenuStrip */ >
class TCOM_ContextMenuStripT : public TComInterface<_ContextMenuStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ContextMenuStripT() {}
  TCOM_ContextMenuStripT(_ContextMenuStrip *intf, bool addRef = false) : TComInterface<_ContextMenuStrip>(intf, addRef) {}
  TCOM_ContextMenuStripT(const TCOM_ContextMenuStripT& src) : TComInterface<_ContextMenuStrip>(src) {}
  TCOM_ContextMenuStripT& operator=(const TCOM_ContextMenuStripT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ContextMenuStripT<_ContextMenuStrip> TCOM_ContextMenuStrip;

// *********************************************************************//
// DispIntf:  _ContextMenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B4939AF-61C1-378F-BDF0-68B9B3EE48E3}
// *********************************************************************//
template<class T>
class _ContextMenuStripDispT : public TAutoDriver<_ContextMenuStrip>
{
public:
  _ContextMenuStripDispT(){}

  _ContextMenuStripDispT(_ContextMenuStrip *pintf)
  {
    TAutoDriver<_ContextMenuStrip>::Bind(pintf, false);
  }

  _ContextMenuStripDispT(_ContextMenuStripPtr pintf)
  {
    TAutoDriver<_ContextMenuStrip>::Bind(pintf, true);
  }

  _ContextMenuStripDispT& operator=(_ContextMenuStrip *pintf)
  {
    TAutoDriver<_ContextMenuStrip>::Bind(pintf, false);
    return *this;
  }

  _ContextMenuStripDispT& operator=(_ContextMenuStripPtr pintf)
  {
    TAutoDriver<_ContextMenuStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ContextMenuStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ContextMenuStrip);
  }


};
typedef _ContextMenuStripDispT<_ContextMenuStrip> _ContextMenuStripDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDownMenu
// Interface: _ToolStripDropDownMenu
// *********************************************************************//
template <class T /* _ToolStripDropDownMenu */ >
class TCOM_ToolStripDropDownMenuT : public TComInterface<_ToolStripDropDownMenu>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripDropDownMenuT() {}
  TCOM_ToolStripDropDownMenuT(_ToolStripDropDownMenu *intf, bool addRef = false) : TComInterface<_ToolStripDropDownMenu>(intf, addRef) {}
  TCOM_ToolStripDropDownMenuT(const TCOM_ToolStripDropDownMenuT& src) : TComInterface<_ToolStripDropDownMenu>(src) {}
  TCOM_ToolStripDropDownMenuT& operator=(const TCOM_ToolStripDropDownMenuT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripDropDownMenuT<_ToolStripDropDownMenu> TCOM_ToolStripDropDownMenu;

// *********************************************************************//
// DispIntf:  _ToolStripDropDownMenu
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E07FA2C-B44B-3818-BA44-D88F2A69E8B6}
// *********************************************************************//
template<class T>
class _ToolStripDropDownMenuDispT : public TAutoDriver<_ToolStripDropDownMenu>
{
public:
  _ToolStripDropDownMenuDispT(){}

  _ToolStripDropDownMenuDispT(_ToolStripDropDownMenu *pintf)
  {
    TAutoDriver<_ToolStripDropDownMenu>::Bind(pintf, false);
  }

  _ToolStripDropDownMenuDispT(_ToolStripDropDownMenuPtr pintf)
  {
    TAutoDriver<_ToolStripDropDownMenu>::Bind(pintf, true);
  }

  _ToolStripDropDownMenuDispT& operator=(_ToolStripDropDownMenu *pintf)
  {
    TAutoDriver<_ToolStripDropDownMenu>::Bind(pintf, false);
    return *this;
  }

  _ToolStripDropDownMenuDispT& operator=(_ToolStripDropDownMenuPtr pintf)
  {
    TAutoDriver<_ToolStripDropDownMenu>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripDropDownMenu));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripDropDownMenu);
  }


};
typedef _ToolStripDropDownMenuDispT<_ToolStripDropDownMenu> _ToolStripDropDownMenuDisp;

// *********************************************************************//
// SmartIntf: TCOM_DragEventArgs
// Interface: _DragEventArgs
// *********************************************************************//
template <class T /* _DragEventArgs */ >
class TCOM_DragEventArgsT : public TComInterface<_DragEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DragEventArgsT() {}
  TCOM_DragEventArgsT(_DragEventArgs *intf, bool addRef = false) : TComInterface<_DragEventArgs>(intf, addRef) {}
  TCOM_DragEventArgsT(const TCOM_DragEventArgsT& src) : TComInterface<_DragEventArgs>(src) {}
  TCOM_DragEventArgsT& operator=(const TCOM_DragEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DragEventArgsT<_DragEventArgs> TCOM_DragEventArgs;

// *********************************************************************//
// DispIntf:  _DragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AEDF37AB-9041-3D55-9ACA-BDEDE24566D2}
// *********************************************************************//
template<class T>
class _DragEventArgsDispT : public TAutoDriver<_DragEventArgs>
{
public:
  _DragEventArgsDispT(){}

  _DragEventArgsDispT(_DragEventArgs *pintf)
  {
    TAutoDriver<_DragEventArgs>::Bind(pintf, false);
  }

  _DragEventArgsDispT(_DragEventArgsPtr pintf)
  {
    TAutoDriver<_DragEventArgs>::Bind(pintf, true);
  }

  _DragEventArgsDispT& operator=(_DragEventArgs *pintf)
  {
    TAutoDriver<_DragEventArgs>::Bind(pintf, false);
    return *this;
  }

  _DragEventArgsDispT& operator=(_DragEventArgsPtr pintf)
  {
    TAutoDriver<_DragEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DragEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DragEventArgs);
  }


};
typedef _DragEventArgsDispT<_DragEventArgs> _DragEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_GiveFeedbackEventArgs
// Interface: _GiveFeedbackEventArgs
// *********************************************************************//
template <class T /* _GiveFeedbackEventArgs */ >
class TCOM_GiveFeedbackEventArgsT : public TComInterface<_GiveFeedbackEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_GiveFeedbackEventArgsT() {}
  TCOM_GiveFeedbackEventArgsT(_GiveFeedbackEventArgs *intf, bool addRef = false) : TComInterface<_GiveFeedbackEventArgs>(intf, addRef) {}
  TCOM_GiveFeedbackEventArgsT(const TCOM_GiveFeedbackEventArgsT& src) : TComInterface<_GiveFeedbackEventArgs>(src) {}
  TCOM_GiveFeedbackEventArgsT& operator=(const TCOM_GiveFeedbackEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_GiveFeedbackEventArgsT<_GiveFeedbackEventArgs> TCOM_GiveFeedbackEventArgs;

// *********************************************************************//
// DispIntf:  _GiveFeedbackEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {77AD1D22-59C4-3634-9D55-50291CDA49F6}
// *********************************************************************//
template<class T>
class _GiveFeedbackEventArgsDispT : public TAutoDriver<_GiveFeedbackEventArgs>
{
public:
  _GiveFeedbackEventArgsDispT(){}

  _GiveFeedbackEventArgsDispT(_GiveFeedbackEventArgs *pintf)
  {
    TAutoDriver<_GiveFeedbackEventArgs>::Bind(pintf, false);
  }

  _GiveFeedbackEventArgsDispT(_GiveFeedbackEventArgsPtr pintf)
  {
    TAutoDriver<_GiveFeedbackEventArgs>::Bind(pintf, true);
  }

  _GiveFeedbackEventArgsDispT& operator=(_GiveFeedbackEventArgs *pintf)
  {
    TAutoDriver<_GiveFeedbackEventArgs>::Bind(pintf, false);
    return *this;
  }

  _GiveFeedbackEventArgsDispT& operator=(_GiveFeedbackEventArgsPtr pintf)
  {
    TAutoDriver<_GiveFeedbackEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_GiveFeedbackEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_GiveFeedbackEventArgs);
  }


};
typedef _GiveFeedbackEventArgsDispT<_GiveFeedbackEventArgs> _GiveFeedbackEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_HelpEventArgs
// Interface: _HelpEventArgs
// *********************************************************************//
template <class T /* _HelpEventArgs */ >
class TCOM_HelpEventArgsT : public TComInterface<_HelpEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_HelpEventArgsT() {}
  TCOM_HelpEventArgsT(_HelpEventArgs *intf, bool addRef = false) : TComInterface<_HelpEventArgs>(intf, addRef) {}
  TCOM_HelpEventArgsT(const TCOM_HelpEventArgsT& src) : TComInterface<_HelpEventArgs>(src) {}
  TCOM_HelpEventArgsT& operator=(const TCOM_HelpEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_HelpEventArgsT<_HelpEventArgs> TCOM_HelpEventArgs;

// *********************************************************************//
// DispIntf:  _HelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2B402-744D-34F5-AD8B-BD7C018B31F5}
// *********************************************************************//
template<class T>
class _HelpEventArgsDispT : public TAutoDriver<_HelpEventArgs>
{
public:
  _HelpEventArgsDispT(){}

  _HelpEventArgsDispT(_HelpEventArgs *pintf)
  {
    TAutoDriver<_HelpEventArgs>::Bind(pintf, false);
  }

  _HelpEventArgsDispT(_HelpEventArgsPtr pintf)
  {
    TAutoDriver<_HelpEventArgs>::Bind(pintf, true);
  }

  _HelpEventArgsDispT& operator=(_HelpEventArgs *pintf)
  {
    TAutoDriver<_HelpEventArgs>::Bind(pintf, false);
    return *this;
  }

  _HelpEventArgsDispT& operator=(_HelpEventArgsPtr pintf)
  {
    TAutoDriver<_HelpEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HelpEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HelpEventArgs);
  }


};
typedef _HelpEventArgsDispT<_HelpEventArgs> _HelpEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_QueryContinueDragEventArgs
// Interface: _QueryContinueDragEventArgs
// *********************************************************************//
template <class T /* _QueryContinueDragEventArgs */ >
class TCOM_QueryContinueDragEventArgsT : public TComInterface<_QueryContinueDragEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_QueryContinueDragEventArgsT() {}
  TCOM_QueryContinueDragEventArgsT(_QueryContinueDragEventArgs *intf, bool addRef = false) : TComInterface<_QueryContinueDragEventArgs>(intf, addRef) {}
  TCOM_QueryContinueDragEventArgsT(const TCOM_QueryContinueDragEventArgsT& src) : TComInterface<_QueryContinueDragEventArgs>(src) {}
  TCOM_QueryContinueDragEventArgsT& operator=(const TCOM_QueryContinueDragEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_QueryContinueDragEventArgsT<_QueryContinueDragEventArgs> TCOM_QueryContinueDragEventArgs;

// *********************************************************************//
// DispIntf:  _QueryContinueDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FD0D341-0808-3A17-A978-ADB5ED517F59}
// *********************************************************************//
template<class T>
class _QueryContinueDragEventArgsDispT : public TAutoDriver<_QueryContinueDragEventArgs>
{
public:
  _QueryContinueDragEventArgsDispT(){}

  _QueryContinueDragEventArgsDispT(_QueryContinueDragEventArgs *pintf)
  {
    TAutoDriver<_QueryContinueDragEventArgs>::Bind(pintf, false);
  }

  _QueryContinueDragEventArgsDispT(_QueryContinueDragEventArgsPtr pintf)
  {
    TAutoDriver<_QueryContinueDragEventArgs>::Bind(pintf, true);
  }

  _QueryContinueDragEventArgsDispT& operator=(_QueryContinueDragEventArgs *pintf)
  {
    TAutoDriver<_QueryContinueDragEventArgs>::Bind(pintf, false);
    return *this;
  }

  _QueryContinueDragEventArgsDispT& operator=(_QueryContinueDragEventArgsPtr pintf)
  {
    TAutoDriver<_QueryContinueDragEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryContinueDragEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryContinueDragEventArgs);
  }


};
typedef _QueryContinueDragEventArgsDispT<_QueryContinueDragEventArgs> _QueryContinueDragEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_DataGrid
// Interface: _DataGrid
// *********************************************************************//
template <class T /* _DataGrid */ >
class TCOM_DataGridT : public TComInterface<_DataGrid>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DataGridT() {}
  TCOM_DataGridT(_DataGrid *intf, bool addRef = false) : TComInterface<_DataGrid>(intf, addRef) {}
  TCOM_DataGridT(const TCOM_DataGridT& src) : TComInterface<_DataGrid>(src) {}
  TCOM_DataGridT& operator=(const TCOM_DataGridT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DataGridT<_DataGrid> TCOM_DataGrid;

// *********************************************************************//
// DispIntf:  _DataGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518A56E2-FBCE-3386-BB15-4A0F67872BDC}
// *********************************************************************//
template<class T>
class _DataGridDispT : public TAutoDriver<_DataGrid>
{
public:
  _DataGridDispT(){}

  _DataGridDispT(_DataGrid *pintf)
  {
    TAutoDriver<_DataGrid>::Bind(pintf, false);
  }

  _DataGridDispT(_DataGridPtr pintf)
  {
    TAutoDriver<_DataGrid>::Bind(pintf, true);
  }

  _DataGridDispT& operator=(_DataGrid *pintf)
  {
    TAutoDriver<_DataGrid>::Bind(pintf, false);
    return *this;
  }

  _DataGridDispT& operator=(_DataGridPtr pintf)
  {
    TAutoDriver<_DataGrid>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataGrid));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataGrid);
  }


};
typedef _DataGridDispT<_DataGrid> _DataGridDisp;

// *********************************************************************//
// SmartIntf: TCOM_ScrollBar
// Interface: _ScrollBar
// *********************************************************************//
template <class T /* _ScrollBar */ >
class TCOM_ScrollBarT : public TComInterface<_ScrollBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ScrollBarT() {}
  TCOM_ScrollBarT(_ScrollBar *intf, bool addRef = false) : TComInterface<_ScrollBar>(intf, addRef) {}
  TCOM_ScrollBarT(const TCOM_ScrollBarT& src) : TComInterface<_ScrollBar>(src) {}
  TCOM_ScrollBarT& operator=(const TCOM_ScrollBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ScrollBarT<_ScrollBar> TCOM_ScrollBar;

// *********************************************************************//
// DispIntf:  _ScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59C5A9AD-941B-3279-BED8-EDCC2951CADC}
// *********************************************************************//
template<class T>
class _ScrollBarDispT : public TAutoDriver<_ScrollBar>
{
public:
  _ScrollBarDispT(){}

  _ScrollBarDispT(_ScrollBar *pintf)
  {
    TAutoDriver<_ScrollBar>::Bind(pintf, false);
  }

  _ScrollBarDispT(_ScrollBarPtr pintf)
  {
    TAutoDriver<_ScrollBar>::Bind(pintf, true);
  }

  _ScrollBarDispT& operator=(_ScrollBar *pintf)
  {
    TAutoDriver<_ScrollBar>::Bind(pintf, false);
    return *this;
  }

  _ScrollBarDispT& operator=(_ScrollBarPtr pintf)
  {
    TAutoDriver<_ScrollBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScrollBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScrollBar);
  }


};
typedef _ScrollBarDispT<_ScrollBar> _ScrollBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_NavigateEventArgs
// Interface: _NavigateEventArgs
// *********************************************************************//
template <class T /* _NavigateEventArgs */ >
class TCOM_NavigateEventArgsT : public TComInterface<_NavigateEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_NavigateEventArgsT() {}
  TCOM_NavigateEventArgsT(_NavigateEventArgs *intf, bool addRef = false) : TComInterface<_NavigateEventArgs>(intf, addRef) {}
  TCOM_NavigateEventArgsT(const TCOM_NavigateEventArgsT& src) : TComInterface<_NavigateEventArgs>(src) {}
  TCOM_NavigateEventArgsT& operator=(const TCOM_NavigateEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_NavigateEventArgsT<_NavigateEventArgs> TCOM_NavigateEventArgs;

// *********************************************************************//
// DispIntf:  _NavigateEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42959ECE-0606-3758-9679-A48E88F9BAF8}
// *********************************************************************//
template<class T>
class _NavigateEventArgsDispT : public TAutoDriver<_NavigateEventArgs>
{
public:
  _NavigateEventArgsDispT(){}

  _NavigateEventArgsDispT(_NavigateEventArgs *pintf)
  {
    TAutoDriver<_NavigateEventArgs>::Bind(pintf, false);
  }

  _NavigateEventArgsDispT(_NavigateEventArgsPtr pintf)
  {
    TAutoDriver<_NavigateEventArgs>::Bind(pintf, true);
  }

  _NavigateEventArgsDispT& operator=(_NavigateEventArgs *pintf)
  {
    TAutoDriver<_NavigateEventArgs>::Bind(pintf, false);
    return *this;
  }

  _NavigateEventArgsDispT& operator=(_NavigateEventArgsPtr pintf)
  {
    TAutoDriver<_NavigateEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NavigateEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NavigateEventArgs);
  }


};
typedef _NavigateEventArgsDispT<_NavigateEventArgs> _NavigateEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ScrollEventArgs
// Interface: _ScrollEventArgs
// *********************************************************************//
template <class T /* _ScrollEventArgs */ >
class TCOM_ScrollEventArgsT : public TComInterface<_ScrollEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ScrollEventArgsT() {}
  TCOM_ScrollEventArgsT(_ScrollEventArgs *intf, bool addRef = false) : TComInterface<_ScrollEventArgs>(intf, addRef) {}
  TCOM_ScrollEventArgsT(const TCOM_ScrollEventArgsT& src) : TComInterface<_ScrollEventArgs>(src) {}
  TCOM_ScrollEventArgsT& operator=(const TCOM_ScrollEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ScrollEventArgsT<_ScrollEventArgs> TCOM_ScrollEventArgs;

// *********************************************************************//
// DispIntf:  _ScrollEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCD8C82C-DFBF-3E14-BE9B-38555F6221F2}
// *********************************************************************//
template<class T>
class _ScrollEventArgsDispT : public TAutoDriver<_ScrollEventArgs>
{
public:
  _ScrollEventArgsDispT(){}

  _ScrollEventArgsDispT(_ScrollEventArgs *pintf)
  {
    TAutoDriver<_ScrollEventArgs>::Bind(pintf, false);
  }

  _ScrollEventArgsDispT(_ScrollEventArgsPtr pintf)
  {
    TAutoDriver<_ScrollEventArgs>::Bind(pintf, true);
  }

  _ScrollEventArgsDispT& operator=(_ScrollEventArgs *pintf)
  {
    TAutoDriver<_ScrollEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ScrollEventArgsDispT& operator=(_ScrollEventArgsPtr pintf)
  {
    TAutoDriver<_ScrollEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScrollEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScrollEventArgs);
  }


};
typedef _ScrollEventArgsDispT<_ScrollEventArgs> _ScrollEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_DataGridTextBox
// Interface: _DataGridTextBox
// *********************************************************************//
template <class T /* _DataGridTextBox */ >
class TCOM_DataGridTextBoxT : public TComInterface<_DataGridTextBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DataGridTextBoxT() {}
  TCOM_DataGridTextBoxT(_DataGridTextBox *intf, bool addRef = false) : TComInterface<_DataGridTextBox>(intf, addRef) {}
  TCOM_DataGridTextBoxT(const TCOM_DataGridTextBoxT& src) : TComInterface<_DataGridTextBox>(src) {}
  TCOM_DataGridTextBoxT& operator=(const TCOM_DataGridTextBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DataGridTextBoxT<_DataGridTextBox> TCOM_DataGridTextBox;

// *********************************************************************//
// DispIntf:  _DataGridTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2780E0D4-2B06-3E1F-ADDF-D8DBBB3FB960}
// *********************************************************************//
template<class T>
class _DataGridTextBoxDispT : public TAutoDriver<_DataGridTextBox>
{
public:
  _DataGridTextBoxDispT(){}

  _DataGridTextBoxDispT(_DataGridTextBox *pintf)
  {
    TAutoDriver<_DataGridTextBox>::Bind(pintf, false);
  }

  _DataGridTextBoxDispT(_DataGridTextBoxPtr pintf)
  {
    TAutoDriver<_DataGridTextBox>::Bind(pintf, true);
  }

  _DataGridTextBoxDispT& operator=(_DataGridTextBox *pintf)
  {
    TAutoDriver<_DataGridTextBox>::Bind(pintf, false);
    return *this;
  }

  _DataGridTextBoxDispT& operator=(_DataGridTextBoxPtr pintf)
  {
    TAutoDriver<_DataGridTextBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataGridTextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataGridTextBox);
  }


};
typedef _DataGridTextBoxDispT<_DataGridTextBox> _DataGridTextBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_TextBox
// Interface: _TextBox
// *********************************************************************//
template <class T /* _TextBox */ >
class TCOM_TextBoxT : public TComInterface<_TextBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TextBoxT() {}
  TCOM_TextBoxT(_TextBox *intf, bool addRef = false) : TComInterface<_TextBox>(intf, addRef) {}
  TCOM_TextBoxT(const TCOM_TextBoxT& src) : TComInterface<_TextBox>(src) {}
  TCOM_TextBoxT& operator=(const TCOM_TextBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TextBoxT<_TextBox> TCOM_TextBox;

// *********************************************************************//
// DispIntf:  _TextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAEF4300-9FB3-306F-8F67-180DEB8DDFB7}
// *********************************************************************//
template<class T>
class _TextBoxDispT : public TAutoDriver<_TextBox>
{
public:
  _TextBoxDispT(){}

  _TextBoxDispT(_TextBox *pintf)
  {
    TAutoDriver<_TextBox>::Bind(pintf, false);
  }

  _TextBoxDispT(_TextBoxPtr pintf)
  {
    TAutoDriver<_TextBox>::Bind(pintf, true);
  }

  _TextBoxDispT& operator=(_TextBox *pintf)
  {
    TAutoDriver<_TextBox>::Bind(pintf, false);
    return *this;
  }

  _TextBoxDispT& operator=(_TextBoxPtr pintf)
  {
    TAutoDriver<_TextBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TextBox);
  }


};
typedef _TextBoxDispT<_TextBox> _TextBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_DataGridView
// Interface: _DataGridView
// *********************************************************************//
template <class T /* _DataGridView */ >
class TCOM_DataGridViewT : public TComInterface<_DataGridView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DataGridViewT() {}
  TCOM_DataGridViewT(_DataGridView *intf, bool addRef = false) : TComInterface<_DataGridView>(intf, addRef) {}
  TCOM_DataGridViewT(const TCOM_DataGridViewT& src) : TComInterface<_DataGridView>(src) {}
  TCOM_DataGridViewT& operator=(const TCOM_DataGridViewT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DataGridViewT<_DataGridView> TCOM_DataGridView;

// *********************************************************************//
// DispIntf:  _DataGridView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5968374C-8F43-353B-8F0A-780A0A7DDB79}
// *********************************************************************//
template<class T>
class _DataGridViewDispT : public TAutoDriver<_DataGridView>
{
public:
  _DataGridViewDispT(){}

  _DataGridViewDispT(_DataGridView *pintf)
  {
    TAutoDriver<_DataGridView>::Bind(pintf, false);
  }

  _DataGridViewDispT(_DataGridViewPtr pintf)
  {
    TAutoDriver<_DataGridView>::Bind(pintf, true);
  }

  _DataGridViewDispT& operator=(_DataGridView *pintf)
  {
    TAutoDriver<_DataGridView>::Bind(pintf, false);
    return *this;
  }

  _DataGridViewDispT& operator=(_DataGridViewPtr pintf)
  {
    TAutoDriver<_DataGridView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataGridView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataGridView);
  }


};
typedef _DataGridViewDispT<_DataGridView> _DataGridViewDisp;

// *********************************************************************//
// SmartIntf: TCOM_Panel
// Interface: _Panel
// *********************************************************************//
template <class T /* _Panel */ >
class TCOM_PanelT : public TComInterface<_Panel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PanelT() {}
  TCOM_PanelT(_Panel *intf, bool addRef = false) : TComInterface<_Panel>(intf, addRef) {}
  TCOM_PanelT(const TCOM_PanelT& src) : TComInterface<_Panel>(src) {}
  TCOM_PanelT& operator=(const TCOM_PanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PanelT<_Panel> TCOM_Panel;

// *********************************************************************//
// DispIntf:  _Panel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {549A3DD8-D85F-3D08-87E2-49B08490008B}
// *********************************************************************//
template<class T>
class _PanelDispT : public TAutoDriver<_Panel>
{
public:
  _PanelDispT(){}

  _PanelDispT(_Panel *pintf)
  {
    TAutoDriver<_Panel>::Bind(pintf, false);
  }

  _PanelDispT(_PanelPtr pintf)
  {
    TAutoDriver<_Panel>::Bind(pintf, true);
  }

  _PanelDispT& operator=(_Panel *pintf)
  {
    TAutoDriver<_Panel>::Bind(pintf, false);
    return *this;
  }

  _PanelDispT& operator=(_PanelPtr pintf)
  {
    TAutoDriver<_Panel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Panel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Panel);
  }


};
typedef _PanelDispT<_Panel> _PanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_DataGridViewComboBoxEditingControl
// Interface: _DataGridViewComboBoxEditingControl
// *********************************************************************//
template <class T /* _DataGridViewComboBoxEditingControl */ >
class TCOM_DataGridViewComboBoxEditingControlT : public TComInterface<_DataGridViewComboBoxEditingControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DataGridViewComboBoxEditingControlT() {}
  TCOM_DataGridViewComboBoxEditingControlT(_DataGridViewComboBoxEditingControl *intf, bool addRef = false) : TComInterface<_DataGridViewComboBoxEditingControl>(intf, addRef) {}
  TCOM_DataGridViewComboBoxEditingControlT(const TCOM_DataGridViewComboBoxEditingControlT& src) : TComInterface<_DataGridViewComboBoxEditingControl>(src) {}
  TCOM_DataGridViewComboBoxEditingControlT& operator=(const TCOM_DataGridViewComboBoxEditingControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DataGridViewComboBoxEditingControlT<_DataGridViewComboBoxEditingControl> TCOM_DataGridViewComboBoxEditingControl;

// *********************************************************************//
// DispIntf:  _DataGridViewComboBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C6615083-0A23-3997-A54B-F618EB824AF0}
// *********************************************************************//
template<class T>
class _DataGridViewComboBoxEditingControlDispT : public TAutoDriver<_DataGridViewComboBoxEditingControl>
{
public:
  _DataGridViewComboBoxEditingControlDispT(){}

  _DataGridViewComboBoxEditingControlDispT(_DataGridViewComboBoxEditingControl *pintf)
  {
    TAutoDriver<_DataGridViewComboBoxEditingControl>::Bind(pintf, false);
  }

  _DataGridViewComboBoxEditingControlDispT(_DataGridViewComboBoxEditingControlPtr pintf)
  {
    TAutoDriver<_DataGridViewComboBoxEditingControl>::Bind(pintf, true);
  }

  _DataGridViewComboBoxEditingControlDispT& operator=(_DataGridViewComboBoxEditingControl *pintf)
  {
    TAutoDriver<_DataGridViewComboBoxEditingControl>::Bind(pintf, false);
    return *this;
  }

  _DataGridViewComboBoxEditingControlDispT& operator=(_DataGridViewComboBoxEditingControlPtr pintf)
  {
    TAutoDriver<_DataGridViewComboBoxEditingControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataGridViewComboBoxEditingControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataGridViewComboBoxEditingControl);
  }


};
typedef _DataGridViewComboBoxEditingControlDispT<_DataGridViewComboBoxEditingControl> _DataGridViewComboBoxEditingControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_DataGridViewTextBoxEditingControl
// Interface: _DataGridViewTextBoxEditingControl
// *********************************************************************//
template <class T /* _DataGridViewTextBoxEditingControl */ >
class TCOM_DataGridViewTextBoxEditingControlT : public TComInterface<_DataGridViewTextBoxEditingControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DataGridViewTextBoxEditingControlT() {}
  TCOM_DataGridViewTextBoxEditingControlT(_DataGridViewTextBoxEditingControl *intf, bool addRef = false) : TComInterface<_DataGridViewTextBoxEditingControl>(intf, addRef) {}
  TCOM_DataGridViewTextBoxEditingControlT(const TCOM_DataGridViewTextBoxEditingControlT& src) : TComInterface<_DataGridViewTextBoxEditingControl>(src) {}
  TCOM_DataGridViewTextBoxEditingControlT& operator=(const TCOM_DataGridViewTextBoxEditingControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DataGridViewTextBoxEditingControlT<_DataGridViewTextBoxEditingControl> TCOM_DataGridViewTextBoxEditingControl;

// *********************************************************************//
// DispIntf:  _DataGridViewTextBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7750701-44A2-353A-923A-7BA68A8E22AF}
// *********************************************************************//
template<class T>
class _DataGridViewTextBoxEditingControlDispT : public TAutoDriver<_DataGridViewTextBoxEditingControl>
{
public:
  _DataGridViewTextBoxEditingControlDispT(){}

  _DataGridViewTextBoxEditingControlDispT(_DataGridViewTextBoxEditingControl *pintf)
  {
    TAutoDriver<_DataGridViewTextBoxEditingControl>::Bind(pintf, false);
  }

  _DataGridViewTextBoxEditingControlDispT(_DataGridViewTextBoxEditingControlPtr pintf)
  {
    TAutoDriver<_DataGridViewTextBoxEditingControl>::Bind(pintf, true);
  }

  _DataGridViewTextBoxEditingControlDispT& operator=(_DataGridViewTextBoxEditingControl *pintf)
  {
    TAutoDriver<_DataGridViewTextBoxEditingControl>::Bind(pintf, false);
    return *this;
  }

  _DataGridViewTextBoxEditingControlDispT& operator=(_DataGridViewTextBoxEditingControlPtr pintf)
  {
    TAutoDriver<_DataGridViewTextBoxEditingControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataGridViewTextBoxEditingControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataGridViewTextBoxEditingControl);
  }


};
typedef _DataGridViewTextBoxEditingControlDispT<_DataGridViewTextBoxEditingControl> _DataGridViewTextBoxEditingControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_DateTimePicker
// Interface: _DateTimePicker
// *********************************************************************//
template <class T /* _DateTimePicker */ >
class TCOM_DateTimePickerT : public TComInterface<_DateTimePicker>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DateTimePickerT() {}
  TCOM_DateTimePickerT(_DateTimePicker *intf, bool addRef = false) : TComInterface<_DateTimePicker>(intf, addRef) {}
  TCOM_DateTimePickerT(const TCOM_DateTimePickerT& src) : TComInterface<_DateTimePicker>(src) {}
  TCOM_DateTimePickerT& operator=(const TCOM_DateTimePickerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DateTimePickerT<_DateTimePicker> TCOM_DateTimePicker;

// *********************************************************************//
// DispIntf:  _DateTimePicker
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2BAD7D35-895F-3D4A-B883-0B3CD324B8BD}
// *********************************************************************//
template<class T>
class _DateTimePickerDispT : public TAutoDriver<_DateTimePicker>
{
public:
  _DateTimePickerDispT(){}

  _DateTimePickerDispT(_DateTimePicker *pintf)
  {
    TAutoDriver<_DateTimePicker>::Bind(pintf, false);
  }

  _DateTimePickerDispT(_DateTimePickerPtr pintf)
  {
    TAutoDriver<_DateTimePicker>::Bind(pintf, true);
  }

  _DateTimePickerDispT& operator=(_DateTimePicker *pintf)
  {
    TAutoDriver<_DateTimePicker>::Bind(pintf, false);
    return *this;
  }

  _DateTimePickerDispT& operator=(_DateTimePickerPtr pintf)
  {
    TAutoDriver<_DateTimePicker>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DateTimePicker));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DateTimePicker);
  }


};
typedef _DateTimePickerDispT<_DateTimePicker> _DateTimePickerDisp;

// *********************************************************************//
// SmartIntf: TCOM_DateTimePickerAccessibleObject
// Interface: _DateTimePickerAccessibleObject
// *********************************************************************//
template <class T /* _DateTimePickerAccessibleObject */ >
class TCOM_DateTimePickerAccessibleObjectT : public TComInterface<_DateTimePickerAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DateTimePickerAccessibleObjectT() {}
  TCOM_DateTimePickerAccessibleObjectT(_DateTimePickerAccessibleObject *intf, bool addRef = false) : TComInterface<_DateTimePickerAccessibleObject>(intf, addRef) {}
  TCOM_DateTimePickerAccessibleObjectT(const TCOM_DateTimePickerAccessibleObjectT& src) : TComInterface<_DateTimePickerAccessibleObject>(src) {}
  TCOM_DateTimePickerAccessibleObjectT& operator=(const TCOM_DateTimePickerAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DateTimePickerAccessibleObjectT<_DateTimePickerAccessibleObject> TCOM_DateTimePickerAccessibleObject;

// *********************************************************************//
// DispIntf:  _DateTimePickerAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5BEF6F14-89F8-3AD5-BE92-0649CFA5ABB1}
// *********************************************************************//
template<class T>
class _DateTimePickerAccessibleObjectDispT : public TAutoDriver<_DateTimePickerAccessibleObject>
{
public:
  _DateTimePickerAccessibleObjectDispT(){}

  _DateTimePickerAccessibleObjectDispT(_DateTimePickerAccessibleObject *pintf)
  {
    TAutoDriver<_DateTimePickerAccessibleObject>::Bind(pintf, false);
  }

  _DateTimePickerAccessibleObjectDispT(_DateTimePickerAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DateTimePickerAccessibleObject>::Bind(pintf, true);
  }

  _DateTimePickerAccessibleObjectDispT& operator=(_DateTimePickerAccessibleObject *pintf)
  {
    TAutoDriver<_DateTimePickerAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _DateTimePickerAccessibleObjectDispT& operator=(_DateTimePickerAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DateTimePickerAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DateTimePickerAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DateTimePickerAccessibleObject);
  }


};
typedef _DateTimePickerAccessibleObjectDispT<_DateTimePickerAccessibleObject> _DateTimePickerAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_DomainUpDown
// Interface: _DomainUpDown
// *********************************************************************//
template <class T /* _DomainUpDown */ >
class TCOM_DomainUpDownT : public TComInterface<_DomainUpDown>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DomainUpDownT() {}
  TCOM_DomainUpDownT(_DomainUpDown *intf, bool addRef = false) : TComInterface<_DomainUpDown>(intf, addRef) {}
  TCOM_DomainUpDownT(const TCOM_DomainUpDownT& src) : TComInterface<_DomainUpDown>(src) {}
  TCOM_DomainUpDownT& operator=(const TCOM_DomainUpDownT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DomainUpDownT<_DomainUpDown> TCOM_DomainUpDown;

// *********************************************************************//
// DispIntf:  _DomainUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {44792A74-5DD8-3410-A897-F568E4E58161}
// *********************************************************************//
template<class T>
class _DomainUpDownDispT : public TAutoDriver<_DomainUpDown>
{
public:
  _DomainUpDownDispT(){}

  _DomainUpDownDispT(_DomainUpDown *pintf)
  {
    TAutoDriver<_DomainUpDown>::Bind(pintf, false);
  }

  _DomainUpDownDispT(_DomainUpDownPtr pintf)
  {
    TAutoDriver<_DomainUpDown>::Bind(pintf, true);
  }

  _DomainUpDownDispT& operator=(_DomainUpDown *pintf)
  {
    TAutoDriver<_DomainUpDown>::Bind(pintf, false);
    return *this;
  }

  _DomainUpDownDispT& operator=(_DomainUpDownPtr pintf)
  {
    TAutoDriver<_DomainUpDown>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DomainUpDown));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DomainUpDown);
  }


};
typedef _DomainUpDownDispT<_DomainUpDown> _DomainUpDownDisp;

// *********************************************************************//
// SmartIntf: TCOM_UpDownBase
// Interface: _UpDownBase
// *********************************************************************//
template <class T /* _UpDownBase */ >
class TCOM_UpDownBaseT : public TComInterface<_UpDownBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_UpDownBaseT() {}
  TCOM_UpDownBaseT(_UpDownBase *intf, bool addRef = false) : TComInterface<_UpDownBase>(intf, addRef) {}
  TCOM_UpDownBaseT(const TCOM_UpDownBaseT& src) : TComInterface<_UpDownBase>(src) {}
  TCOM_UpDownBaseT& operator=(const TCOM_UpDownBaseT& src) { Bind(src, true); return *this;}


};
typedef TCOM_UpDownBaseT<_UpDownBase> TCOM_UpDownBase;

// *********************************************************************//
// DispIntf:  _UpDownBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C26446AC-E09B-3545-B01A-5575923636C3}
// *********************************************************************//
template<class T>
class _UpDownBaseDispT : public TAutoDriver<_UpDownBase>
{
public:
  _UpDownBaseDispT(){}

  _UpDownBaseDispT(_UpDownBase *pintf)
  {
    TAutoDriver<_UpDownBase>::Bind(pintf, false);
  }

  _UpDownBaseDispT(_UpDownBasePtr pintf)
  {
    TAutoDriver<_UpDownBase>::Bind(pintf, true);
  }

  _UpDownBaseDispT& operator=(_UpDownBase *pintf)
  {
    TAutoDriver<_UpDownBase>::Bind(pintf, false);
    return *this;
  }

  _UpDownBaseDispT& operator=(_UpDownBasePtr pintf)
  {
    TAutoDriver<_UpDownBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UpDownBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UpDownBase);
  }


};
typedef _UpDownBaseDispT<_UpDownBase> _UpDownBaseDisp;

// *********************************************************************//
// SmartIntf: TCOM_DomainItemAccessibleObject
// Interface: _DomainItemAccessibleObject
// *********************************************************************//
template <class T /* _DomainItemAccessibleObject */ >
class TCOM_DomainItemAccessibleObjectT : public TComInterface<_DomainItemAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DomainItemAccessibleObjectT() {}
  TCOM_DomainItemAccessibleObjectT(_DomainItemAccessibleObject *intf, bool addRef = false) : TComInterface<_DomainItemAccessibleObject>(intf, addRef) {}
  TCOM_DomainItemAccessibleObjectT(const TCOM_DomainItemAccessibleObjectT& src) : TComInterface<_DomainItemAccessibleObject>(src) {}
  TCOM_DomainItemAccessibleObjectT& operator=(const TCOM_DomainItemAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DomainItemAccessibleObjectT<_DomainItemAccessibleObject> TCOM_DomainItemAccessibleObject;

// *********************************************************************//
// DispIntf:  _DomainItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0D46DA02-69FB-3A29-9AC6-395925C38479}
// *********************************************************************//
template<class T>
class _DomainItemAccessibleObjectDispT : public TAutoDriver<_DomainItemAccessibleObject>
{
public:
  _DomainItemAccessibleObjectDispT(){}

  _DomainItemAccessibleObjectDispT(_DomainItemAccessibleObject *pintf)
  {
    TAutoDriver<_DomainItemAccessibleObject>::Bind(pintf, false);
  }

  _DomainItemAccessibleObjectDispT(_DomainItemAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DomainItemAccessibleObject>::Bind(pintf, true);
  }

  _DomainItemAccessibleObjectDispT& operator=(_DomainItemAccessibleObject *pintf)
  {
    TAutoDriver<_DomainItemAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _DomainItemAccessibleObjectDispT& operator=(_DomainItemAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DomainItemAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DomainItemAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DomainItemAccessibleObject);
  }


};
typedef _DomainItemAccessibleObjectDispT<_DomainItemAccessibleObject> _DomainItemAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_DomainUpDownAccessibleObject
// Interface: _DomainUpDownAccessibleObject
// *********************************************************************//
template <class T /* _DomainUpDownAccessibleObject */ >
class TCOM_DomainUpDownAccessibleObjectT : public TComInterface<_DomainUpDownAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DomainUpDownAccessibleObjectT() {}
  TCOM_DomainUpDownAccessibleObjectT(_DomainUpDownAccessibleObject *intf, bool addRef = false) : TComInterface<_DomainUpDownAccessibleObject>(intf, addRef) {}
  TCOM_DomainUpDownAccessibleObjectT(const TCOM_DomainUpDownAccessibleObjectT& src) : TComInterface<_DomainUpDownAccessibleObject>(src) {}
  TCOM_DomainUpDownAccessibleObjectT& operator=(const TCOM_DomainUpDownAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DomainUpDownAccessibleObjectT<_DomainUpDownAccessibleObject> TCOM_DomainUpDownAccessibleObject;

// *********************************************************************//
// DispIntf:  _DomainUpDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {131B8005-94C2-37D5-B738-CD2337635E73}
// *********************************************************************//
template<class T>
class _DomainUpDownAccessibleObjectDispT : public TAutoDriver<_DomainUpDownAccessibleObject>
{
public:
  _DomainUpDownAccessibleObjectDispT(){}

  _DomainUpDownAccessibleObjectDispT(_DomainUpDownAccessibleObject *pintf)
  {
    TAutoDriver<_DomainUpDownAccessibleObject>::Bind(pintf, false);
  }

  _DomainUpDownAccessibleObjectDispT(_DomainUpDownAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DomainUpDownAccessibleObject>::Bind(pintf, true);
  }

  _DomainUpDownAccessibleObjectDispT& operator=(_DomainUpDownAccessibleObject *pintf)
  {
    TAutoDriver<_DomainUpDownAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _DomainUpDownAccessibleObjectDispT& operator=(_DomainUpDownAccessibleObjectPtr pintf)
  {
    TAutoDriver<_DomainUpDownAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DomainUpDownAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DomainUpDownAccessibleObject);
  }


};
typedef _DomainUpDownAccessibleObjectDispT<_DomainUpDownAccessibleObject> _DomainUpDownAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_FlowLayoutPanel
// Interface: _FlowLayoutPanel
// *********************************************************************//
template <class T /* _FlowLayoutPanel */ >
class TCOM_FlowLayoutPanelT : public TComInterface<_FlowLayoutPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FlowLayoutPanelT() {}
  TCOM_FlowLayoutPanelT(_FlowLayoutPanel *intf, bool addRef = false) : TComInterface<_FlowLayoutPanel>(intf, addRef) {}
  TCOM_FlowLayoutPanelT(const TCOM_FlowLayoutPanelT& src) : TComInterface<_FlowLayoutPanel>(src) {}
  TCOM_FlowLayoutPanelT& operator=(const TCOM_FlowLayoutPanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FlowLayoutPanelT<_FlowLayoutPanel> TCOM_FlowLayoutPanel;

// *********************************************************************//
// DispIntf:  _FlowLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B55C4C83-1F69-3D93-9C4E-2AA5619E0C68}
// *********************************************************************//
template<class T>
class _FlowLayoutPanelDispT : public TAutoDriver<_FlowLayoutPanel>
{
public:
  _FlowLayoutPanelDispT(){}

  _FlowLayoutPanelDispT(_FlowLayoutPanel *pintf)
  {
    TAutoDriver<_FlowLayoutPanel>::Bind(pintf, false);
  }

  _FlowLayoutPanelDispT(_FlowLayoutPanelPtr pintf)
  {
    TAutoDriver<_FlowLayoutPanel>::Bind(pintf, true);
  }

  _FlowLayoutPanelDispT& operator=(_FlowLayoutPanel *pintf)
  {
    TAutoDriver<_FlowLayoutPanel>::Bind(pintf, false);
    return *this;
  }

  _FlowLayoutPanelDispT& operator=(_FlowLayoutPanelPtr pintf)
  {
    TAutoDriver<_FlowLayoutPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FlowLayoutPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FlowLayoutPanel);
  }


};
typedef _FlowLayoutPanelDispT<_FlowLayoutPanel> _FlowLayoutPanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_MenuStrip
// Interface: _MenuStrip
// *********************************************************************//
template <class T /* _MenuStrip */ >
class TCOM_MenuStripT : public TComInterface<_MenuStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MenuStripT() {}
  TCOM_MenuStripT(_MenuStrip *intf, bool addRef = false) : TComInterface<_MenuStrip>(intf, addRef) {}
  TCOM_MenuStripT(const TCOM_MenuStripT& src) : TComInterface<_MenuStrip>(src) {}
  TCOM_MenuStripT& operator=(const TCOM_MenuStripT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MenuStripT<_MenuStrip> TCOM_MenuStrip;

// *********************************************************************//
// DispIntf:  _MenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB5A3078-05D9-3F32-9045-89F756938A3D}
// *********************************************************************//
template<class T>
class _MenuStripDispT : public TAutoDriver<_MenuStrip>
{
public:
  _MenuStripDispT(){}

  _MenuStripDispT(_MenuStrip *pintf)
  {
    TAutoDriver<_MenuStrip>::Bind(pintf, false);
  }

  _MenuStripDispT(_MenuStripPtr pintf)
  {
    TAutoDriver<_MenuStrip>::Bind(pintf, true);
  }

  _MenuStripDispT& operator=(_MenuStrip *pintf)
  {
    TAutoDriver<_MenuStrip>::Bind(pintf, false);
    return *this;
  }

  _MenuStripDispT& operator=(_MenuStripPtr pintf)
  {
    TAutoDriver<_MenuStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MenuStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MenuStrip);
  }


};
typedef _MenuStripDispT<_MenuStrip> _MenuStripDisp;

// *********************************************************************//
// SmartIntf: TCOM_GroupBox
// Interface: _GroupBox
// *********************************************************************//
template <class T /* _GroupBox */ >
class TCOM_GroupBoxT : public TComInterface<_GroupBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_GroupBoxT() {}
  TCOM_GroupBoxT(_GroupBox *intf, bool addRef = false) : TComInterface<_GroupBox>(intf, addRef) {}
  TCOM_GroupBoxT(const TCOM_GroupBoxT& src) : TComInterface<_GroupBox>(src) {}
  TCOM_GroupBoxT& operator=(const TCOM_GroupBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_GroupBoxT<_GroupBox> TCOM_GroupBox;

// *********************************************************************//
// DispIntf:  _GroupBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11B0B536-2F72-3A3F-B2A3-0420A9F5041F}
// *********************************************************************//
template<class T>
class _GroupBoxDispT : public TAutoDriver<_GroupBox>
{
public:
  _GroupBoxDispT(){}

  _GroupBoxDispT(_GroupBox *pintf)
  {
    TAutoDriver<_GroupBox>::Bind(pintf, false);
  }

  _GroupBoxDispT(_GroupBoxPtr pintf)
  {
    TAutoDriver<_GroupBox>::Bind(pintf, true);
  }

  _GroupBoxDispT& operator=(_GroupBox *pintf)
  {
    TAutoDriver<_GroupBox>::Bind(pintf, false);
    return *this;
  }

  _GroupBoxDispT& operator=(_GroupBoxPtr pintf)
  {
    TAutoDriver<_GroupBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_GroupBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_GroupBox);
  }


};
typedef _GroupBoxDispT<_GroupBox> _GroupBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_HScrollBar
// Interface: _HScrollBar
// *********************************************************************//
template <class T /* _HScrollBar */ >
class TCOM_HScrollBarT : public TComInterface<_HScrollBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_HScrollBarT() {}
  TCOM_HScrollBarT(_HScrollBar *intf, bool addRef = false) : TComInterface<_HScrollBar>(intf, addRef) {}
  TCOM_HScrollBarT(const TCOM_HScrollBarT& src) : TComInterface<_HScrollBar>(src) {}
  TCOM_HScrollBarT& operator=(const TCOM_HScrollBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_HScrollBarT<_HScrollBar> TCOM_HScrollBar;

// *********************************************************************//
// DispIntf:  _HScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7BC4A820-B20F-3ECE-BDD6-EE7E14EB7E0D}
// *********************************************************************//
template<class T>
class _HScrollBarDispT : public TAutoDriver<_HScrollBar>
{
public:
  _HScrollBarDispT(){}

  _HScrollBarDispT(_HScrollBar *pintf)
  {
    TAutoDriver<_HScrollBar>::Bind(pintf, false);
  }

  _HScrollBarDispT(_HScrollBarPtr pintf)
  {
    TAutoDriver<_HScrollBar>::Bind(pintf, true);
  }

  _HScrollBarDispT& operator=(_HScrollBar *pintf)
  {
    TAutoDriver<_HScrollBar>::Bind(pintf, false);
    return *this;
  }

  _HScrollBarDispT& operator=(_HScrollBarPtr pintf)
  {
    TAutoDriver<_HScrollBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HScrollBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HScrollBar);
  }


};
typedef _HScrollBarDispT<_HScrollBar> _HScrollBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_ItemDragEventArgs
// Interface: _ItemDragEventArgs
// *********************************************************************//
template <class T /* _ItemDragEventArgs */ >
class TCOM_ItemDragEventArgsT : public TComInterface<_ItemDragEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ItemDragEventArgsT() {}
  TCOM_ItemDragEventArgsT(_ItemDragEventArgs *intf, bool addRef = false) : TComInterface<_ItemDragEventArgs>(intf, addRef) {}
  TCOM_ItemDragEventArgsT(const TCOM_ItemDragEventArgsT& src) : TComInterface<_ItemDragEventArgs>(src) {}
  TCOM_ItemDragEventArgsT& operator=(const TCOM_ItemDragEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ItemDragEventArgsT<_ItemDragEventArgs> TCOM_ItemDragEventArgs;

// *********************************************************************//
// DispIntf:  _ItemDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2A2C6-276C-3F23-AF2A-800CCD05CFF2}
// *********************************************************************//
template<class T>
class _ItemDragEventArgsDispT : public TAutoDriver<_ItemDragEventArgs>
{
public:
  _ItemDragEventArgsDispT(){}

  _ItemDragEventArgsDispT(_ItemDragEventArgs *pintf)
  {
    TAutoDriver<_ItemDragEventArgs>::Bind(pintf, false);
  }

  _ItemDragEventArgsDispT(_ItemDragEventArgsPtr pintf)
  {
    TAutoDriver<_ItemDragEventArgs>::Bind(pintf, true);
  }

  _ItemDragEventArgsDispT& operator=(_ItemDragEventArgs *pintf)
  {
    TAutoDriver<_ItemDragEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ItemDragEventArgsDispT& operator=(_ItemDragEventArgsPtr pintf)
  {
    TAutoDriver<_ItemDragEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ItemDragEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ItemDragEventArgs);
  }


};
typedef _ItemDragEventArgsDispT<_ItemDragEventArgs> _ItemDragEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Label
// Interface: _Label
// *********************************************************************//
template <class T /* _Label */ >
class TCOM_LabelT : public TComInterface<_Label>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LabelT() {}
  TCOM_LabelT(_Label *intf, bool addRef = false) : TComInterface<_Label>(intf, addRef) {}
  TCOM_LabelT(const TCOM_LabelT& src) : TComInterface<_Label>(src) {}
  TCOM_LabelT& operator=(const TCOM_LabelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_LabelT<_Label> TCOM_Label;

// *********************************************************************//
// DispIntf:  _Label
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00AE8203-987D-3B7E-9448-5B3393282D7F}
// *********************************************************************//
template<class T>
class _LabelDispT : public TAutoDriver<_Label>
{
public:
  _LabelDispT(){}

  _LabelDispT(_Label *pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, false);
  }

  _LabelDispT(_LabelPtr pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, true);
  }

  _LabelDispT& operator=(_Label *pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, false);
    return *this;
  }

  _LabelDispT& operator=(_LabelPtr pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Label));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Label);
  }


};
typedef _LabelDispT<_Label> _LabelDisp;

// *********************************************************************//
// SmartIntf: TCOM_LinkClickedEventArgs
// Interface: _LinkClickedEventArgs
// *********************************************************************//
template <class T /* _LinkClickedEventArgs */ >
class TCOM_LinkClickedEventArgsT : public TComInterface<_LinkClickedEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LinkClickedEventArgsT() {}
  TCOM_LinkClickedEventArgsT(_LinkClickedEventArgs *intf, bool addRef = false) : TComInterface<_LinkClickedEventArgs>(intf, addRef) {}
  TCOM_LinkClickedEventArgsT(const TCOM_LinkClickedEventArgsT& src) : TComInterface<_LinkClickedEventArgs>(src) {}
  TCOM_LinkClickedEventArgsT& operator=(const TCOM_LinkClickedEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_LinkClickedEventArgsT<_LinkClickedEventArgs> TCOM_LinkClickedEventArgs;

// *********************************************************************//
// DispIntf:  _LinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93194740-9A53-3D3E-902C-240FBE0C90E4}
// *********************************************************************//
template<class T>
class _LinkClickedEventArgsDispT : public TAutoDriver<_LinkClickedEventArgs>
{
public:
  _LinkClickedEventArgsDispT(){}

  _LinkClickedEventArgsDispT(_LinkClickedEventArgs *pintf)
  {
    TAutoDriver<_LinkClickedEventArgs>::Bind(pintf, false);
  }

  _LinkClickedEventArgsDispT(_LinkClickedEventArgsPtr pintf)
  {
    TAutoDriver<_LinkClickedEventArgs>::Bind(pintf, true);
  }

  _LinkClickedEventArgsDispT& operator=(_LinkClickedEventArgs *pintf)
  {
    TAutoDriver<_LinkClickedEventArgs>::Bind(pintf, false);
    return *this;
  }

  _LinkClickedEventArgsDispT& operator=(_LinkClickedEventArgsPtr pintf)
  {
    TAutoDriver<_LinkClickedEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LinkClickedEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LinkClickedEventArgs);
  }


};
typedef _LinkClickedEventArgsDispT<_LinkClickedEventArgs> _LinkClickedEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_LinkLabel
// Interface: _LinkLabel
// *********************************************************************//
template <class T /* _LinkLabel */ >
class TCOM_LinkLabelT : public TComInterface<_LinkLabel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LinkLabelT() {}
  TCOM_LinkLabelT(_LinkLabel *intf, bool addRef = false) : TComInterface<_LinkLabel>(intf, addRef) {}
  TCOM_LinkLabelT(const TCOM_LinkLabelT& src) : TComInterface<_LinkLabel>(src) {}
  TCOM_LinkLabelT& operator=(const TCOM_LinkLabelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_LinkLabelT<_LinkLabel> TCOM_LinkLabel;

// *********************************************************************//
// DispIntf:  _LinkLabel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4EE61C0D-D2D5-3A50-972B-C0A957D3A541}
// *********************************************************************//
template<class T>
class _LinkLabelDispT : public TAutoDriver<_LinkLabel>
{
public:
  _LinkLabelDispT(){}

  _LinkLabelDispT(_LinkLabel *pintf)
  {
    TAutoDriver<_LinkLabel>::Bind(pintf, false);
  }

  _LinkLabelDispT(_LinkLabelPtr pintf)
  {
    TAutoDriver<_LinkLabel>::Bind(pintf, true);
  }

  _LinkLabelDispT& operator=(_LinkLabel *pintf)
  {
    TAutoDriver<_LinkLabel>::Bind(pintf, false);
    return *this;
  }

  _LinkLabelDispT& operator=(_LinkLabelPtr pintf)
  {
    TAutoDriver<_LinkLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LinkLabel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LinkLabel);
  }


};
typedef _LinkLabelDispT<_LinkLabel> _LinkLabelDisp;

// *********************************************************************//
// SmartIntf: TCOM_LinkLabelLinkClickedEventArgs
// Interface: _LinkLabelLinkClickedEventArgs
// *********************************************************************//
template <class T /* _LinkLabelLinkClickedEventArgs */ >
class TCOM_LinkLabelLinkClickedEventArgsT : public TComInterface<_LinkLabelLinkClickedEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LinkLabelLinkClickedEventArgsT() {}
  TCOM_LinkLabelLinkClickedEventArgsT(_LinkLabelLinkClickedEventArgs *intf, bool addRef = false) : TComInterface<_LinkLabelLinkClickedEventArgs>(intf, addRef) {}
  TCOM_LinkLabelLinkClickedEventArgsT(const TCOM_LinkLabelLinkClickedEventArgsT& src) : TComInterface<_LinkLabelLinkClickedEventArgs>(src) {}
  TCOM_LinkLabelLinkClickedEventArgsT& operator=(const TCOM_LinkLabelLinkClickedEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_LinkLabelLinkClickedEventArgsT<_LinkLabelLinkClickedEventArgs> TCOM_LinkLabelLinkClickedEventArgs;

// *********************************************************************//
// DispIntf:  _LinkLabelLinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CB38AE7B-5208-351D-8B84-3ECA81DE0F34}
// *********************************************************************//
template<class T>
class _LinkLabelLinkClickedEventArgsDispT : public TAutoDriver<_LinkLabelLinkClickedEventArgs>
{
public:
  _LinkLabelLinkClickedEventArgsDispT(){}

  _LinkLabelLinkClickedEventArgsDispT(_LinkLabelLinkClickedEventArgs *pintf)
  {
    TAutoDriver<_LinkLabelLinkClickedEventArgs>::Bind(pintf, false);
  }

  _LinkLabelLinkClickedEventArgsDispT(_LinkLabelLinkClickedEventArgsPtr pintf)
  {
    TAutoDriver<_LinkLabelLinkClickedEventArgs>::Bind(pintf, true);
  }

  _LinkLabelLinkClickedEventArgsDispT& operator=(_LinkLabelLinkClickedEventArgs *pintf)
  {
    TAutoDriver<_LinkLabelLinkClickedEventArgs>::Bind(pintf, false);
    return *this;
  }

  _LinkLabelLinkClickedEventArgsDispT& operator=(_LinkLabelLinkClickedEventArgsPtr pintf)
  {
    TAutoDriver<_LinkLabelLinkClickedEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LinkLabelLinkClickedEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LinkLabelLinkClickedEventArgs);
  }


};
typedef _LinkLabelLinkClickedEventArgsDispT<_LinkLabelLinkClickedEventArgs> _LinkLabelLinkClickedEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListViewItemMouseHoverEventArgs
// Interface: _ListViewItemMouseHoverEventArgs
// *********************************************************************//
template <class T /* _ListViewItemMouseHoverEventArgs */ >
class TCOM_ListViewItemMouseHoverEventArgsT : public TComInterface<_ListViewItemMouseHoverEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListViewItemMouseHoverEventArgsT() {}
  TCOM_ListViewItemMouseHoverEventArgsT(_ListViewItemMouseHoverEventArgs *intf, bool addRef = false) : TComInterface<_ListViewItemMouseHoverEventArgs>(intf, addRef) {}
  TCOM_ListViewItemMouseHoverEventArgsT(const TCOM_ListViewItemMouseHoverEventArgsT& src) : TComInterface<_ListViewItemMouseHoverEventArgs>(src) {}
  TCOM_ListViewItemMouseHoverEventArgsT& operator=(const TCOM_ListViewItemMouseHoverEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListViewItemMouseHoverEventArgsT<_ListViewItemMouseHoverEventArgs> TCOM_ListViewItemMouseHoverEventArgs;

// *********************************************************************//
// DispIntf:  _ListViewItemMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2F121D8-4775-3FB2-93A3-C5862AE8C359}
// *********************************************************************//
template<class T>
class _ListViewItemMouseHoverEventArgsDispT : public TAutoDriver<_ListViewItemMouseHoverEventArgs>
{
public:
  _ListViewItemMouseHoverEventArgsDispT(){}

  _ListViewItemMouseHoverEventArgsDispT(_ListViewItemMouseHoverEventArgs *pintf)
  {
    TAutoDriver<_ListViewItemMouseHoverEventArgs>::Bind(pintf, false);
  }

  _ListViewItemMouseHoverEventArgsDispT(_ListViewItemMouseHoverEventArgsPtr pintf)
  {
    TAutoDriver<_ListViewItemMouseHoverEventArgs>::Bind(pintf, true);
  }

  _ListViewItemMouseHoverEventArgsDispT& operator=(_ListViewItemMouseHoverEventArgs *pintf)
  {
    TAutoDriver<_ListViewItemMouseHoverEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ListViewItemMouseHoverEventArgsDispT& operator=(_ListViewItemMouseHoverEventArgsPtr pintf)
  {
    TAutoDriver<_ListViewItemMouseHoverEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListViewItemMouseHoverEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListViewItemMouseHoverEventArgs);
  }


};
typedef _ListViewItemMouseHoverEventArgsDispT<_ListViewItemMouseHoverEventArgs> _ListViewItemMouseHoverEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_MaskedTextBox
// Interface: _MaskedTextBox
// *********************************************************************//
template <class T /* _MaskedTextBox */ >
class TCOM_MaskedTextBoxT : public TComInterface<_MaskedTextBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MaskedTextBoxT() {}
  TCOM_MaskedTextBoxT(_MaskedTextBox *intf, bool addRef = false) : TComInterface<_MaskedTextBox>(intf, addRef) {}
  TCOM_MaskedTextBoxT(const TCOM_MaskedTextBoxT& src) : TComInterface<_MaskedTextBox>(src) {}
  TCOM_MaskedTextBoxT& operator=(const TCOM_MaskedTextBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MaskedTextBoxT<_MaskedTextBox> TCOM_MaskedTextBox;

// *********************************************************************//
// DispIntf:  _MaskedTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22B0C1A9-E74E-381A-BABB-66BEF71FF08E}
// *********************************************************************//
template<class T>
class _MaskedTextBoxDispT : public TAutoDriver<_MaskedTextBox>
{
public:
  _MaskedTextBoxDispT(){}

  _MaskedTextBoxDispT(_MaskedTextBox *pintf)
  {
    TAutoDriver<_MaskedTextBox>::Bind(pintf, false);
  }

  _MaskedTextBoxDispT(_MaskedTextBoxPtr pintf)
  {
    TAutoDriver<_MaskedTextBox>::Bind(pintf, true);
  }

  _MaskedTextBoxDispT& operator=(_MaskedTextBox *pintf)
  {
    TAutoDriver<_MaskedTextBox>::Bind(pintf, false);
    return *this;
  }

  _MaskedTextBoxDispT& operator=(_MaskedTextBoxPtr pintf)
  {
    TAutoDriver<_MaskedTextBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MaskedTextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MaskedTextBox);
  }


};
typedef _MaskedTextBoxDispT<_MaskedTextBox> _MaskedTextBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_TextBoxBase
// Interface: _TextBoxBase
// *********************************************************************//
template <class T /* _TextBoxBase */ >
class TCOM_TextBoxBaseT : public TComInterface<_TextBoxBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TextBoxBaseT() {}
  TCOM_TextBoxBaseT(_TextBoxBase *intf, bool addRef = false) : TComInterface<_TextBoxBase>(intf, addRef) {}
  TCOM_TextBoxBaseT(const TCOM_TextBoxBaseT& src) : TComInterface<_TextBoxBase>(src) {}
  TCOM_TextBoxBaseT& operator=(const TCOM_TextBoxBaseT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TextBoxBaseT<_TextBoxBase> TCOM_TextBoxBase;

// *********************************************************************//
// DispIntf:  _TextBoxBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {ABC30865-8929-3F02-9D70-6C3D68C83837}
// *********************************************************************//
template<class T>
class _TextBoxBaseDispT : public TAutoDriver<_TextBoxBase>
{
public:
  _TextBoxBaseDispT(){}

  _TextBoxBaseDispT(_TextBoxBase *pintf)
  {
    TAutoDriver<_TextBoxBase>::Bind(pintf, false);
  }

  _TextBoxBaseDispT(_TextBoxBasePtr pintf)
  {
    TAutoDriver<_TextBoxBase>::Bind(pintf, true);
  }

  _TextBoxBaseDispT& operator=(_TextBoxBase *pintf)
  {
    TAutoDriver<_TextBoxBase>::Bind(pintf, false);
    return *this;
  }

  _TextBoxBaseDispT& operator=(_TextBoxBasePtr pintf)
  {
    TAutoDriver<_TextBoxBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TextBoxBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TextBoxBase);
  }


};
typedef _TextBoxBaseDispT<_TextBoxBase> _TextBoxBaseDisp;

// *********************************************************************//
// SmartIntf: TCOM_MdiClient
// Interface: _MdiClient
// *********************************************************************//
template <class T /* _MdiClient */ >
class TCOM_MdiClientT : public TComInterface<_MdiClient>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MdiClientT() {}
  TCOM_MdiClientT(_MdiClient *intf, bool addRef = false) : TComInterface<_MdiClient>(intf, addRef) {}
  TCOM_MdiClientT(const TCOM_MdiClientT& src) : TComInterface<_MdiClient>(src) {}
  TCOM_MdiClientT& operator=(const TCOM_MdiClientT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MdiClientT<_MdiClient> TCOM_MdiClient;

// *********************************************************************//
// DispIntf:  _MdiClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6AB0BB67-4A4B-32F9-A18A-6481916C946F}
// *********************************************************************//
template<class T>
class _MdiClientDispT : public TAutoDriver<_MdiClient>
{
public:
  _MdiClientDispT(){}

  _MdiClientDispT(_MdiClient *pintf)
  {
    TAutoDriver<_MdiClient>::Bind(pintf, false);
  }

  _MdiClientDispT(_MdiClientPtr pintf)
  {
    TAutoDriver<_MdiClient>::Bind(pintf, true);
  }

  _MdiClientDispT& operator=(_MdiClient *pintf)
  {
    TAutoDriver<_MdiClient>::Bind(pintf, false);
    return *this;
  }

  _MdiClientDispT& operator=(_MdiClientPtr pintf)
  {
    TAutoDriver<_MdiClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MdiClient));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MdiClient);
  }


};
typedef _MdiClientDispT<_MdiClient> _MdiClientDisp;

// *********************************************************************//
// SmartIntf: TCOM_MonthCalendar
// Interface: _MonthCalendar
// *********************************************************************//
template <class T /* _MonthCalendar */ >
class TCOM_MonthCalendarT : public TComInterface<_MonthCalendar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MonthCalendarT() {}
  TCOM_MonthCalendarT(_MonthCalendar *intf, bool addRef = false) : TComInterface<_MonthCalendar>(intf, addRef) {}
  TCOM_MonthCalendarT(const TCOM_MonthCalendarT& src) : TComInterface<_MonthCalendar>(src) {}
  TCOM_MonthCalendarT& operator=(const TCOM_MonthCalendarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MonthCalendarT<_MonthCalendar> TCOM_MonthCalendar;

// *********************************************************************//
// DispIntf:  _MonthCalendar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3FA9EA8-275E-35E9-89DA-18B1FCA593EE}
// *********************************************************************//
template<class T>
class _MonthCalendarDispT : public TAutoDriver<_MonthCalendar>
{
public:
  _MonthCalendarDispT(){}

  _MonthCalendarDispT(_MonthCalendar *pintf)
  {
    TAutoDriver<_MonthCalendar>::Bind(pintf, false);
  }

  _MonthCalendarDispT(_MonthCalendarPtr pintf)
  {
    TAutoDriver<_MonthCalendar>::Bind(pintf, true);
  }

  _MonthCalendarDispT& operator=(_MonthCalendar *pintf)
  {
    TAutoDriver<_MonthCalendar>::Bind(pintf, false);
    return *this;
  }

  _MonthCalendarDispT& operator=(_MonthCalendarPtr pintf)
  {
    TAutoDriver<_MonthCalendar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MonthCalendar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MonthCalendar);
  }


};
typedef _MonthCalendarDispT<_MonthCalendar> _MonthCalendarDisp;

// *********************************************************************//
// SmartIntf: TCOM_NumericUpDown
// Interface: _NumericUpDown
// *********************************************************************//
template <class T /* _NumericUpDown */ >
class TCOM_NumericUpDownT : public TComInterface<_NumericUpDown>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_NumericUpDownT() {}
  TCOM_NumericUpDownT(_NumericUpDown *intf, bool addRef = false) : TComInterface<_NumericUpDown>(intf, addRef) {}
  TCOM_NumericUpDownT(const TCOM_NumericUpDownT& src) : TComInterface<_NumericUpDown>(src) {}
  TCOM_NumericUpDownT& operator=(const TCOM_NumericUpDownT& src) { Bind(src, true); return *this;}


};
typedef TCOM_NumericUpDownT<_NumericUpDown> TCOM_NumericUpDown;

// *********************************************************************//
// DispIntf:  _NumericUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2AD9F14A-0097-3C69-9F8E-5DDB52F3878B}
// *********************************************************************//
template<class T>
class _NumericUpDownDispT : public TAutoDriver<_NumericUpDown>
{
public:
  _NumericUpDownDispT(){}

  _NumericUpDownDispT(_NumericUpDown *pintf)
  {
    TAutoDriver<_NumericUpDown>::Bind(pintf, false);
  }

  _NumericUpDownDispT(_NumericUpDownPtr pintf)
  {
    TAutoDriver<_NumericUpDown>::Bind(pintf, true);
  }

  _NumericUpDownDispT& operator=(_NumericUpDown *pintf)
  {
    TAutoDriver<_NumericUpDown>::Bind(pintf, false);
    return *this;
  }

  _NumericUpDownDispT& operator=(_NumericUpDownPtr pintf)
  {
    TAutoDriver<_NumericUpDown>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NumericUpDown));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NumericUpDown);
  }


};
typedef _NumericUpDownDispT<_NumericUpDown> _NumericUpDownDisp;

// *********************************************************************//
// SmartIntf: TCOM_PictureBox
// Interface: _PictureBox
// *********************************************************************//
template <class T /* _PictureBox */ >
class TCOM_PictureBoxT : public TComInterface<_PictureBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PictureBoxT() {}
  TCOM_PictureBoxT(_PictureBox *intf, bool addRef = false) : TComInterface<_PictureBox>(intf, addRef) {}
  TCOM_PictureBoxT(const TCOM_PictureBoxT& src) : TComInterface<_PictureBox>(src) {}
  TCOM_PictureBoxT& operator=(const TCOM_PictureBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PictureBoxT<_PictureBox> TCOM_PictureBox;

// *********************************************************************//
// DispIntf:  _PictureBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB1C5180-87D0-330C-B698-EE2132DF362E}
// *********************************************************************//
template<class T>
class _PictureBoxDispT : public TAutoDriver<_PictureBox>
{
public:
  _PictureBoxDispT(){}

  _PictureBoxDispT(_PictureBox *pintf)
  {
    TAutoDriver<_PictureBox>::Bind(pintf, false);
  }

  _PictureBoxDispT(_PictureBoxPtr pintf)
  {
    TAutoDriver<_PictureBox>::Bind(pintf, true);
  }

  _PictureBoxDispT& operator=(_PictureBox *pintf)
  {
    TAutoDriver<_PictureBox>::Bind(pintf, false);
    return *this;
  }

  _PictureBoxDispT& operator=(_PictureBoxPtr pintf)
  {
    TAutoDriver<_PictureBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PictureBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PictureBox);
  }


};
typedef _PictureBoxDispT<_PictureBox> _PictureBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_PrintPreviewControl
// Interface: _PrintPreviewControl
// *********************************************************************//
template <class T /* _PrintPreviewControl */ >
class TCOM_PrintPreviewControlT : public TComInterface<_PrintPreviewControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PrintPreviewControlT() {}
  TCOM_PrintPreviewControlT(_PrintPreviewControl *intf, bool addRef = false) : TComInterface<_PrintPreviewControl>(intf, addRef) {}
  TCOM_PrintPreviewControlT(const TCOM_PrintPreviewControlT& src) : TComInterface<_PrintPreviewControl>(src) {}
  TCOM_PrintPreviewControlT& operator=(const TCOM_PrintPreviewControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PrintPreviewControlT<_PrintPreviewControl> TCOM_PrintPreviewControl;

// *********************************************************************//
// DispIntf:  _PrintPreviewControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FA3B8143-ECB8-3A38-9DE5-DB0EEA708B5F}
// *********************************************************************//
template<class T>
class _PrintPreviewControlDispT : public TAutoDriver<_PrintPreviewControl>
{
public:
  _PrintPreviewControlDispT(){}

  _PrintPreviewControlDispT(_PrintPreviewControl *pintf)
  {
    TAutoDriver<_PrintPreviewControl>::Bind(pintf, false);
  }

  _PrintPreviewControlDispT(_PrintPreviewControlPtr pintf)
  {
    TAutoDriver<_PrintPreviewControl>::Bind(pintf, true);
  }

  _PrintPreviewControlDispT& operator=(_PrintPreviewControl *pintf)
  {
    TAutoDriver<_PrintPreviewControl>::Bind(pintf, false);
    return *this;
  }

  _PrintPreviewControlDispT& operator=(_PrintPreviewControlPtr pintf)
  {
    TAutoDriver<_PrintPreviewControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PrintPreviewControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PrintPreviewControl);
  }


};
typedef _PrintPreviewControlDispT<_PrintPreviewControl> _PrintPreviewControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_PrintPreviewDialog
// Interface: _PrintPreviewDialog
// *********************************************************************//
template <class T /* _PrintPreviewDialog */ >
class TCOM_PrintPreviewDialogT : public TComInterface<_PrintPreviewDialog>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PrintPreviewDialogT() {}
  TCOM_PrintPreviewDialogT(_PrintPreviewDialog *intf, bool addRef = false) : TComInterface<_PrintPreviewDialog>(intf, addRef) {}
  TCOM_PrintPreviewDialogT(const TCOM_PrintPreviewDialogT& src) : TComInterface<_PrintPreviewDialog>(src) {}
  TCOM_PrintPreviewDialogT& operator=(const TCOM_PrintPreviewDialogT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PrintPreviewDialogT<_PrintPreviewDialog> TCOM_PrintPreviewDialog;

// *********************************************************************//
// DispIntf:  _PrintPreviewDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57C090D5-80BC-33B8-B782-706A8D833767}
// *********************************************************************//
template<class T>
class _PrintPreviewDialogDispT : public TAutoDriver<_PrintPreviewDialog>
{
public:
  _PrintPreviewDialogDispT(){}

  _PrintPreviewDialogDispT(_PrintPreviewDialog *pintf)
  {
    TAutoDriver<_PrintPreviewDialog>::Bind(pintf, false);
  }

  _PrintPreviewDialogDispT(_PrintPreviewDialogPtr pintf)
  {
    TAutoDriver<_PrintPreviewDialog>::Bind(pintf, true);
  }

  _PrintPreviewDialogDispT& operator=(_PrintPreviewDialog *pintf)
  {
    TAutoDriver<_PrintPreviewDialog>::Bind(pintf, false);
    return *this;
  }

  _PrintPreviewDialogDispT& operator=(_PrintPreviewDialogPtr pintf)
  {
    TAutoDriver<_PrintPreviewDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PrintPreviewDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PrintPreviewDialog);
  }


};
typedef _PrintPreviewDialogDispT<_PrintPreviewDialog> _PrintPreviewDialogDisp;

// *********************************************************************//
// SmartIntf: TCOM_ProgressBar
// Interface: _ProgressBar
// *********************************************************************//
template <class T /* _ProgressBar */ >
class TCOM_ProgressBarT : public TComInterface<_ProgressBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ProgressBarT() {}
  TCOM_ProgressBarT(_ProgressBar *intf, bool addRef = false) : TComInterface<_ProgressBar>(intf, addRef) {}
  TCOM_ProgressBarT(const TCOM_ProgressBarT& src) : TComInterface<_ProgressBar>(src) {}
  TCOM_ProgressBarT& operator=(const TCOM_ProgressBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ProgressBarT<_ProgressBar> TCOM_ProgressBar;

// *********************************************************************//
// DispIntf:  _ProgressBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E935BCB-21E1-377C-A59F-89F7BA5A4E0F}
// *********************************************************************//
template<class T>
class _ProgressBarDispT : public TAutoDriver<_ProgressBar>
{
public:
  _ProgressBarDispT(){}

  _ProgressBarDispT(_ProgressBar *pintf)
  {
    TAutoDriver<_ProgressBar>::Bind(pintf, false);
  }

  _ProgressBarDispT(_ProgressBarPtr pintf)
  {
    TAutoDriver<_ProgressBar>::Bind(pintf, true);
  }

  _ProgressBarDispT& operator=(_ProgressBar *pintf)
  {
    TAutoDriver<_ProgressBar>::Bind(pintf, false);
    return *this;
  }

  _ProgressBarDispT& operator=(_ProgressBarPtr pintf)
  {
    TAutoDriver<_ProgressBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ProgressBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ProgressBar);
  }


};
typedef _ProgressBarDispT<_ProgressBar> _ProgressBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_PropertyGrid
// Interface: _PropertyGrid
// *********************************************************************//
template <class T /* _PropertyGrid */ >
class TCOM_PropertyGridT : public TComInterface<_PropertyGrid>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PropertyGridT() {}
  TCOM_PropertyGridT(_PropertyGrid *intf, bool addRef = false) : TComInterface<_PropertyGrid>(intf, addRef) {}
  TCOM_PropertyGridT(const TCOM_PropertyGridT& src) : TComInterface<_PropertyGrid>(src) {}
  TCOM_PropertyGridT& operator=(const TCOM_PropertyGridT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PropertyGridT<_PropertyGrid> TCOM_PropertyGrid;

// *********************************************************************//
// DispIntf:  _PropertyGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C831618-60D7-32B2-9790-1EBDC5ADEFE5}
// *********************************************************************//
template<class T>
class _PropertyGridDispT : public TAutoDriver<_PropertyGrid>
{
public:
  _PropertyGridDispT(){}

  _PropertyGridDispT(_PropertyGrid *pintf)
  {
    TAutoDriver<_PropertyGrid>::Bind(pintf, false);
  }

  _PropertyGridDispT(_PropertyGridPtr pintf)
  {
    TAutoDriver<_PropertyGrid>::Bind(pintf, true);
  }

  _PropertyGridDispT& operator=(_PropertyGrid *pintf)
  {
    TAutoDriver<_PropertyGrid>::Bind(pintf, false);
    return *this;
  }

  _PropertyGridDispT& operator=(_PropertyGridPtr pintf)
  {
    TAutoDriver<_PropertyGrid>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyGrid));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyGrid);
  }


};
typedef _PropertyGridDispT<_PropertyGrid> _PropertyGridDisp;

// *********************************************************************//
// SmartIntf: TCOM_PropertyTabChangedEventArgs
// Interface: _PropertyTabChangedEventArgs
// *********************************************************************//
template <class T /* _PropertyTabChangedEventArgs */ >
class TCOM_PropertyTabChangedEventArgsT : public TComInterface<_PropertyTabChangedEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PropertyTabChangedEventArgsT() {}
  TCOM_PropertyTabChangedEventArgsT(_PropertyTabChangedEventArgs *intf, bool addRef = false) : TComInterface<_PropertyTabChangedEventArgs>(intf, addRef) {}
  TCOM_PropertyTabChangedEventArgsT(const TCOM_PropertyTabChangedEventArgsT& src) : TComInterface<_PropertyTabChangedEventArgs>(src) {}
  TCOM_PropertyTabChangedEventArgsT& operator=(const TCOM_PropertyTabChangedEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PropertyTabChangedEventArgsT<_PropertyTabChangedEventArgs> TCOM_PropertyTabChangedEventArgs;

// *********************************************************************//
// DispIntf:  _PropertyTabChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DB6FE495-8F5B-3C66-9A17-4C40D5593906}
// *********************************************************************//
template<class T>
class _PropertyTabChangedEventArgsDispT : public TAutoDriver<_PropertyTabChangedEventArgs>
{
public:
  _PropertyTabChangedEventArgsDispT(){}

  _PropertyTabChangedEventArgsDispT(_PropertyTabChangedEventArgs *pintf)
  {
    TAutoDriver<_PropertyTabChangedEventArgs>::Bind(pintf, false);
  }

  _PropertyTabChangedEventArgsDispT(_PropertyTabChangedEventArgsPtr pintf)
  {
    TAutoDriver<_PropertyTabChangedEventArgs>::Bind(pintf, true);
  }

  _PropertyTabChangedEventArgsDispT& operator=(_PropertyTabChangedEventArgs *pintf)
  {
    TAutoDriver<_PropertyTabChangedEventArgs>::Bind(pintf, false);
    return *this;
  }

  _PropertyTabChangedEventArgsDispT& operator=(_PropertyTabChangedEventArgsPtr pintf)
  {
    TAutoDriver<_PropertyTabChangedEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyTabChangedEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyTabChangedEventArgs);
  }


};
typedef _PropertyTabChangedEventArgsDispT<_PropertyTabChangedEventArgs> _PropertyTabChangedEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_PropertyValueChangedEventArgs
// Interface: _PropertyValueChangedEventArgs
// *********************************************************************//
template <class T /* _PropertyValueChangedEventArgs */ >
class TCOM_PropertyValueChangedEventArgsT : public TComInterface<_PropertyValueChangedEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PropertyValueChangedEventArgsT() {}
  TCOM_PropertyValueChangedEventArgsT(_PropertyValueChangedEventArgs *intf, bool addRef = false) : TComInterface<_PropertyValueChangedEventArgs>(intf, addRef) {}
  TCOM_PropertyValueChangedEventArgsT(const TCOM_PropertyValueChangedEventArgsT& src) : TComInterface<_PropertyValueChangedEventArgs>(src) {}
  TCOM_PropertyValueChangedEventArgsT& operator=(const TCOM_PropertyValueChangedEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PropertyValueChangedEventArgsT<_PropertyValueChangedEventArgs> TCOM_PropertyValueChangedEventArgs;

// *********************************************************************//
// DispIntf:  _PropertyValueChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6D43DF59-7EA8-300F-ACB2-760A070CFCF2}
// *********************************************************************//
template<class T>
class _PropertyValueChangedEventArgsDispT : public TAutoDriver<_PropertyValueChangedEventArgs>
{
public:
  _PropertyValueChangedEventArgsDispT(){}

  _PropertyValueChangedEventArgsDispT(_PropertyValueChangedEventArgs *pintf)
  {
    TAutoDriver<_PropertyValueChangedEventArgs>::Bind(pintf, false);
  }

  _PropertyValueChangedEventArgsDispT(_PropertyValueChangedEventArgsPtr pintf)
  {
    TAutoDriver<_PropertyValueChangedEventArgs>::Bind(pintf, true);
  }

  _PropertyValueChangedEventArgsDispT& operator=(_PropertyValueChangedEventArgs *pintf)
  {
    TAutoDriver<_PropertyValueChangedEventArgs>::Bind(pintf, false);
    return *this;
  }

  _PropertyValueChangedEventArgsDispT& operator=(_PropertyValueChangedEventArgsPtr pintf)
  {
    TAutoDriver<_PropertyValueChangedEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyValueChangedEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyValueChangedEventArgs);
  }


};
typedef _PropertyValueChangedEventArgsDispT<_PropertyValueChangedEventArgs> _PropertyValueChangedEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_QueryAccessibilityHelpEventArgs
// Interface: _QueryAccessibilityHelpEventArgs
// *********************************************************************//
template <class T /* _QueryAccessibilityHelpEventArgs */ >
class TCOM_QueryAccessibilityHelpEventArgsT : public TComInterface<_QueryAccessibilityHelpEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_QueryAccessibilityHelpEventArgsT() {}
  TCOM_QueryAccessibilityHelpEventArgsT(_QueryAccessibilityHelpEventArgs *intf, bool addRef = false) : TComInterface<_QueryAccessibilityHelpEventArgs>(intf, addRef) {}
  TCOM_QueryAccessibilityHelpEventArgsT(const TCOM_QueryAccessibilityHelpEventArgsT& src) : TComInterface<_QueryAccessibilityHelpEventArgs>(src) {}
  TCOM_QueryAccessibilityHelpEventArgsT& operator=(const TCOM_QueryAccessibilityHelpEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_QueryAccessibilityHelpEventArgsT<_QueryAccessibilityHelpEventArgs> TCOM_QueryAccessibilityHelpEventArgs;

// *********************************************************************//
// DispIntf:  _QueryAccessibilityHelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2FE9F084-1511-3052-BE7C-9010B522C10E}
// *********************************************************************//
template<class T>
class _QueryAccessibilityHelpEventArgsDispT : public TAutoDriver<_QueryAccessibilityHelpEventArgs>
{
public:
  _QueryAccessibilityHelpEventArgsDispT(){}

  _QueryAccessibilityHelpEventArgsDispT(_QueryAccessibilityHelpEventArgs *pintf)
  {
    TAutoDriver<_QueryAccessibilityHelpEventArgs>::Bind(pintf, false);
  }

  _QueryAccessibilityHelpEventArgsDispT(_QueryAccessibilityHelpEventArgsPtr pintf)
  {
    TAutoDriver<_QueryAccessibilityHelpEventArgs>::Bind(pintf, true);
  }

  _QueryAccessibilityHelpEventArgsDispT& operator=(_QueryAccessibilityHelpEventArgs *pintf)
  {
    TAutoDriver<_QueryAccessibilityHelpEventArgs>::Bind(pintf, false);
    return *this;
  }

  _QueryAccessibilityHelpEventArgsDispT& operator=(_QueryAccessibilityHelpEventArgsPtr pintf)
  {
    TAutoDriver<_QueryAccessibilityHelpEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryAccessibilityHelpEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryAccessibilityHelpEventArgs);
  }


};
typedef _QueryAccessibilityHelpEventArgsDispT<_QueryAccessibilityHelpEventArgs> _QueryAccessibilityHelpEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_RadioButton
// Interface: _RadioButton
// *********************************************************************//
template <class T /* _RadioButton */ >
class TCOM_RadioButtonT : public TComInterface<_RadioButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_RadioButtonT() {}
  TCOM_RadioButtonT(_RadioButton *intf, bool addRef = false) : TComInterface<_RadioButton>(intf, addRef) {}
  TCOM_RadioButtonT(const TCOM_RadioButtonT& src) : TComInterface<_RadioButton>(src) {}
  TCOM_RadioButtonT& operator=(const TCOM_RadioButtonT& src) { Bind(src, true); return *this;}


};
typedef TCOM_RadioButtonT<_RadioButton> TCOM_RadioButton;

// *********************************************************************//
// DispIntf:  _RadioButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E431682-BBDE-31B1-AE7F-9D8DD582BD0D}
// *********************************************************************//
template<class T>
class _RadioButtonDispT : public TAutoDriver<_RadioButton>
{
public:
  _RadioButtonDispT(){}

  _RadioButtonDispT(_RadioButton *pintf)
  {
    TAutoDriver<_RadioButton>::Bind(pintf, false);
  }

  _RadioButtonDispT(_RadioButtonPtr pintf)
  {
    TAutoDriver<_RadioButton>::Bind(pintf, true);
  }

  _RadioButtonDispT& operator=(_RadioButton *pintf)
  {
    TAutoDriver<_RadioButton>::Bind(pintf, false);
    return *this;
  }

  _RadioButtonDispT& operator=(_RadioButtonPtr pintf)
  {
    TAutoDriver<_RadioButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioButton);
  }


};
typedef _RadioButtonDispT<_RadioButton> _RadioButtonDisp;

// *********************************************************************//
// SmartIntf: TCOM_RadioButtonAccessibleObject
// Interface: _RadioButtonAccessibleObject
// *********************************************************************//
template <class T /* _RadioButtonAccessibleObject */ >
class TCOM_RadioButtonAccessibleObjectT : public TComInterface<_RadioButtonAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_RadioButtonAccessibleObjectT() {}
  TCOM_RadioButtonAccessibleObjectT(_RadioButtonAccessibleObject *intf, bool addRef = false) : TComInterface<_RadioButtonAccessibleObject>(intf, addRef) {}
  TCOM_RadioButtonAccessibleObjectT(const TCOM_RadioButtonAccessibleObjectT& src) : TComInterface<_RadioButtonAccessibleObject>(src) {}
  TCOM_RadioButtonAccessibleObjectT& operator=(const TCOM_RadioButtonAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_RadioButtonAccessibleObjectT<_RadioButtonAccessibleObject> TCOM_RadioButtonAccessibleObject;

// *********************************************************************//
// DispIntf:  _RadioButtonAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EDC3C736-47FD-3F25-90E4-123234D64FD4}
// *********************************************************************//
template<class T>
class _RadioButtonAccessibleObjectDispT : public TAutoDriver<_RadioButtonAccessibleObject>
{
public:
  _RadioButtonAccessibleObjectDispT(){}

  _RadioButtonAccessibleObjectDispT(_RadioButtonAccessibleObject *pintf)
  {
    TAutoDriver<_RadioButtonAccessibleObject>::Bind(pintf, false);
  }

  _RadioButtonAccessibleObjectDispT(_RadioButtonAccessibleObjectPtr pintf)
  {
    TAutoDriver<_RadioButtonAccessibleObject>::Bind(pintf, true);
  }

  _RadioButtonAccessibleObjectDispT& operator=(_RadioButtonAccessibleObject *pintf)
  {
    TAutoDriver<_RadioButtonAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _RadioButtonAccessibleObjectDispT& operator=(_RadioButtonAccessibleObjectPtr pintf)
  {
    TAutoDriver<_RadioButtonAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioButtonAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioButtonAccessibleObject);
  }


};
typedef _RadioButtonAccessibleObjectDispT<_RadioButtonAccessibleObject> _RadioButtonAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_RichTextBox
// Interface: _RichTextBox
// *********************************************************************//
template <class T /* _RichTextBox */ >
class TCOM_RichTextBoxT : public TComInterface<_RichTextBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_RichTextBoxT() {}
  TCOM_RichTextBoxT(_RichTextBox *intf, bool addRef = false) : TComInterface<_RichTextBox>(intf, addRef) {}
  TCOM_RichTextBoxT(const TCOM_RichTextBoxT& src) : TComInterface<_RichTextBox>(src) {}
  TCOM_RichTextBoxT& operator=(const TCOM_RichTextBoxT& src) { Bind(src, true); return *this;}


};
typedef TCOM_RichTextBoxT<_RichTextBox> TCOM_RichTextBox;

// *********************************************************************//
// DispIntf:  _RichTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B264763-A1C7-3441-9D61-7EDAEC2D0C44}
// *********************************************************************//
template<class T>
class _RichTextBoxDispT : public TAutoDriver<_RichTextBox>
{
public:
  _RichTextBoxDispT(){}

  _RichTextBoxDispT(_RichTextBox *pintf)
  {
    TAutoDriver<_RichTextBox>::Bind(pintf, false);
  }

  _RichTextBoxDispT(_RichTextBoxPtr pintf)
  {
    TAutoDriver<_RichTextBox>::Bind(pintf, true);
  }

  _RichTextBoxDispT& operator=(_RichTextBox *pintf)
  {
    TAutoDriver<_RichTextBox>::Bind(pintf, false);
    return *this;
  }

  _RichTextBoxDispT& operator=(_RichTextBoxPtr pintf)
  {
    TAutoDriver<_RichTextBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RichTextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RichTextBox);
  }


};
typedef _RichTextBoxDispT<_RichTextBox> _RichTextBoxDisp;

// *********************************************************************//
// SmartIntf: TCOM_SplitContainer
// Interface: _SplitContainer
// *********************************************************************//
template <class T /* _SplitContainer */ >
class TCOM_SplitContainerT : public TComInterface<_SplitContainer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SplitContainerT() {}
  TCOM_SplitContainerT(_SplitContainer *intf, bool addRef = false) : TComInterface<_SplitContainer>(intf, addRef) {}
  TCOM_SplitContainerT(const TCOM_SplitContainerT& src) : TComInterface<_SplitContainer>(src) {}
  TCOM_SplitContainerT& operator=(const TCOM_SplitContainerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_SplitContainerT<_SplitContainer> TCOM_SplitContainer;

// *********************************************************************//
// DispIntf:  _SplitContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C1DA069E-4C0B-3664-BBA1-F81864825085}
// *********************************************************************//
template<class T>
class _SplitContainerDispT : public TAutoDriver<_SplitContainer>
{
public:
  _SplitContainerDispT(){}

  _SplitContainerDispT(_SplitContainer *pintf)
  {
    TAutoDriver<_SplitContainer>::Bind(pintf, false);
  }

  _SplitContainerDispT(_SplitContainerPtr pintf)
  {
    TAutoDriver<_SplitContainer>::Bind(pintf, true);
  }

  _SplitContainerDispT& operator=(_SplitContainer *pintf)
  {
    TAutoDriver<_SplitContainer>::Bind(pintf, false);
    return *this;
  }

  _SplitContainerDispT& operator=(_SplitContainerPtr pintf)
  {
    TAutoDriver<_SplitContainer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SplitContainer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SplitContainer);
  }


};
typedef _SplitContainerDispT<_SplitContainer> _SplitContainerDisp;

// *********************************************************************//
// SmartIntf: TCOM_SplitterPanel
// Interface: _SplitterPanel
// *********************************************************************//
template <class T /* _SplitterPanel */ >
class TCOM_SplitterPanelT : public TComInterface<_SplitterPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SplitterPanelT() {}
  TCOM_SplitterPanelT(_SplitterPanel *intf, bool addRef = false) : TComInterface<_SplitterPanel>(intf, addRef) {}
  TCOM_SplitterPanelT(const TCOM_SplitterPanelT& src) : TComInterface<_SplitterPanel>(src) {}
  TCOM_SplitterPanelT& operator=(const TCOM_SplitterPanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_SplitterPanelT<_SplitterPanel> TCOM_SplitterPanel;

// *********************************************************************//
// DispIntf:  _SplitterPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A4C8B1A-4AF9-344A-BC88-DFE863328C86}
// *********************************************************************//
template<class T>
class _SplitterPanelDispT : public TAutoDriver<_SplitterPanel>
{
public:
  _SplitterPanelDispT(){}

  _SplitterPanelDispT(_SplitterPanel *pintf)
  {
    TAutoDriver<_SplitterPanel>::Bind(pintf, false);
  }

  _SplitterPanelDispT(_SplitterPanelPtr pintf)
  {
    TAutoDriver<_SplitterPanel>::Bind(pintf, true);
  }

  _SplitterPanelDispT& operator=(_SplitterPanel *pintf)
  {
    TAutoDriver<_SplitterPanel>::Bind(pintf, false);
    return *this;
  }

  _SplitterPanelDispT& operator=(_SplitterPanelPtr pintf)
  {
    TAutoDriver<_SplitterPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SplitterPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SplitterPanel);
  }


};
typedef _SplitterPanelDispT<_SplitterPanel> _SplitterPanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_SplitterEventArgs
// Interface: _SplitterEventArgs
// *********************************************************************//
template <class T /* _SplitterEventArgs */ >
class TCOM_SplitterEventArgsT : public TComInterface<_SplitterEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SplitterEventArgsT() {}
  TCOM_SplitterEventArgsT(_SplitterEventArgs *intf, bool addRef = false) : TComInterface<_SplitterEventArgs>(intf, addRef) {}
  TCOM_SplitterEventArgsT(const TCOM_SplitterEventArgsT& src) : TComInterface<_SplitterEventArgs>(src) {}
  TCOM_SplitterEventArgsT& operator=(const TCOM_SplitterEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_SplitterEventArgsT<_SplitterEventArgs> TCOM_SplitterEventArgs;

// *********************************************************************//
// DispIntf:  _SplitterEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E61AD1D-76AE-3501-9B36-481BFEBD3E3E}
// *********************************************************************//
template<class T>
class _SplitterEventArgsDispT : public TAutoDriver<_SplitterEventArgs>
{
public:
  _SplitterEventArgsDispT(){}

  _SplitterEventArgsDispT(_SplitterEventArgs *pintf)
  {
    TAutoDriver<_SplitterEventArgs>::Bind(pintf, false);
  }

  _SplitterEventArgsDispT(_SplitterEventArgsPtr pintf)
  {
    TAutoDriver<_SplitterEventArgs>::Bind(pintf, true);
  }

  _SplitterEventArgsDispT& operator=(_SplitterEventArgs *pintf)
  {
    TAutoDriver<_SplitterEventArgs>::Bind(pintf, false);
    return *this;
  }

  _SplitterEventArgsDispT& operator=(_SplitterEventArgsPtr pintf)
  {
    TAutoDriver<_SplitterEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SplitterEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SplitterEventArgs);
  }


};
typedef _SplitterEventArgsDispT<_SplitterEventArgs> _SplitterEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Splitter
// Interface: _Splitter
// *********************************************************************//
template <class T /* _Splitter */ >
class TCOM_SplitterT : public TComInterface<_Splitter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SplitterT() {}
  TCOM_SplitterT(_Splitter *intf, bool addRef = false) : TComInterface<_Splitter>(intf, addRef) {}
  TCOM_SplitterT(const TCOM_SplitterT& src) : TComInterface<_Splitter>(src) {}
  TCOM_SplitterT& operator=(const TCOM_SplitterT& src) { Bind(src, true); return *this;}


};
typedef TCOM_SplitterT<_Splitter> TCOM_Splitter;

// *********************************************************************//
// DispIntf:  _Splitter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C318A56D-0B03-3A5A-93F6-7DF0B3268237}
// *********************************************************************//
template<class T>
class _SplitterDispT : public TAutoDriver<_Splitter>
{
public:
  _SplitterDispT(){}

  _SplitterDispT(_Splitter *pintf)
  {
    TAutoDriver<_Splitter>::Bind(pintf, false);
  }

  _SplitterDispT(_SplitterPtr pintf)
  {
    TAutoDriver<_Splitter>::Bind(pintf, true);
  }

  _SplitterDispT& operator=(_Splitter *pintf)
  {
    TAutoDriver<_Splitter>::Bind(pintf, false);
    return *this;
  }

  _SplitterDispT& operator=(_SplitterPtr pintf)
  {
    TAutoDriver<_Splitter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Splitter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Splitter);
  }


};
typedef _SplitterDispT<_Splitter> _SplitterDisp;

// *********************************************************************//
// SmartIntf: TCOM_StatusBar
// Interface: _StatusBar
// *********************************************************************//
template <class T /* _StatusBar */ >
class TCOM_StatusBarT : public TComInterface<_StatusBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_StatusBarT() {}
  TCOM_StatusBarT(_StatusBar *intf, bool addRef = false) : TComInterface<_StatusBar>(intf, addRef) {}
  TCOM_StatusBarT(const TCOM_StatusBarT& src) : TComInterface<_StatusBar>(src) {}
  TCOM_StatusBarT& operator=(const TCOM_StatusBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_StatusBarT<_StatusBar> TCOM_StatusBar;

// *********************************************************************//
// DispIntf:  _StatusBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93409DA8-FE37-3D4E-9A08-B35B34122C64}
// *********************************************************************//
template<class T>
class _StatusBarDispT : public TAutoDriver<_StatusBar>
{
public:
  _StatusBarDispT(){}

  _StatusBarDispT(_StatusBar *pintf)
  {
    TAutoDriver<_StatusBar>::Bind(pintf, false);
  }

  _StatusBarDispT(_StatusBarPtr pintf)
  {
    TAutoDriver<_StatusBar>::Bind(pintf, true);
  }

  _StatusBarDispT& operator=(_StatusBar *pintf)
  {
    TAutoDriver<_StatusBar>::Bind(pintf, false);
    return *this;
  }

  _StatusBarDispT& operator=(_StatusBarPtr pintf)
  {
    TAutoDriver<_StatusBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StatusBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StatusBar);
  }


};
typedef _StatusBarDispT<_StatusBar> _StatusBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_StatusStrip
// Interface: _StatusStrip
// *********************************************************************//
template <class T /* _StatusStrip */ >
class TCOM_StatusStripT : public TComInterface<_StatusStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_StatusStripT() {}
  TCOM_StatusStripT(_StatusStrip *intf, bool addRef = false) : TComInterface<_StatusStrip>(intf, addRef) {}
  TCOM_StatusStripT(const TCOM_StatusStripT& src) : TComInterface<_StatusStrip>(src) {}
  TCOM_StatusStripT& operator=(const TCOM_StatusStripT& src) { Bind(src, true); return *this;}


};
typedef TCOM_StatusStripT<_StatusStrip> TCOM_StatusStrip;

// *********************************************************************//
// DispIntf:  _StatusStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {71CA209D-40D3-3409-B341-DA9B922CCA45}
// *********************************************************************//
template<class T>
class _StatusStripDispT : public TAutoDriver<_StatusStrip>
{
public:
  _StatusStripDispT(){}

  _StatusStripDispT(_StatusStrip *pintf)
  {
    TAutoDriver<_StatusStrip>::Bind(pintf, false);
  }

  _StatusStripDispT(_StatusStripPtr pintf)
  {
    TAutoDriver<_StatusStrip>::Bind(pintf, true);
  }

  _StatusStripDispT& operator=(_StatusStrip *pintf)
  {
    TAutoDriver<_StatusStrip>::Bind(pintf, false);
    return *this;
  }

  _StatusStripDispT& operator=(_StatusStripPtr pintf)
  {
    TAutoDriver<_StatusStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StatusStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StatusStrip);
  }


};
typedef _StatusStripDispT<_StatusStrip> _StatusStripDisp;

// *********************************************************************//
// SmartIntf: TCOM_TabControl
// Interface: _TabControl
// *********************************************************************//
template <class T /* _TabControl */ >
class TCOM_TabControlT : public TComInterface<_TabControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TabControlT() {}
  TCOM_TabControlT(_TabControl *intf, bool addRef = false) : TComInterface<_TabControl>(intf, addRef) {}
  TCOM_TabControlT(const TCOM_TabControlT& src) : TComInterface<_TabControl>(src) {}
  TCOM_TabControlT& operator=(const TCOM_TabControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TabControlT<_TabControl> TCOM_TabControl;

// *********************************************************************//
// DispIntf:  _TabControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {470DE738-5261-302A-B205-4744652D2FD3}
// *********************************************************************//
template<class T>
class _TabControlDispT : public TAutoDriver<_TabControl>
{
public:
  _TabControlDispT(){}

  _TabControlDispT(_TabControl *pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, false);
  }

  _TabControlDispT(_TabControlPtr pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, true);
  }

  _TabControlDispT& operator=(_TabControl *pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, false);
    return *this;
  }

  _TabControlDispT& operator=(_TabControlPtr pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TabControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TabControl);
  }


};
typedef _TabControlDispT<_TabControl> _TabControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_TabPage
// Interface: _TabPage
// *********************************************************************//
template <class T /* _TabPage */ >
class TCOM_TabPageT : public TComInterface<_TabPage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TabPageT() {}
  TCOM_TabPageT(_TabPage *intf, bool addRef = false) : TComInterface<_TabPage>(intf, addRef) {}
  TCOM_TabPageT(const TCOM_TabPageT& src) : TComInterface<_TabPage>(src) {}
  TCOM_TabPageT& operator=(const TCOM_TabPageT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TabPageT<_TabPage> TCOM_TabPage;

// *********************************************************************//
// DispIntf:  _TabPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59183431-BD56-33D2-A2ED-FA414ADF8DCB}
// *********************************************************************//
template<class T>
class _TabPageDispT : public TAutoDriver<_TabPage>
{
public:
  _TabPageDispT(){}

  _TabPageDispT(_TabPage *pintf)
  {
    TAutoDriver<_TabPage>::Bind(pintf, false);
  }

  _TabPageDispT(_TabPagePtr pintf)
  {
    TAutoDriver<_TabPage>::Bind(pintf, true);
  }

  _TabPageDispT& operator=(_TabPage *pintf)
  {
    TAutoDriver<_TabPage>::Bind(pintf, false);
    return *this;
  }

  _TabPageDispT& operator=(_TabPagePtr pintf)
  {
    TAutoDriver<_TabPage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TabPage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TabPage);
  }


};
typedef _TabPageDispT<_TabPage> _TabPageDisp;

// *********************************************************************//
// SmartIntf: TCOM_TableLayoutPanel
// Interface: _TableLayoutPanel
// *********************************************************************//
template <class T /* _TableLayoutPanel */ >
class TCOM_TableLayoutPanelT : public TComInterface<_TableLayoutPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TableLayoutPanelT() {}
  TCOM_TableLayoutPanelT(_TableLayoutPanel *intf, bool addRef = false) : TComInterface<_TableLayoutPanel>(intf, addRef) {}
  TCOM_TableLayoutPanelT(const TCOM_TableLayoutPanelT& src) : TComInterface<_TableLayoutPanel>(src) {}
  TCOM_TableLayoutPanelT& operator=(const TCOM_TableLayoutPanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TableLayoutPanelT<_TableLayoutPanel> TCOM_TableLayoutPanel;

// *********************************************************************//
// DispIntf:  _TableLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05CBE5B2-0292-37DE-BE51-5B7599CA5A11}
// *********************************************************************//
template<class T>
class _TableLayoutPanelDispT : public TAutoDriver<_TableLayoutPanel>
{
public:
  _TableLayoutPanelDispT(){}

  _TableLayoutPanelDispT(_TableLayoutPanel *pintf)
  {
    TAutoDriver<_TableLayoutPanel>::Bind(pintf, false);
  }

  _TableLayoutPanelDispT(_TableLayoutPanelPtr pintf)
  {
    TAutoDriver<_TableLayoutPanel>::Bind(pintf, true);
  }

  _TableLayoutPanelDispT& operator=(_TableLayoutPanel *pintf)
  {
    TAutoDriver<_TableLayoutPanel>::Bind(pintf, false);
    return *this;
  }

  _TableLayoutPanelDispT& operator=(_TableLayoutPanelPtr pintf)
  {
    TAutoDriver<_TableLayoutPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TableLayoutPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TableLayoutPanel);
  }


};
typedef _TableLayoutPanelDispT<_TableLayoutPanel> _TableLayoutPanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_ThreadExceptionDialog
// Interface: _ThreadExceptionDialog
// *********************************************************************//
template <class T /* _ThreadExceptionDialog */ >
class TCOM_ThreadExceptionDialogT : public TComInterface<_ThreadExceptionDialog>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ThreadExceptionDialogT() {}
  TCOM_ThreadExceptionDialogT(_ThreadExceptionDialog *intf, bool addRef = false) : TComInterface<_ThreadExceptionDialog>(intf, addRef) {}
  TCOM_ThreadExceptionDialogT(const TCOM_ThreadExceptionDialogT& src) : TComInterface<_ThreadExceptionDialog>(src) {}
  TCOM_ThreadExceptionDialogT& operator=(const TCOM_ThreadExceptionDialogT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ThreadExceptionDialogT<_ThreadExceptionDialog> TCOM_ThreadExceptionDialog;

// *********************************************************************//
// DispIntf:  _ThreadExceptionDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B00AA2F6-4D83-3937-B4AC-4C2C2C3F6C70}
// *********************************************************************//
template<class T>
class _ThreadExceptionDialogDispT : public TAutoDriver<_ThreadExceptionDialog>
{
public:
  _ThreadExceptionDialogDispT(){}

  _ThreadExceptionDialogDispT(_ThreadExceptionDialog *pintf)
  {
    TAutoDriver<_ThreadExceptionDialog>::Bind(pintf, false);
  }

  _ThreadExceptionDialogDispT(_ThreadExceptionDialogPtr pintf)
  {
    TAutoDriver<_ThreadExceptionDialog>::Bind(pintf, true);
  }

  _ThreadExceptionDialogDispT& operator=(_ThreadExceptionDialog *pintf)
  {
    TAutoDriver<_ThreadExceptionDialog>::Bind(pintf, false);
    return *this;
  }

  _ThreadExceptionDialogDispT& operator=(_ThreadExceptionDialogPtr pintf)
  {
    TAutoDriver<_ThreadExceptionDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ThreadExceptionDialog));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ThreadExceptionDialog);
  }


};
typedef _ThreadExceptionDialogDispT<_ThreadExceptionDialog> _ThreadExceptionDialogDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolBar
// Interface: _ToolBar
// *********************************************************************//
template <class T /* _ToolBar */ >
class TCOM_ToolBarT : public TComInterface<_ToolBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolBarT() {}
  TCOM_ToolBarT(_ToolBar *intf, bool addRef = false) : TComInterface<_ToolBar>(intf, addRef) {}
  TCOM_ToolBarT(const TCOM_ToolBarT& src) : TComInterface<_ToolBar>(src) {}
  TCOM_ToolBarT& operator=(const TCOM_ToolBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolBarT<_ToolBar> TCOM_ToolBar;

// *********************************************************************//
// DispIntf:  _ToolBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F6AB38B6-1C02-3B01-A7F8-510ED1C0B253}
// *********************************************************************//
template<class T>
class _ToolBarDispT : public TAutoDriver<_ToolBar>
{
public:
  _ToolBarDispT(){}

  _ToolBarDispT(_ToolBar *pintf)
  {
    TAutoDriver<_ToolBar>::Bind(pintf, false);
  }

  _ToolBarDispT(_ToolBarPtr pintf)
  {
    TAutoDriver<_ToolBar>::Bind(pintf, true);
  }

  _ToolBarDispT& operator=(_ToolBar *pintf)
  {
    TAutoDriver<_ToolBar>::Bind(pintf, false);
    return *this;
  }

  _ToolBarDispT& operator=(_ToolBarPtr pintf)
  {
    TAutoDriver<_ToolBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolBar);
  }


};
typedef _ToolBarDispT<_ToolBar> _ToolBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripAccessibleObject
// Interface: _ToolStripAccessibleObject
// *********************************************************************//
template <class T /* _ToolStripAccessibleObject */ >
class TCOM_ToolStripAccessibleObjectT : public TComInterface<_ToolStripAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripAccessibleObjectT() {}
  TCOM_ToolStripAccessibleObjectT(_ToolStripAccessibleObject *intf, bool addRef = false) : TComInterface<_ToolStripAccessibleObject>(intf, addRef) {}
  TCOM_ToolStripAccessibleObjectT(const TCOM_ToolStripAccessibleObjectT& src) : TComInterface<_ToolStripAccessibleObject>(src) {}
  TCOM_ToolStripAccessibleObjectT& operator=(const TCOM_ToolStripAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripAccessibleObjectT<_ToolStripAccessibleObject> TCOM_ToolStripAccessibleObject;

// *********************************************************************//
// DispIntf:  _ToolStripAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F7A7383-2ABE-39D6-85F6-7117ED41979C}
// *********************************************************************//
template<class T>
class _ToolStripAccessibleObjectDispT : public TAutoDriver<_ToolStripAccessibleObject>
{
public:
  _ToolStripAccessibleObjectDispT(){}

  _ToolStripAccessibleObjectDispT(_ToolStripAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripAccessibleObject>::Bind(pintf, false);
  }

  _ToolStripAccessibleObjectDispT(_ToolStripAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripAccessibleObject>::Bind(pintf, true);
  }

  _ToolStripAccessibleObjectDispT& operator=(_ToolStripAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ToolStripAccessibleObjectDispT& operator=(_ToolStripAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripAccessibleObject);
  }


};
typedef _ToolStripAccessibleObjectDispT<_ToolStripAccessibleObject> _ToolStripAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripContainer
// Interface: _ToolStripContainer
// *********************************************************************//
template <class T /* _ToolStripContainer */ >
class TCOM_ToolStripContainerT : public TComInterface<_ToolStripContainer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripContainerT() {}
  TCOM_ToolStripContainerT(_ToolStripContainer *intf, bool addRef = false) : TComInterface<_ToolStripContainer>(intf, addRef) {}
  TCOM_ToolStripContainerT(const TCOM_ToolStripContainerT& src) : TComInterface<_ToolStripContainer>(src) {}
  TCOM_ToolStripContainerT& operator=(const TCOM_ToolStripContainerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripContainerT<_ToolStripContainer> TCOM_ToolStripContainer;

// *********************************************************************//
// DispIntf:  _ToolStripContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2A42F137-D50D-3D62-AF58-4DF7A4F57C9B}
// *********************************************************************//
template<class T>
class _ToolStripContainerDispT : public TAutoDriver<_ToolStripContainer>
{
public:
  _ToolStripContainerDispT(){}

  _ToolStripContainerDispT(_ToolStripContainer *pintf)
  {
    TAutoDriver<_ToolStripContainer>::Bind(pintf, false);
  }

  _ToolStripContainerDispT(_ToolStripContainerPtr pintf)
  {
    TAutoDriver<_ToolStripContainer>::Bind(pintf, true);
  }

  _ToolStripContainerDispT& operator=(_ToolStripContainer *pintf)
  {
    TAutoDriver<_ToolStripContainer>::Bind(pintf, false);
    return *this;
  }

  _ToolStripContainerDispT& operator=(_ToolStripContainerPtr pintf)
  {
    TAutoDriver<_ToolStripContainer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripContainer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripContainer);
  }


};
typedef _ToolStripContainerDispT<_ToolStripContainer> _ToolStripContainerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripPanel
// Interface: _ToolStripPanel
// *********************************************************************//
template <class T /* _ToolStripPanel */ >
class TCOM_ToolStripPanelT : public TComInterface<_ToolStripPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripPanelT() {}
  TCOM_ToolStripPanelT(_ToolStripPanel *intf, bool addRef = false) : TComInterface<_ToolStripPanel>(intf, addRef) {}
  TCOM_ToolStripPanelT(const TCOM_ToolStripPanelT& src) : TComInterface<_ToolStripPanel>(src) {}
  TCOM_ToolStripPanelT& operator=(const TCOM_ToolStripPanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripPanelT<_ToolStripPanel> TCOM_ToolStripPanel;

// *********************************************************************//
// DispIntf:  _ToolStripPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FB97C26A-FB56-3F71-BBC4-B1377E7B142D}
// *********************************************************************//
template<class T>
class _ToolStripPanelDispT : public TAutoDriver<_ToolStripPanel>
{
public:
  _ToolStripPanelDispT(){}

  _ToolStripPanelDispT(_ToolStripPanel *pintf)
  {
    TAutoDriver<_ToolStripPanel>::Bind(pintf, false);
  }

  _ToolStripPanelDispT(_ToolStripPanelPtr pintf)
  {
    TAutoDriver<_ToolStripPanel>::Bind(pintf, true);
  }

  _ToolStripPanelDispT& operator=(_ToolStripPanel *pintf)
  {
    TAutoDriver<_ToolStripPanel>::Bind(pintf, false);
    return *this;
  }

  _ToolStripPanelDispT& operator=(_ToolStripPanelPtr pintf)
  {
    TAutoDriver<_ToolStripPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripPanel);
  }


};
typedef _ToolStripPanelDispT<_ToolStripPanel> _ToolStripPanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripContentPanel
// Interface: _ToolStripContentPanel
// *********************************************************************//
template <class T /* _ToolStripContentPanel */ >
class TCOM_ToolStripContentPanelT : public TComInterface<_ToolStripContentPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripContentPanelT() {}
  TCOM_ToolStripContentPanelT(_ToolStripContentPanel *intf, bool addRef = false) : TComInterface<_ToolStripContentPanel>(intf, addRef) {}
  TCOM_ToolStripContentPanelT(const TCOM_ToolStripContentPanelT& src) : TComInterface<_ToolStripContentPanel>(src) {}
  TCOM_ToolStripContentPanelT& operator=(const TCOM_ToolStripContentPanelT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripContentPanelT<_ToolStripContentPanel> TCOM_ToolStripContentPanel;

// *********************************************************************//
// DispIntf:  _ToolStripContentPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6EE3853E-DDEF-3F29-8F1B-1ED7180D9229}
// *********************************************************************//
template<class T>
class _ToolStripContentPanelDispT : public TAutoDriver<_ToolStripContentPanel>
{
public:
  _ToolStripContentPanelDispT(){}

  _ToolStripContentPanelDispT(_ToolStripContentPanel *pintf)
  {
    TAutoDriver<_ToolStripContentPanel>::Bind(pintf, false);
  }

  _ToolStripContentPanelDispT(_ToolStripContentPanelPtr pintf)
  {
    TAutoDriver<_ToolStripContentPanel>::Bind(pintf, true);
  }

  _ToolStripContentPanelDispT& operator=(_ToolStripContentPanel *pintf)
  {
    TAutoDriver<_ToolStripContentPanel>::Bind(pintf, false);
    return *this;
  }

  _ToolStripContentPanelDispT& operator=(_ToolStripContentPanelPtr pintf)
  {
    TAutoDriver<_ToolStripContentPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripContentPanel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripContentPanel);
  }


};
typedef _ToolStripContentPanelDispT<_ToolStripContentPanel> _ToolStripContentPanelDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDown
// Interface: _ToolStripDropDown
// *********************************************************************//
template <class T /* _ToolStripDropDown */ >
class TCOM_ToolStripDropDownT : public TComInterface<_ToolStripDropDown>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripDropDownT() {}
  TCOM_ToolStripDropDownT(_ToolStripDropDown *intf, bool addRef = false) : TComInterface<_ToolStripDropDown>(intf, addRef) {}
  TCOM_ToolStripDropDownT(const TCOM_ToolStripDropDownT& src) : TComInterface<_ToolStripDropDown>(src) {}
  TCOM_ToolStripDropDownT& operator=(const TCOM_ToolStripDropDownT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripDropDownT<_ToolStripDropDown> TCOM_ToolStripDropDown;

// *********************************************************************//
// DispIntf:  _ToolStripDropDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C2322B43-25B3-3B30-B3DB-67E4DA2E6533}
// *********************************************************************//
template<class T>
class _ToolStripDropDownDispT : public TAutoDriver<_ToolStripDropDown>
{
public:
  _ToolStripDropDownDispT(){}

  _ToolStripDropDownDispT(_ToolStripDropDown *pintf)
  {
    TAutoDriver<_ToolStripDropDown>::Bind(pintf, false);
  }

  _ToolStripDropDownDispT(_ToolStripDropDownPtr pintf)
  {
    TAutoDriver<_ToolStripDropDown>::Bind(pintf, true);
  }

  _ToolStripDropDownDispT& operator=(_ToolStripDropDown *pintf)
  {
    TAutoDriver<_ToolStripDropDown>::Bind(pintf, false);
    return *this;
  }

  _ToolStripDropDownDispT& operator=(_ToolStripDropDownPtr pintf)
  {
    TAutoDriver<_ToolStripDropDown>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripDropDown));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripDropDown);
  }


};
typedef _ToolStripDropDownDispT<_ToolStripDropDown> _ToolStripDropDownDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDownAccessibleObject
// Interface: _ToolStripDropDownAccessibleObject
// *********************************************************************//
template <class T /* _ToolStripDropDownAccessibleObject */ >
class TCOM_ToolStripDropDownAccessibleObjectT : public TComInterface<_ToolStripDropDownAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripDropDownAccessibleObjectT() {}
  TCOM_ToolStripDropDownAccessibleObjectT(_ToolStripDropDownAccessibleObject *intf, bool addRef = false) : TComInterface<_ToolStripDropDownAccessibleObject>(intf, addRef) {}
  TCOM_ToolStripDropDownAccessibleObjectT(const TCOM_ToolStripDropDownAccessibleObjectT& src) : TComInterface<_ToolStripDropDownAccessibleObject>(src) {}
  TCOM_ToolStripDropDownAccessibleObjectT& operator=(const TCOM_ToolStripDropDownAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripDropDownAccessibleObjectT<_ToolStripDropDownAccessibleObject> TCOM_ToolStripDropDownAccessibleObject;

// *********************************************************************//
// DispIntf:  _ToolStripDropDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF0D9304-0E85-3FFC-8283-6F291F32EE61}
// *********************************************************************//
template<class T>
class _ToolStripDropDownAccessibleObjectDispT : public TAutoDriver<_ToolStripDropDownAccessibleObject>
{
public:
  _ToolStripDropDownAccessibleObjectDispT(){}

  _ToolStripDropDownAccessibleObjectDispT(_ToolStripDropDownAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripDropDownAccessibleObject>::Bind(pintf, false);
  }

  _ToolStripDropDownAccessibleObjectDispT(_ToolStripDropDownAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripDropDownAccessibleObject>::Bind(pintf, true);
  }

  _ToolStripDropDownAccessibleObjectDispT& operator=(_ToolStripDropDownAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripDropDownAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ToolStripDropDownAccessibleObjectDispT& operator=(_ToolStripDropDownAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripDropDownAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripDropDownAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripDropDownAccessibleObject);
  }


};
typedef _ToolStripDropDownAccessibleObjectDispT<_ToolStripDropDownAccessibleObject> _ToolStripDropDownAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripItemAccessibleObject
// Interface: _ToolStripItemAccessibleObject
// *********************************************************************//
template <class T /* _ToolStripItemAccessibleObject */ >
class TCOM_ToolStripItemAccessibleObjectT : public TComInterface<_ToolStripItemAccessibleObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripItemAccessibleObjectT() {}
  TCOM_ToolStripItemAccessibleObjectT(_ToolStripItemAccessibleObject *intf, bool addRef = false) : TComInterface<_ToolStripItemAccessibleObject>(intf, addRef) {}
  TCOM_ToolStripItemAccessibleObjectT(const TCOM_ToolStripItemAccessibleObjectT& src) : TComInterface<_ToolStripItemAccessibleObject>(src) {}
  TCOM_ToolStripItemAccessibleObjectT& operator=(const TCOM_ToolStripItemAccessibleObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripItemAccessibleObjectT<_ToolStripItemAccessibleObject> TCOM_ToolStripItemAccessibleObject;

// *********************************************************************//
// DispIntf:  _ToolStripItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD9748A-D04F-3DFB-96A8-5624290F4554}
// *********************************************************************//
template<class T>
class _ToolStripItemAccessibleObjectDispT : public TAutoDriver<_ToolStripItemAccessibleObject>
{
public:
  _ToolStripItemAccessibleObjectDispT(){}

  _ToolStripItemAccessibleObjectDispT(_ToolStripItemAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripItemAccessibleObject>::Bind(pintf, false);
  }

  _ToolStripItemAccessibleObjectDispT(_ToolStripItemAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripItemAccessibleObject>::Bind(pintf, true);
  }

  _ToolStripItemAccessibleObjectDispT& operator=(_ToolStripItemAccessibleObject *pintf)
  {
    TAutoDriver<_ToolStripItemAccessibleObject>::Bind(pintf, false);
    return *this;
  }

  _ToolStripItemAccessibleObjectDispT& operator=(_ToolStripItemAccessibleObjectPtr pintf)
  {
    TAutoDriver<_ToolStripItemAccessibleObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripItemAccessibleObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripItemAccessibleObject);
  }


};
typedef _ToolStripItemAccessibleObjectDispT<_ToolStripItemAccessibleObject> _ToolStripItemAccessibleObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_ToolStripOverflow
// Interface: _ToolStripOverflow
// *********************************************************************//
template <class T /* _ToolStripOverflow */ >
class TCOM_ToolStripOverflowT : public TComInterface<_ToolStripOverflow>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToolStripOverflowT() {}
  TCOM_ToolStripOverflowT(_ToolStripOverflow *intf, bool addRef = false) : TComInterface<_ToolStripOverflow>(intf, addRef) {}
  TCOM_ToolStripOverflowT(const TCOM_ToolStripOverflowT& src) : TComInterface<_ToolStripOverflow>(src) {}
  TCOM_ToolStripOverflowT& operator=(const TCOM_ToolStripOverflowT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ToolStripOverflowT<_ToolStripOverflow> TCOM_ToolStripOverflow;

// *********************************************************************//
// DispIntf:  _ToolStripOverflow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75781CE7-317D-3C54-95D4-3E4DC04B4D3F}
// *********************************************************************//
template<class T>
class _ToolStripOverflowDispT : public TAutoDriver<_ToolStripOverflow>
{
public:
  _ToolStripOverflowDispT(){}

  _ToolStripOverflowDispT(_ToolStripOverflow *pintf)
  {
    TAutoDriver<_ToolStripOverflow>::Bind(pintf, false);
  }

  _ToolStripOverflowDispT(_ToolStripOverflowPtr pintf)
  {
    TAutoDriver<_ToolStripOverflow>::Bind(pintf, true);
  }

  _ToolStripOverflowDispT& operator=(_ToolStripOverflow *pintf)
  {
    TAutoDriver<_ToolStripOverflow>::Bind(pintf, false);
    return *this;
  }

  _ToolStripOverflowDispT& operator=(_ToolStripOverflowPtr pintf)
  {
    TAutoDriver<_ToolStripOverflow>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToolStripOverflow));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToolStripOverflow);
  }


};
typedef _ToolStripOverflowDispT<_ToolStripOverflow> _ToolStripOverflowDisp;

// *********************************************************************//
// SmartIntf: TCOM_TrackBar
// Interface: _TrackBar
// *********************************************************************//
template <class T /* _TrackBar */ >
class TCOM_TrackBarT : public TComInterface<_TrackBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TrackBarT() {}
  TCOM_TrackBarT(_TrackBar *intf, bool addRef = false) : TComInterface<_TrackBar>(intf, addRef) {}
  TCOM_TrackBarT(const TCOM_TrackBarT& src) : TComInterface<_TrackBar>(src) {}
  TCOM_TrackBarT& operator=(const TCOM_TrackBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TrackBarT<_TrackBar> TCOM_TrackBar;

// *********************************************************************//
// DispIntf:  _TrackBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A8CC9AD-4E8D-3AAF-941A-1511C9C1372A}
// *********************************************************************//
template<class T>
class _TrackBarDispT : public TAutoDriver<_TrackBar>
{
public:
  _TrackBarDispT(){}

  _TrackBarDispT(_TrackBar *pintf)
  {
    TAutoDriver<_TrackBar>::Bind(pintf, false);
  }

  _TrackBarDispT(_TrackBarPtr pintf)
  {
    TAutoDriver<_TrackBar>::Bind(pintf, true);
  }

  _TrackBarDispT& operator=(_TrackBar *pintf)
  {
    TAutoDriver<_TrackBar>::Bind(pintf, false);
    return *this;
  }

  _TrackBarDispT& operator=(_TrackBarPtr pintf)
  {
    TAutoDriver<_TrackBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TrackBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TrackBar);
  }


};
typedef _TrackBarDispT<_TrackBar> _TrackBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_TreeView
// Interface: _TreeView
// *********************************************************************//
template <class T /* _TreeView */ >
class TCOM_TreeViewT : public TComInterface<_TreeView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TreeViewT() {}
  TCOM_TreeViewT(_TreeView *intf, bool addRef = false) : TComInterface<_TreeView>(intf, addRef) {}
  TCOM_TreeViewT(const TCOM_TreeViewT& src) : TComInterface<_TreeView>(src) {}
  TCOM_TreeViewT& operator=(const TCOM_TreeViewT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TreeViewT<_TreeView> TCOM_TreeView;

// *********************************************************************//
// DispIntf:  _TreeView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA97ED62-9EBD-34E8-94AD-F71AEF67DEFF}
// *********************************************************************//
template<class T>
class _TreeViewDispT : public TAutoDriver<_TreeView>
{
public:
  _TreeViewDispT(){}

  _TreeViewDispT(_TreeView *pintf)
  {
    TAutoDriver<_TreeView>::Bind(pintf, false);
  }

  _TreeViewDispT(_TreeViewPtr pintf)
  {
    TAutoDriver<_TreeView>::Bind(pintf, true);
  }

  _TreeViewDispT& operator=(_TreeView *pintf)
  {
    TAutoDriver<_TreeView>::Bind(pintf, false);
    return *this;
  }

  _TreeViewDispT& operator=(_TreeViewPtr pintf)
  {
    TAutoDriver<_TreeView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TreeView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TreeView);
  }


};
typedef _TreeViewDispT<_TreeView> _TreeViewDisp;

// *********************************************************************//
// SmartIntf: TCOM_TreeNodeMouseHoverEventArgs
// Interface: _TreeNodeMouseHoverEventArgs
// *********************************************************************//
template <class T /* _TreeNodeMouseHoverEventArgs */ >
class TCOM_TreeNodeMouseHoverEventArgsT : public TComInterface<_TreeNodeMouseHoverEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TreeNodeMouseHoverEventArgsT() {}
  TCOM_TreeNodeMouseHoverEventArgsT(_TreeNodeMouseHoverEventArgs *intf, bool addRef = false) : TComInterface<_TreeNodeMouseHoverEventArgs>(intf, addRef) {}
  TCOM_TreeNodeMouseHoverEventArgsT(const TCOM_TreeNodeMouseHoverEventArgsT& src) : TComInterface<_TreeNodeMouseHoverEventArgs>(src) {}
  TCOM_TreeNodeMouseHoverEventArgsT& operator=(const TCOM_TreeNodeMouseHoverEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TreeNodeMouseHoverEventArgsT<_TreeNodeMouseHoverEventArgs> TCOM_TreeNodeMouseHoverEventArgs;

// *********************************************************************//
// DispIntf:  _TreeNodeMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F51EDF6C-9E49-334A-8AAE-B0C7C631ABE4}
// *********************************************************************//
template<class T>
class _TreeNodeMouseHoverEventArgsDispT : public TAutoDriver<_TreeNodeMouseHoverEventArgs>
{
public:
  _TreeNodeMouseHoverEventArgsDispT(){}

  _TreeNodeMouseHoverEventArgsDispT(_TreeNodeMouseHoverEventArgs *pintf)
  {
    TAutoDriver<_TreeNodeMouseHoverEventArgs>::Bind(pintf, false);
  }

  _TreeNodeMouseHoverEventArgsDispT(_TreeNodeMouseHoverEventArgsPtr pintf)
  {
    TAutoDriver<_TreeNodeMouseHoverEventArgs>::Bind(pintf, true);
  }

  _TreeNodeMouseHoverEventArgsDispT& operator=(_TreeNodeMouseHoverEventArgs *pintf)
  {
    TAutoDriver<_TreeNodeMouseHoverEventArgs>::Bind(pintf, false);
    return *this;
  }

  _TreeNodeMouseHoverEventArgsDispT& operator=(_TreeNodeMouseHoverEventArgsPtr pintf)
  {
    TAutoDriver<_TreeNodeMouseHoverEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TreeNodeMouseHoverEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TreeNodeMouseHoverEventArgs);
  }


};
typedef _TreeNodeMouseHoverEventArgsDispT<_TreeNodeMouseHoverEventArgs> _TreeNodeMouseHoverEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_UserControl
// Interface: _UserControl
// *********************************************************************//
template <class T /* _UserControl */ >
class TCOM_UserControlT : public TComInterface<_UserControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_UserControlT() {}
  TCOM_UserControlT(_UserControl *intf, bool addRef = false) : TComInterface<_UserControl>(intf, addRef) {}
  TCOM_UserControlT(const TCOM_UserControlT& src) : TComInterface<_UserControl>(src) {}
  TCOM_UserControlT& operator=(const TCOM_UserControlT& src) { Bind(src, true); return *this;}


};
typedef TCOM_UserControlT<_UserControl> TCOM_UserControl;

// *********************************************************************//
// DispIntf:  _UserControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEEDF4B-B688-3C0D-8B16-D53290790DFB}
// *********************************************************************//
template<class T>
class _UserControlDispT : public TAutoDriver<_UserControl>
{
public:
  _UserControlDispT(){}

  _UserControlDispT(_UserControl *pintf)
  {
    TAutoDriver<_UserControl>::Bind(pintf, false);
  }

  _UserControlDispT(_UserControlPtr pintf)
  {
    TAutoDriver<_UserControl>::Bind(pintf, true);
  }

  _UserControlDispT& operator=(_UserControl *pintf)
  {
    TAutoDriver<_UserControl>::Bind(pintf, false);
    return *this;
  }

  _UserControlDispT& operator=(_UserControlPtr pintf)
  {
    TAutoDriver<_UserControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UserControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UserControl);
  }


};
typedef _UserControlDispT<_UserControl> _UserControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_VScrollBar
// Interface: _VScrollBar
// *********************************************************************//
template <class T /* _VScrollBar */ >
class TCOM_VScrollBarT : public TComInterface<_VScrollBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_VScrollBarT() {}
  TCOM_VScrollBarT(_VScrollBar *intf, bool addRef = false) : TComInterface<_VScrollBar>(intf, addRef) {}
  TCOM_VScrollBarT(const TCOM_VScrollBarT& src) : TComInterface<_VScrollBar>(src) {}
  TCOM_VScrollBarT& operator=(const TCOM_VScrollBarT& src) { Bind(src, true); return *this;}


};
typedef TCOM_VScrollBarT<_VScrollBar> TCOM_VScrollBar;

// *********************************************************************//
// DispIntf:  _VScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {469D64EC-EB30-3462-A93B-E01BAA5CAF83}
// *********************************************************************//
template<class T>
class _VScrollBarDispT : public TAutoDriver<_VScrollBar>
{
public:
  _VScrollBarDispT(){}

  _VScrollBarDispT(_VScrollBar *pintf)
  {
    TAutoDriver<_VScrollBar>::Bind(pintf, false);
  }

  _VScrollBarDispT(_VScrollBarPtr pintf)
  {
    TAutoDriver<_VScrollBar>::Bind(pintf, true);
  }

  _VScrollBarDispT& operator=(_VScrollBar *pintf)
  {
    TAutoDriver<_VScrollBar>::Bind(pintf, false);
    return *this;
  }

  _VScrollBarDispT& operator=(_VScrollBarPtr pintf)
  {
    TAutoDriver<_VScrollBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VScrollBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VScrollBar);
  }


};
typedef _VScrollBarDispT<_VScrollBar> _VScrollBarDisp;

// *********************************************************************//
// SmartIntf: TCOM_WebBrowser
// Interface: _WebBrowser
// *********************************************************************//
template <class T /* _WebBrowser */ >
class TCOM_WebBrowserT : public TComInterface<_WebBrowser>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_WebBrowserT() {}
  TCOM_WebBrowserT(_WebBrowser *intf, bool addRef = false) : TComInterface<_WebBrowser>(intf, addRef) {}
  TCOM_WebBrowserT(const TCOM_WebBrowserT& src) : TComInterface<_WebBrowser>(src) {}
  TCOM_WebBrowserT& operator=(const TCOM_WebBrowserT& src) { Bind(src, true); return *this;}


};
typedef TCOM_WebBrowserT<_WebBrowser> TCOM_WebBrowser;

// *********************************************************************//
// DispIntf:  _WebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB134D18-9643-3862-AA3B-17EBDB1A0DEF}
// *********************************************************************//
template<class T>
class _WebBrowserDispT : public TAutoDriver<_WebBrowser>
{
public:
  _WebBrowserDispT(){}

  _WebBrowserDispT(_WebBrowser *pintf)
  {
    TAutoDriver<_WebBrowser>::Bind(pintf, false);
  }

  _WebBrowserDispT(_WebBrowserPtr pintf)
  {
    TAutoDriver<_WebBrowser>::Bind(pintf, true);
  }

  _WebBrowserDispT& operator=(_WebBrowser *pintf)
  {
    TAutoDriver<_WebBrowser>::Bind(pintf, false);
    return *this;
  }

  _WebBrowserDispT& operator=(_WebBrowserPtr pintf)
  {
    TAutoDriver<_WebBrowser>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebBrowser));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebBrowser);
  }


};
typedef _WebBrowserDispT<_WebBrowser> _WebBrowserDisp;

// *********************************************************************//
// SmartIntf: TCOM_WebBrowserBase
// Interface: _WebBrowserBase
// *********************************************************************//
template <class T /* _WebBrowserBase */ >
class TCOM_WebBrowserBaseT : public TComInterface<_WebBrowserBase>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_WebBrowserBaseT() {}
  TCOM_WebBrowserBaseT(_WebBrowserBase *intf, bool addRef = false) : TComInterface<_WebBrowserBase>(intf, addRef) {}
  TCOM_WebBrowserBaseT(const TCOM_WebBrowserBaseT& src) : TComInterface<_WebBrowserBase>(src) {}
  TCOM_WebBrowserBaseT& operator=(const TCOM_WebBrowserBaseT& src) { Bind(src, true); return *this;}


};
typedef TCOM_WebBrowserBaseT<_WebBrowserBase> TCOM_WebBrowserBase;

// *********************************************************************//
// DispIntf:  _WebBrowserBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {764905A9-B10E-3C61-96DD-FA6F4BF8648D}
// *********************************************************************//
template<class T>
class _WebBrowserBaseDispT : public TAutoDriver<_WebBrowserBase>
{
public:
  _WebBrowserBaseDispT(){}

  _WebBrowserBaseDispT(_WebBrowserBase *pintf)
  {
    TAutoDriver<_WebBrowserBase>::Bind(pintf, false);
  }

  _WebBrowserBaseDispT(_WebBrowserBasePtr pintf)
  {
    TAutoDriver<_WebBrowserBase>::Bind(pintf, true);
  }

  _WebBrowserBaseDispT& operator=(_WebBrowserBase *pintf)
  {
    TAutoDriver<_WebBrowserBase>::Bind(pintf, false);
    return *this;
  }

  _WebBrowserBaseDispT& operator=(_WebBrowserBasePtr pintf)
  {
    TAutoDriver<_WebBrowserBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebBrowserBase));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebBrowserBase);
  }


};
typedef _WebBrowserBaseDispT<_WebBrowserBase> _WebBrowserBaseDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentEditorForm
// Interface: _ComponentEditorForm
// *********************************************************************//
template <class T /* _ComponentEditorForm */ >
class TCOM_ComponentEditorFormT : public TComInterface<_ComponentEditorForm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentEditorFormT() {}
  TCOM_ComponentEditorFormT(_ComponentEditorForm *intf, bool addRef = false) : TComInterface<_ComponentEditorForm>(intf, addRef) {}
  TCOM_ComponentEditorFormT(const TCOM_ComponentEditorFormT& src) : TComInterface<_ComponentEditorForm>(src) {}
  TCOM_ComponentEditorFormT& operator=(const TCOM_ComponentEditorFormT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentEditorFormT<_ComponentEditorForm> TCOM_ComponentEditorForm;

// *********************************************************************//
// DispIntf:  _ComponentEditorForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7006EFC-6E21-3B74-A9D7-9A2F12E46C8E}
// *********************************************************************//
template<class T>
class _ComponentEditorFormDispT : public TAutoDriver<_ComponentEditorForm>
{
public:
  _ComponentEditorFormDispT(){}

  _ComponentEditorFormDispT(_ComponentEditorForm *pintf)
  {
    TAutoDriver<_ComponentEditorForm>::Bind(pintf, false);
  }

  _ComponentEditorFormDispT(_ComponentEditorFormPtr pintf)
  {
    TAutoDriver<_ComponentEditorForm>::Bind(pintf, true);
  }

  _ComponentEditorFormDispT& operator=(_ComponentEditorForm *pintf)
  {
    TAutoDriver<_ComponentEditorForm>::Bind(pintf, false);
    return *this;
  }

  _ComponentEditorFormDispT& operator=(_ComponentEditorFormPtr pintf)
  {
    TAutoDriver<_ComponentEditorForm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentEditorForm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentEditorForm);
  }


};
typedef _ComponentEditorFormDispT<_ComponentEditorForm> _ComponentEditorFormDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentEditorPage
// Interface: _ComponentEditorPage
// *********************************************************************//
template <class T /* _ComponentEditorPage */ >
class TCOM_ComponentEditorPageT : public TComInterface<_ComponentEditorPage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentEditorPageT() {}
  TCOM_ComponentEditorPageT(_ComponentEditorPage *intf, bool addRef = false) : TComInterface<_ComponentEditorPage>(intf, addRef) {}
  TCOM_ComponentEditorPageT(const TCOM_ComponentEditorPageT& src) : TComInterface<_ComponentEditorPage>(src) {}
  TCOM_ComponentEditorPageT& operator=(const TCOM_ComponentEditorPageT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentEditorPageT<_ComponentEditorPage> TCOM_ComponentEditorPage;

// *********************************************************************//
// DispIntf:  _ComponentEditorPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C858A49A-FDCB-395D-BBB8-9B2B66DC0FB5}
// *********************************************************************//
template<class T>
class _ComponentEditorPageDispT : public TAutoDriver<_ComponentEditorPage>
{
public:
  _ComponentEditorPageDispT(){}

  _ComponentEditorPageDispT(_ComponentEditorPage *pintf)
  {
    TAutoDriver<_ComponentEditorPage>::Bind(pintf, false);
  }

  _ComponentEditorPageDispT(_ComponentEditorPagePtr pintf)
  {
    TAutoDriver<_ComponentEditorPage>::Bind(pintf, true);
  }

  _ComponentEditorPageDispT& operator=(_ComponentEditorPage *pintf)
  {
    TAutoDriver<_ComponentEditorPage>::Bind(pintf, false);
    return *this;
  }

  _ComponentEditorPageDispT& operator=(_ComponentEditorPagePtr pintf)
  {
    TAutoDriver<_ComponentEditorPage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentEditorPage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentEditorPage);
  }


};
typedef _ComponentEditorPageDispT<_ComponentEditorPage> _ComponentEditorPageDisp;

// *********************************************************************//
// SmartIntf: TCOM_AccessibleObject
// Interface: _AccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _AccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {399C0499-29D3-3D95-AF77-111DCDB92177}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Form
// Interface: _Form
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD0C79DB-37BE-3B61-9C53-2E4857237227}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_AxHost
// Interface: _AxHost
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _AxHost
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {548054D5-75C5-3A72-A87B-D6F305254065}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Control
// Interface: _Control
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83ACBFAE-1A16-33EB-ABA0-BA8DF0B206D7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ContainerControl
// Interface: _ContainerControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ContainerControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A5AF2165-C1BE-39AF-AB35-CD950D01A701}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_BindingNavigator
// Interface: _BindingNavigator
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _BindingNavigator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E3FF0D90-9E82-3736-A253-3B2F41EF981A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStrip
// Interface: _ToolStrip
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A81676FD-EAA3-39C3-9354-A58951270EB6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Button
// Interface: _Button
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Button
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9486855D-B3A4-32E8-AF74-EC881982E3FF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ButtonBase
// Interface: _ButtonBase
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ButtonBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14C1282-8647-317E-A549-D2CBCC264C3A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MouseEventArgs
// Interface: _MouseEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MouseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {276A1A21-AAEF-3378-8902-01F695868FF9}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ButtonBaseAccessibleObject
// Interface: _ButtonBaseAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ButtonBaseAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4343B837-6EC8-3E43-8A59-046C35024677}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ControlAccessibleObject
// Interface: _ControlAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ControlAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7496E5C0-90D3-372E-885F-BDD1A0316856}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_KeyEventArgs
// Interface: _KeyEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _KeyEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4AAA99AA-77B1-3CF7-85D8-D9CF69271AC6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CheckBox
// Interface: _CheckBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1C7817C6-6A49-301E-B20A-05FF053C3D56}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CheckBoxAccessibleObject
// Interface: _CheckBoxAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CheckBoxAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5D9FCE71-04C3-395E-B972-F1205E8DE615}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CheckedListBox
// Interface: _CheckedListBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CheckedListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1833C4C9-4E61-3D96-AEB5-65B43DE96A01}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ListBox
// Interface: _ListBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E36590E6-CFD5-340E-9650-73500A802C43}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_KeyPressEventArgs
// Interface: _KeyPressEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _KeyPressEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B8755BC8-51FE-3D19-A3EC-5A5A5CF120E0}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ItemCheckEventArgs
// Interface: _ItemCheckEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ItemCheckEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29BDF32D-E055-38E7-8DCB-920A3038FEF7}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IDataObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3CEE8CC1-1ADB-327F-9B97-7A9C8089BFB3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                             VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  _args[2] = autoConvert /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IDataObjectDispT<T>::GetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/)
{
  VARIANT pRetVal;
  this->GetData(format, autoConvert, (VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetData_2(BSTR format/*[in]*/, VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData_2"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IDataObjectDispT<T>::GetData_2(BSTR format/*[in]*/)
{
  VARIANT pRetVal;
  this->GetData_2(format, (VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetData_3(Mscorlib_tlb::_Type* format/*[in]*/, VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData_3"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)format /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IDataObjectDispT<T>::GetData_3(Mscorlib_tlb::_Type* format/*[in]*/)
{
  VARIANT pRetVal;
  this->GetData_3(format, (VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::SetData(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                             VARIANT data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<3> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  _args[2] = autoConvert /*[VT_BOOL:0]*/;
  _args[3] = data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::SetData_2(BSTR format/*[in]*/, VARIANT data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData_2"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<2> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::SetData_3(Mscorlib_tlb::_Type* format/*[in]*/, VARIANT data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData_3"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)format /*[VT_USERDEFINED:1]*/;
  _args[2] = data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::SetData_4(VARIANT data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData_4"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetDataPresent(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/, 
                                    VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataPresent"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  _args[2] = autoConvert /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataObjectDispT<T>::GetDataPresent(BSTR format/*[in]*/, VARIANT_BOOL autoConvert/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->GetDataPresent(format, autoConvert, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetDataPresent_2(BSTR format/*[in]*/, VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataPresent_2"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = format /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataObjectDispT<T>::GetDataPresent_2(BSTR format/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->GetDataPresent_2(format, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/, 
                                      VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataPresent_3"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)format /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataObjectDispT<T>::GetDataPresent_3(Mscorlib_tlb::_Type* format/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->GetDataPresent_3(format, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetFormats(VARIANT_BOOL autoConvert/*[in]*/, 
                                LPSAFEARRAY* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFormats"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = autoConvert /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
IDataObjectDispT<T>::GetFormats(VARIANT_BOOL autoConvert/*[in]*/)
{
  LPSAFEARRAY pRetVal;
  this->GetFormats(autoConvert, (LPSAFEARRAY*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDataObjectDispT<T>::GetFormats_2(LPSAFEARRAY* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFormats_2"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
IDataObjectDispT<T>::GetFormats_2(void)
{
  LPSAFEARRAY pRetVal;
  this->GetFormats_2((LPSAFEARRAY*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListView
// Interface: _ListView
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A87AED55-DDA4-3668-BEFA-1A776496DD3E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComboBox
// Interface: _ComboBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComboBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EFEC16E-EEC9-39A3-9D8A-5E72B5C14F78}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ListControl
// Interface: _ListControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D58DFF0C-34C3-3D1E-8251-5F83EE7367C9}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ChildAccessibleObject
// Interface: _ChildAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ChildAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518F00C6-2AAB-3B25-A76A-F62883781E18}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ScrollableControl
// Interface: _ScrollableControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ScrollableControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {812A8B20-CB02-3483-8A29-424C6CDAC4B7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ContextMenuStrip
// Interface: _ContextMenuStrip
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ContextMenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B4939AF-61C1-378F-BDF0-68B9B3EE48E3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDownMenu
// Interface: _ToolStripDropDownMenu
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripDropDownMenu
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E07FA2C-B44B-3818-BA44-D88F2A69E8B6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DragEventArgs
// Interface: _DragEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AEDF37AB-9041-3D55-9ACA-BDEDE24566D2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_GiveFeedbackEventArgs
// Interface: _GiveFeedbackEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _GiveFeedbackEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {77AD1D22-59C4-3634-9D55-50291CDA49F6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_HelpEventArgs
// Interface: _HelpEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _HelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2B402-744D-34F5-AD8B-BD7C018B31F5}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_QueryContinueDragEventArgs
// Interface: _QueryContinueDragEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _QueryContinueDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FD0D341-0808-3A17-A978-ADB5ED517F59}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DataGrid
// Interface: _DataGrid
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DataGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {518A56E2-FBCE-3386-BB15-4A0F67872BDC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ScrollBar
// Interface: _ScrollBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59C5A9AD-941B-3279-BED8-EDCC2951CADC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_NavigateEventArgs
// Interface: _NavigateEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _NavigateEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42959ECE-0606-3758-9679-A48E88F9BAF8}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ScrollEventArgs
// Interface: _ScrollEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ScrollEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCD8C82C-DFBF-3E14-BE9B-38555F6221F2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DataGridTextBox
// Interface: _DataGridTextBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DataGridTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2780E0D4-2B06-3E1F-ADDF-D8DBBB3FB960}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TextBox
// Interface: _TextBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAEF4300-9FB3-306F-8F67-180DEB8DDFB7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DataGridView
// Interface: _DataGridView
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DataGridView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5968374C-8F43-353B-8F0A-780A0A7DDB79}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Panel
// Interface: _Panel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Panel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {549A3DD8-D85F-3D08-87E2-49B08490008B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DataGridViewComboBoxEditingControl
// Interface: _DataGridViewComboBoxEditingControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DataGridViewComboBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C6615083-0A23-3997-A54B-F618EB824AF0}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DataGridViewTextBoxEditingControl
// Interface: _DataGridViewTextBoxEditingControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DataGridViewTextBoxEditingControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7750701-44A2-353A-923A-7BA68A8E22AF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DateTimePicker
// Interface: _DateTimePicker
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DateTimePicker
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2BAD7D35-895F-3D4A-B883-0B3CD324B8BD}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DateTimePickerAccessibleObject
// Interface: _DateTimePickerAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DateTimePickerAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5BEF6F14-89F8-3AD5-BE92-0649CFA5ABB1}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DomainUpDown
// Interface: _DomainUpDown
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DomainUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {44792A74-5DD8-3410-A897-F568E4E58161}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_UpDownBase
// Interface: _UpDownBase
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _UpDownBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C26446AC-E09B-3545-B01A-5575923636C3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DomainItemAccessibleObject
// Interface: _DomainItemAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DomainItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0D46DA02-69FB-3A29-9AC6-395925C38479}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DomainUpDownAccessibleObject
// Interface: _DomainUpDownAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DomainUpDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {131B8005-94C2-37D5-B738-CD2337635E73}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_FlowLayoutPanel
// Interface: _FlowLayoutPanel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _FlowLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B55C4C83-1F69-3D93-9C4E-2AA5619E0C68}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MenuStrip
// Interface: _MenuStrip
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MenuStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB5A3078-05D9-3F32-9045-89F756938A3D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_GroupBox
// Interface: _GroupBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _GroupBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11B0B536-2F72-3A3F-B2A3-0420A9F5041F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_HScrollBar
// Interface: _HScrollBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _HScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7BC4A820-B20F-3ECE-BDD6-EE7E14EB7E0D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ItemDragEventArgs
// Interface: _ItemDragEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ItemDragEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7FA2A2C6-276C-3F23-AF2A-800CCD05CFF2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Label
// Interface: _Label
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Label
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00AE8203-987D-3B7E-9448-5B3393282D7F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_LinkClickedEventArgs
// Interface: _LinkClickedEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _LinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93194740-9A53-3D3E-902C-240FBE0C90E4}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_LinkLabel
// Interface: _LinkLabel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _LinkLabel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4EE61C0D-D2D5-3A50-972B-C0A957D3A541}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_LinkLabelLinkClickedEventArgs
// Interface: _LinkLabelLinkClickedEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _LinkLabelLinkClickedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CB38AE7B-5208-351D-8B84-3ECA81DE0F34}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ListViewItemMouseHoverEventArgs
// Interface: _ListViewItemMouseHoverEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListViewItemMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2F121D8-4775-3FB2-93A3-C5862AE8C359}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MaskedTextBox
// Interface: _MaskedTextBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MaskedTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22B0C1A9-E74E-381A-BABB-66BEF71FF08E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TextBoxBase
// Interface: _TextBoxBase
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TextBoxBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {ABC30865-8929-3F02-9D70-6C3D68C83837}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MdiClient
// Interface: _MdiClient
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MdiClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6AB0BB67-4A4B-32F9-A18A-6481916C946F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MonthCalendar
// Interface: _MonthCalendar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MonthCalendar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3FA9EA8-275E-35E9-89DA-18B1FCA593EE}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_NumericUpDown
// Interface: _NumericUpDown
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _NumericUpDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2AD9F14A-0097-3C69-9F8E-5DDB52F3878B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PictureBox
// Interface: _PictureBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PictureBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB1C5180-87D0-330C-B698-EE2132DF362E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PrintPreviewControl
// Interface: _PrintPreviewControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PrintPreviewControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FA3B8143-ECB8-3A38-9DE5-DB0EEA708B5F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PrintPreviewDialog
// Interface: _PrintPreviewDialog
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PrintPreviewDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57C090D5-80BC-33B8-B782-706A8D833767}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ProgressBar
// Interface: _ProgressBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ProgressBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E935BCB-21E1-377C-A59F-89F7BA5A4E0F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PropertyGrid
// Interface: _PropertyGrid
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PropertyGrid
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C831618-60D7-32B2-9790-1EBDC5ADEFE5}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PropertyTabChangedEventArgs
// Interface: _PropertyTabChangedEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PropertyTabChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DB6FE495-8F5B-3C66-9A17-4C40D5593906}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PropertyValueChangedEventArgs
// Interface: _PropertyValueChangedEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PropertyValueChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6D43DF59-7EA8-300F-ACB2-760A070CFCF2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_QueryAccessibilityHelpEventArgs
// Interface: _QueryAccessibilityHelpEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _QueryAccessibilityHelpEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2FE9F084-1511-3052-BE7C-9010B522C10E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_RadioButton
// Interface: _RadioButton
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _RadioButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E431682-BBDE-31B1-AE7F-9D8DD582BD0D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_RadioButtonAccessibleObject
// Interface: _RadioButtonAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _RadioButtonAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EDC3C736-47FD-3F25-90E4-123234D64FD4}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_RichTextBox
// Interface: _RichTextBox
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _RichTextBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B264763-A1C7-3441-9D61-7EDAEC2D0C44}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_SplitContainer
// Interface: _SplitContainer
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _SplitContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C1DA069E-4C0B-3664-BBA1-F81864825085}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_SplitterPanel
// Interface: _SplitterPanel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _SplitterPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A4C8B1A-4AF9-344A-BC88-DFE863328C86}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_SplitterEventArgs
// Interface: _SplitterEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _SplitterEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8E61AD1D-76AE-3501-9B36-481BFEBD3E3E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Splitter
// Interface: _Splitter
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Splitter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C318A56D-0B03-3A5A-93F6-7DF0B3268237}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_StatusBar
// Interface: _StatusBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _StatusBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93409DA8-FE37-3D4E-9A08-B35B34122C64}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_StatusStrip
// Interface: _StatusStrip
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _StatusStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {71CA209D-40D3-3409-B341-DA9B922CCA45}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TabControl
// Interface: _TabControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TabControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {470DE738-5261-302A-B205-4744652D2FD3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TabPage
// Interface: _TabPage
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TabPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {59183431-BD56-33D2-A2ED-FA414ADF8DCB}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TableLayoutPanel
// Interface: _TableLayoutPanel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TableLayoutPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05CBE5B2-0292-37DE-BE51-5B7599CA5A11}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ThreadExceptionDialog
// Interface: _ThreadExceptionDialog
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ThreadExceptionDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B00AA2F6-4D83-3937-B4AC-4C2C2C3F6C70}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolBar
// Interface: _ToolBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F6AB38B6-1C02-3B01-A7F8-510ED1C0B253}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripAccessibleObject
// Interface: _ToolStripAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F7A7383-2ABE-39D6-85F6-7117ED41979C}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripContainer
// Interface: _ToolStripContainer
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripContainer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2A42F137-D50D-3D62-AF58-4DF7A4F57C9B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripPanel
// Interface: _ToolStripPanel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FB97C26A-FB56-3F71-BBC4-B1377E7B142D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripContentPanel
// Interface: _ToolStripContentPanel
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripContentPanel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6EE3853E-DDEF-3F29-8F1B-1ED7180D9229}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDown
// Interface: _ToolStripDropDown
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripDropDown
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C2322B43-25B3-3B30-B3DB-67E4DA2E6533}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripDropDownAccessibleObject
// Interface: _ToolStripDropDownAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripDropDownAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF0D9304-0E85-3FFC-8283-6F291F32EE61}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripItemAccessibleObject
// Interface: _ToolStripItemAccessibleObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripItemAccessibleObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD9748A-D04F-3DFB-96A8-5624290F4554}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ToolStripOverflow
// Interface: _ToolStripOverflow
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ToolStripOverflow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75781CE7-317D-3C54-95D4-3E4DC04B4D3F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TrackBar
// Interface: _TrackBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TrackBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A8CC9AD-4E8D-3AAF-941A-1511C9C1372A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TreeView
// Interface: _TreeView
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TreeView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA97ED62-9EBD-34E8-94AD-F71AEF67DEFF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TreeNodeMouseHoverEventArgs
// Interface: _TreeNodeMouseHoverEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TreeNodeMouseHoverEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F51EDF6C-9E49-334A-8AAE-B0C7C631ABE4}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_UserControl
// Interface: _UserControl
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _UserControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEEDF4B-B688-3C0D-8B16-D53290790DFB}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_VScrollBar
// Interface: _VScrollBar
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _VScrollBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {469D64EC-EB30-3462-A93B-E01BAA5CAF83}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_WebBrowser
// Interface: _WebBrowser
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _WebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BB134D18-9643-3862-AA3B-17EBDB1A0DEF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_WebBrowserBase
// Interface: _WebBrowserBase
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _WebBrowserBase
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {764905A9-B10E-3C61-96DD-FA6F4BF8648D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentEditorForm
// Interface: _ComponentEditorForm
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentEditorForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A7006EFC-6E21-3B74-A9D7-9A2F12E46C8E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentEditorPage
// Interface: _ComponentEditorPage
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentEditorPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C858A49A-FDCB-395D-BBB8-9B2B66DC0FB5}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessibleObject
// Interface: TCOM_AccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_AccessibleObject, _AccessibleObject, &CLSID_AccessibleObject, &IID__AccessibleObject> CoAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Form
// Interface: TCOM_Form
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Form, _Form, &CLSID_Form, &IID__Form> CoForm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AxHost
// Interface: TCOM_AxHost
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_AxHost, _AxHost, &CLSID_AxHost, &IID__AxHost> CoAxHost;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Control
// Interface: TCOM_Control
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Control, _Control, &CLSID_Control, &IID__Control> CoControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ContainerControl
// Interface: TCOM_ContainerControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ContainerControl, _ContainerControl, &CLSID_ContainerControl, &IID__ContainerControl> CoContainerControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BindingNavigator
// Interface: TCOM_BindingNavigator
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_BindingNavigator, _BindingNavigator, &CLSID_BindingNavigator, &IID__BindingNavigator> CoBindingNavigator;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStrip
// Interface: TCOM_ToolStrip
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStrip, _ToolStrip, &CLSID_ToolStrip, &IID__ToolStrip> CoToolStrip;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Button
// Interface: TCOM_Button
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Button, _Button, &CLSID_Button, &IID__Button> CoButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ButtonBase
// Interface: TCOM_ButtonBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ButtonBase, _ButtonBase, &CLSID_ButtonBase, &IID__ButtonBase> CoButtonBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MouseEventArgs
// Interface: TCOM_MouseEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MouseEventArgs, _MouseEventArgs, &CLSID_MouseEventArgs, &IID__MouseEventArgs> CoMouseEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ButtonBaseAccessibleObject
// Interface: TCOM_ButtonBaseAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ButtonBaseAccessibleObject, _ButtonBaseAccessibleObject, &CLSID_ButtonBaseAccessibleObject, &IID__ButtonBaseAccessibleObject> CoButtonBaseAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ControlAccessibleObject
// Interface: TCOM_ControlAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ControlAccessibleObject, _ControlAccessibleObject, &CLSID_ControlAccessibleObject, &IID__ControlAccessibleObject> CoControlAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : KeyEventArgs
// Interface: TCOM_KeyEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_KeyEventArgs, _KeyEventArgs, &CLSID_KeyEventArgs, &IID__KeyEventArgs> CoKeyEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CheckBox
// Interface: TCOM_CheckBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CheckBox, _CheckBox, &CLSID_CheckBox, &IID__CheckBox> CoCheckBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CheckBoxAccessibleObject
// Interface: TCOM_CheckBoxAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CheckBoxAccessibleObject, _CheckBoxAccessibleObject, &CLSID_CheckBoxAccessibleObject, &IID__CheckBoxAccessibleObject> CoCheckBoxAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CheckedListBox
// Interface: TCOM_CheckedListBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CheckedListBox, _CheckedListBox, &CLSID_CheckedListBox, &IID__CheckedListBox> CoCheckedListBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListBox
// Interface: TCOM_ListBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListBox, _ListBox, &CLSID_ListBox, &IID__ListBox> CoListBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : KeyPressEventArgs
// Interface: TCOM_KeyPressEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_KeyPressEventArgs, _KeyPressEventArgs, &CLSID_KeyPressEventArgs, &IID__KeyPressEventArgs> CoKeyPressEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ItemCheckEventArgs
// Interface: TCOM_ItemCheckEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ItemCheckEventArgs, _ItemCheckEventArgs, &CLSID_ItemCheckEventArgs, &IID__ItemCheckEventArgs> CoItemCheckEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListView
// Interface: TCOM_ListView
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListView, _ListView, &CLSID_ListView, &IID__ListView> CoListView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComboBox
// Interface: TCOM_ComboBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComboBox, _ComboBox, &CLSID_ComboBox, &IID__ComboBox> CoComboBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListControl
// Interface: TCOM_ListControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListControl, _ListControl, &CLSID_ListControl, &IID__ListControl> CoListControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ChildAccessibleObject
// Interface: TCOM_ChildAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ChildAccessibleObject, _ChildAccessibleObject, &CLSID_ChildAccessibleObject, &IID__ChildAccessibleObject> CoChildAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ScrollableControl
// Interface: TCOM_ScrollableControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ScrollableControl, _ScrollableControl, &CLSID_ScrollableControl, &IID__ScrollableControl> CoScrollableControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ContextMenuStrip
// Interface: TCOM_ContextMenuStrip
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ContextMenuStrip, _ContextMenuStrip, &CLSID_ContextMenuStrip, &IID__ContextMenuStrip> CoContextMenuStrip;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripDropDownMenu
// Interface: TCOM_ToolStripDropDownMenu
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripDropDownMenu, _ToolStripDropDownMenu, &CLSID_ToolStripDropDownMenu, &IID__ToolStripDropDownMenu> CoToolStripDropDownMenu;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DragEventArgs
// Interface: TCOM_DragEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DragEventArgs, _DragEventArgs, &CLSID_DragEventArgs, &IID__DragEventArgs> CoDragEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : GiveFeedbackEventArgs
// Interface: TCOM_GiveFeedbackEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_GiveFeedbackEventArgs, _GiveFeedbackEventArgs, &CLSID_GiveFeedbackEventArgs, &IID__GiveFeedbackEventArgs> CoGiveFeedbackEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : HelpEventArgs
// Interface: TCOM_HelpEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_HelpEventArgs, _HelpEventArgs, &CLSID_HelpEventArgs, &IID__HelpEventArgs> CoHelpEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryContinueDragEventArgs
// Interface: TCOM_QueryContinueDragEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_QueryContinueDragEventArgs, _QueryContinueDragEventArgs, &CLSID_QueryContinueDragEventArgs, &IID__QueryContinueDragEventArgs> CoQueryContinueDragEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataGrid
// Interface: TCOM_DataGrid
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DataGrid, _DataGrid, &CLSID_DataGrid, &IID__DataGrid> CoDataGrid;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ScrollBar
// Interface: TCOM_ScrollBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ScrollBar, _ScrollBar, &CLSID_ScrollBar, &IID__ScrollBar> CoScrollBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NavigateEventArgs
// Interface: TCOM_NavigateEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_NavigateEventArgs, _NavigateEventArgs, &CLSID_NavigateEventArgs, &IID__NavigateEventArgs> CoNavigateEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ScrollEventArgs
// Interface: TCOM_ScrollEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ScrollEventArgs, _ScrollEventArgs, &CLSID_ScrollEventArgs, &IID__ScrollEventArgs> CoScrollEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataGridTextBox
// Interface: TCOM_DataGridTextBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DataGridTextBox, _DataGridTextBox, &CLSID_DataGridTextBox, &IID__DataGridTextBox> CoDataGridTextBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TextBox
// Interface: TCOM_TextBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TextBox, _TextBox, &CLSID_TextBox, &IID__TextBox> CoTextBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataGridView
// Interface: TCOM_DataGridView
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DataGridView, _DataGridView, &CLSID_DataGridView, &IID__DataGridView> CoDataGridView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Panel
// Interface: TCOM_Panel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Panel, _Panel, &CLSID_Panel, &IID__Panel> CoPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataGridViewComboBoxEditingControl
// Interface: TCOM_DataGridViewComboBoxEditingControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DataGridViewComboBoxEditingControl, _DataGridViewComboBoxEditingControl, &CLSID_DataGridViewComboBoxEditingControl, &IID__DataGridViewComboBoxEditingControl> CoDataGridViewComboBoxEditingControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataGridViewTextBoxEditingControl
// Interface: TCOM_DataGridViewTextBoxEditingControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DataGridViewTextBoxEditingControl, _DataGridViewTextBoxEditingControl, &CLSID_DataGridViewTextBoxEditingControl, &IID__DataGridViewTextBoxEditingControl> CoDataGridViewTextBoxEditingControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DateTimePicker
// Interface: TCOM_DateTimePicker
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DateTimePicker, _DateTimePicker, &CLSID_DateTimePicker, &IID__DateTimePicker> CoDateTimePicker;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DateTimePickerAccessibleObject
// Interface: TCOM_DateTimePickerAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DateTimePickerAccessibleObject, _DateTimePickerAccessibleObject, &CLSID_DateTimePickerAccessibleObject, &IID__DateTimePickerAccessibleObject> CoDateTimePickerAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DomainUpDown
// Interface: TCOM_DomainUpDown
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DomainUpDown, _DomainUpDown, &CLSID_DomainUpDown, &IID__DomainUpDown> CoDomainUpDown;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : UpDownBase
// Interface: TCOM_UpDownBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_UpDownBase, _UpDownBase, &CLSID_UpDownBase, &IID__UpDownBase> CoUpDownBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DomainItemAccessibleObject
// Interface: TCOM_DomainItemAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DomainItemAccessibleObject, _DomainItemAccessibleObject, &CLSID_DomainItemAccessibleObject, &IID__DomainItemAccessibleObject> CoDomainItemAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DomainUpDownAccessibleObject
// Interface: TCOM_DomainUpDownAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DomainUpDownAccessibleObject, _DomainUpDownAccessibleObject, &CLSID_DomainUpDownAccessibleObject, &IID__DomainUpDownAccessibleObject> CoDomainUpDownAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FlowLayoutPanel
// Interface: TCOM_FlowLayoutPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_FlowLayoutPanel, _FlowLayoutPanel, &CLSID_FlowLayoutPanel, &IID__FlowLayoutPanel> CoFlowLayoutPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MenuStrip
// Interface: TCOM_MenuStrip
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MenuStrip, _MenuStrip, &CLSID_MenuStrip, &IID__MenuStrip> CoMenuStrip;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : GroupBox
// Interface: TCOM_GroupBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_GroupBox, _GroupBox, &CLSID_GroupBox, &IID__GroupBox> CoGroupBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : HScrollBar
// Interface: TCOM_HScrollBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_HScrollBar, _HScrollBar, &CLSID_HScrollBar, &IID__HScrollBar> CoHScrollBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ItemDragEventArgs
// Interface: TCOM_ItemDragEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ItemDragEventArgs, _ItemDragEventArgs, &CLSID_ItemDragEventArgs, &IID__ItemDragEventArgs> CoItemDragEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Label
// Interface: TCOM_Label
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Label, _Label, &CLSID_Label, &IID__Label> CoLabel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : LinkClickedEventArgs
// Interface: TCOM_LinkClickedEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_LinkClickedEventArgs, _LinkClickedEventArgs, &CLSID_LinkClickedEventArgs, &IID__LinkClickedEventArgs> CoLinkClickedEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : LinkLabel
// Interface: TCOM_LinkLabel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_LinkLabel, _LinkLabel, &CLSID_LinkLabel, &IID__LinkLabel> CoLinkLabel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : LinkLabelLinkClickedEventArgs
// Interface: TCOM_LinkLabelLinkClickedEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_LinkLabelLinkClickedEventArgs, _LinkLabelLinkClickedEventArgs, &CLSID_LinkLabelLinkClickedEventArgs, &IID__LinkLabelLinkClickedEventArgs> CoLinkLabelLinkClickedEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListViewItemMouseHoverEventArgs
// Interface: TCOM_ListViewItemMouseHoverEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListViewItemMouseHoverEventArgs, _ListViewItemMouseHoverEventArgs, &CLSID_ListViewItemMouseHoverEventArgs, &IID__ListViewItemMouseHoverEventArgs> CoListViewItemMouseHoverEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MaskedTextBox
// Interface: TCOM_MaskedTextBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MaskedTextBox, _MaskedTextBox, &CLSID_MaskedTextBox, &IID__MaskedTextBox> CoMaskedTextBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TextBoxBase
// Interface: TCOM_TextBoxBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TextBoxBase, _TextBoxBase, &CLSID_TextBoxBase, &IID__TextBoxBase> CoTextBoxBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MdiClient
// Interface: TCOM_MdiClient
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MdiClient, _MdiClient, &CLSID_MdiClient, &IID__MdiClient> CoMdiClient;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MonthCalendar
// Interface: TCOM_MonthCalendar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MonthCalendar, _MonthCalendar, &CLSID_MonthCalendar, &IID__MonthCalendar> CoMonthCalendar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NumericUpDown
// Interface: TCOM_NumericUpDown
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_NumericUpDown, _NumericUpDown, &CLSID_NumericUpDown, &IID__NumericUpDown> CoNumericUpDown;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PictureBox
// Interface: TCOM_PictureBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PictureBox, _PictureBox, &CLSID_PictureBox, &IID__PictureBox> CoPictureBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PrintPreviewControl
// Interface: TCOM_PrintPreviewControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PrintPreviewControl, _PrintPreviewControl, &CLSID_PrintPreviewControl, &IID__PrintPreviewControl> CoPrintPreviewControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PrintPreviewDialog
// Interface: TCOM_PrintPreviewDialog
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PrintPreviewDialog, _PrintPreviewDialog, &CLSID_PrintPreviewDialog, &IID__PrintPreviewDialog> CoPrintPreviewDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ProgressBar
// Interface: TCOM_ProgressBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ProgressBar, _ProgressBar, &CLSID_ProgressBar, &IID__ProgressBar> CoProgressBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyGrid
// Interface: TCOM_PropertyGrid
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PropertyGrid, _PropertyGrid, &CLSID_PropertyGrid, &IID__PropertyGrid> CoPropertyGrid;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyTabChangedEventArgs
// Interface: TCOM_PropertyTabChangedEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PropertyTabChangedEventArgs, _PropertyTabChangedEventArgs, &CLSID_PropertyTabChangedEventArgs, &IID__PropertyTabChangedEventArgs> CoPropertyTabChangedEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyValueChangedEventArgs
// Interface: TCOM_PropertyValueChangedEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PropertyValueChangedEventArgs, _PropertyValueChangedEventArgs, &CLSID_PropertyValueChangedEventArgs, &IID__PropertyValueChangedEventArgs> CoPropertyValueChangedEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryAccessibilityHelpEventArgs
// Interface: TCOM_QueryAccessibilityHelpEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_QueryAccessibilityHelpEventArgs, _QueryAccessibilityHelpEventArgs, &CLSID_QueryAccessibilityHelpEventArgs, &IID__QueryAccessibilityHelpEventArgs> CoQueryAccessibilityHelpEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioButton
// Interface: TCOM_RadioButton
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_RadioButton, _RadioButton, &CLSID_RadioButton, &IID__RadioButton> CoRadioButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioButtonAccessibleObject
// Interface: TCOM_RadioButtonAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_RadioButtonAccessibleObject, _RadioButtonAccessibleObject, &CLSID_RadioButtonAccessibleObject, &IID__RadioButtonAccessibleObject> CoRadioButtonAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RichTextBox
// Interface: TCOM_RichTextBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_RichTextBox, _RichTextBox, &CLSID_RichTextBox, &IID__RichTextBox> CoRichTextBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SplitContainer
// Interface: TCOM_SplitContainer
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_SplitContainer, _SplitContainer, &CLSID_SplitContainer, &IID__SplitContainer> CoSplitContainer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SplitterPanel
// Interface: TCOM_SplitterPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_SplitterPanel, _SplitterPanel, &CLSID_SplitterPanel, &IID__SplitterPanel> CoSplitterPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SplitterEventArgs
// Interface: TCOM_SplitterEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_SplitterEventArgs, _SplitterEventArgs, &CLSID_SplitterEventArgs, &IID__SplitterEventArgs> CoSplitterEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Splitter
// Interface: TCOM_Splitter
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Splitter, _Splitter, &CLSID_Splitter, &IID__Splitter> CoSplitter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StatusBar
// Interface: TCOM_StatusBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_StatusBar, _StatusBar, &CLSID_StatusBar, &IID__StatusBar> CoStatusBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StatusStrip
// Interface: TCOM_StatusStrip
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_StatusStrip, _StatusStrip, &CLSID_StatusStrip, &IID__StatusStrip> CoStatusStrip;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TabControl
// Interface: TCOM_TabControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TabControl, _TabControl, &CLSID_TabControl, &IID__TabControl> CoTabControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TabPage
// Interface: TCOM_TabPage
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TabPage, _TabPage, &CLSID_TabPage, &IID__TabPage> CoTabPage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TableLayoutPanel
// Interface: TCOM_TableLayoutPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TableLayoutPanel, _TableLayoutPanel, &CLSID_TableLayoutPanel, &IID__TableLayoutPanel> CoTableLayoutPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ThreadExceptionDialog
// Interface: TCOM_ThreadExceptionDialog
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ThreadExceptionDialog, _ThreadExceptionDialog, &CLSID_ThreadExceptionDialog, &IID__ThreadExceptionDialog> CoThreadExceptionDialog;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolBar
// Interface: TCOM_ToolBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolBar, _ToolBar, &CLSID_ToolBar, &IID__ToolBar> CoToolBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripAccessibleObject
// Interface: TCOM_ToolStripAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripAccessibleObject, _ToolStripAccessibleObject, &CLSID_ToolStripAccessibleObject, &IID__ToolStripAccessibleObject> CoToolStripAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripContainer
// Interface: TCOM_ToolStripContainer
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripContainer, _ToolStripContainer, &CLSID_ToolStripContainer, &IID__ToolStripContainer> CoToolStripContainer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripPanel
// Interface: TCOM_ToolStripPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripPanel, _ToolStripPanel, &CLSID_ToolStripPanel, &IID__ToolStripPanel> CoToolStripPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripContentPanel
// Interface: TCOM_ToolStripContentPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripContentPanel, _ToolStripContentPanel, &CLSID_ToolStripContentPanel, &IID__ToolStripContentPanel> CoToolStripContentPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripDropDown
// Interface: TCOM_ToolStripDropDown
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripDropDown, _ToolStripDropDown, &CLSID_ToolStripDropDown, &IID__ToolStripDropDown> CoToolStripDropDown;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripDropDownAccessibleObject
// Interface: TCOM_ToolStripDropDownAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripDropDownAccessibleObject, _ToolStripDropDownAccessibleObject, &CLSID_ToolStripDropDownAccessibleObject, &IID__ToolStripDropDownAccessibleObject> CoToolStripDropDownAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripItemAccessibleObject
// Interface: TCOM_ToolStripItemAccessibleObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripItemAccessibleObject, _ToolStripItemAccessibleObject, &CLSID_ToolStripItemAccessibleObject, &IID__ToolStripItemAccessibleObject> CoToolStripItemAccessibleObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ToolStripOverflow
// Interface: TCOM_ToolStripOverflow
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ToolStripOverflow, _ToolStripOverflow, &CLSID_ToolStripOverflow, &IID__ToolStripOverflow> CoToolStripOverflow;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TrackBar
// Interface: TCOM_TrackBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TrackBar, _TrackBar, &CLSID_TrackBar, &IID__TrackBar> CoTrackBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TreeView
// Interface: TCOM_TreeView
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TreeView, _TreeView, &CLSID_TreeView, &IID__TreeView> CoTreeView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TreeNodeMouseHoverEventArgs
// Interface: TCOM_TreeNodeMouseHoverEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TreeNodeMouseHoverEventArgs, _TreeNodeMouseHoverEventArgs, &CLSID_TreeNodeMouseHoverEventArgs, &IID__TreeNodeMouseHoverEventArgs> CoTreeNodeMouseHoverEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : UserControl
// Interface: TCOM_UserControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_UserControl, _UserControl, &CLSID_UserControl, &IID__UserControl> CoUserControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VScrollBar
// Interface: TCOM_VScrollBar
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_VScrollBar, _VScrollBar, &CLSID_VScrollBar, &IID__VScrollBar> CoVScrollBar;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebBrowser
// Interface: TCOM_WebBrowser
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_WebBrowser, _WebBrowser, &CLSID_WebBrowser, &IID__WebBrowser> CoWebBrowser;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebBrowserBase
// Interface: TCOM_WebBrowserBase
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_WebBrowserBase, _WebBrowserBase, &CLSID_WebBrowserBase, &IID__WebBrowserBase> CoWebBrowserBase;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentEditorForm
// Interface: TCOM_ComponentEditorForm
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentEditorForm, _ComponentEditorForm, &CLSID_ComponentEditorForm, &IID__ComponentEditorForm> CoComponentEditorForm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentEditorPage
// Interface: TCOM_ComponentEditorPage
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentEditorPage, _ComponentEditorPage, &CLSID_ComponentEditorPage, &IID__ComponentEditorPage> CoComponentEditorPage;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace System_windows_forms_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace System_windows_forms_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // System_Windows_Forms_TLBH
