// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 29.05.2022 15:36:40 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.tlb (2)
// LIBID: {BEE4BFEC-6683-3E67-9167-3C0CBC68F40A}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.0 mscorlib, (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscorlib.tlb)
// Parent TypeLibrary:
//   (0) v27.0 Borland_Studio_ToolsAPI, (C:\Program Files (x86)\Embarcadero\Studio\21.0\bin\Borland.Studio.ToolsAPI.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   System_TLBH
#define   System_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace System_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    2.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SYSTEM;
extern __declspec (package) const GUID IID__CodeDomProvider;
extern __declspec (package) const GUID IID__TypeConverter;
extern __declspec (package) const GUID IID__CodeTypeMember;
extern __declspec (package) const GUID IID_ITypeDescriptorContext;
extern __declspec (package) const GUID IID__CodeArgumentReferenceExpression;
extern __declspec (package) const GUID IID__CodeExpression;
extern __declspec (package) const GUID IID__CodeArrayCreateExpression;
extern __declspec (package) const GUID IID__CodeTypeReference;
extern __declspec (package) const GUID IID__CodeExpressionCollection;
extern __declspec (package) const GUID IID__CodeArrayIndexerExpression;
extern __declspec (package) const GUID IID__CodeAssignStatement;
extern __declspec (package) const GUID IID__CodeStatement;
extern __declspec (package) const GUID IID__CodeAttachEventStatement;
extern __declspec (package) const GUID IID__CodeEventReferenceExpression;
extern __declspec (package) const GUID IID__CodeAttributeArgument;
extern __declspec (package) const GUID IID__CodeAttributeArgumentCollection;
extern __declspec (package) const GUID IID__CodeAttributeDeclaration;
extern __declspec (package) const GUID IID__CodeAttributeDeclarationCollection;
extern __declspec (package) const GUID IID__CodeBaseReferenceExpression;
extern __declspec (package) const GUID IID__CodeBinaryOperatorExpression;
extern __declspec (package) const GUID GUID_CodeBinaryOperatorType;
extern __declspec (package) const GUID IID__CodeCastExpression;
extern __declspec (package) const GUID IID__CodeCatchClause;
extern __declspec (package) const GUID IID__CodeStatementCollection;
extern __declspec (package) const GUID IID__CodeCatchClauseCollection;
extern __declspec (package) const GUID IID__CodeChecksumPragma;
extern __declspec (package) const GUID IID__CodeDirective;
extern __declspec (package) const GUID IID__CodeComment;
extern __declspec (package) const GUID IID__CodeObject;
extern __declspec (package) const GUID IID__CodeCommentStatement;
extern __declspec (package) const GUID IID__CodeCommentStatementCollection;
extern __declspec (package) const GUID IID__CodeCompileUnit;
extern __declspec (package) const GUID IID__CodeNamespaceCollection;
extern __declspec (package) const GUID IID__CodeDirectiveCollection;
extern __declspec (package) const GUID IID__CodeConditionStatement;
extern __declspec (package) const GUID IID__CodeConstructor;
extern __declspec (package) const GUID IID__CodeMemberMethod;
extern __declspec (package) const GUID IID__CodeDefaultValueExpression;
extern __declspec (package) const GUID IID__CodeDelegateCreateExpression;
extern __declspec (package) const GUID IID__CodeDelegateInvokeExpression;
extern __declspec (package) const GUID IID__CodeDirectionExpression;
extern __declspec (package) const GUID GUID_FieldDirection;
extern __declspec (package) const GUID IID__CodeEntryPointMethod;
extern __declspec (package) const GUID IID__CodeExpressionStatement;
extern __declspec (package) const GUID IID__CodeFieldReferenceExpression;
extern __declspec (package) const GUID IID__CodeGotoStatement;
extern __declspec (package) const GUID IID__CodeIndexerExpression;
extern __declspec (package) const GUID IID__CodeIterationStatement;
extern __declspec (package) const GUID IID__CodeLabeledStatement;
extern __declspec (package) const GUID IID__CodeLinePragma;
extern __declspec (package) const GUID IID__CodeMemberEvent;
extern __declspec (package) const GUID IID__CodeTypeReferenceCollection;
extern __declspec (package) const GUID IID__CodeMemberField;
extern __declspec (package) const GUID IID__CodeParameterDeclarationExpressionCollection;
extern __declspec (package) const GUID IID__CodeTypeParameterCollection;
extern __declspec (package) const GUID IID__CodeMemberProperty;
extern __declspec (package) const GUID IID__CodeMethodInvokeExpression;
extern __declspec (package) const GUID IID__CodeMethodReferenceExpression;
extern __declspec (package) const GUID IID__CodeMethodReturnStatement;
extern __declspec (package) const GUID IID__CodeNamespace;
extern __declspec (package) const GUID IID__CodeTypeDeclarationCollection;
extern __declspec (package) const GUID IID__CodeNamespaceImportCollection;
extern __declspec (package) const GUID IID__CodeNamespaceImport;
extern __declspec (package) const GUID IID__CodeObjectCreateExpression;
extern __declspec (package) const GUID IID__CodeParameterDeclarationExpression;
extern __declspec (package) const GUID IID__CodePrimitiveExpression;
extern __declspec (package) const GUID IID__CodePropertyReferenceExpression;
extern __declspec (package) const GUID IID__CodePropertySetValueReferenceExpression;
extern __declspec (package) const GUID IID__CodeRegionDirective;
extern __declspec (package) const GUID GUID_CodeRegionMode;
extern __declspec (package) const GUID IID__CodeRemoveEventStatement;
extern __declspec (package) const GUID IID__CodeSnippetCompileUnit;
extern __declspec (package) const GUID IID__CodeSnippetExpression;
extern __declspec (package) const GUID IID__CodeSnippetStatement;
extern __declspec (package) const GUID IID__CodeSnippetTypeMember;
extern __declspec (package) const GUID IID__CodeThisReferenceExpression;
extern __declspec (package) const GUID IID__CodeThrowExceptionStatement;
extern __declspec (package) const GUID IID__CodeTryCatchFinallyStatement;
extern __declspec (package) const GUID IID__CodeTypeConstructor;
extern __declspec (package) const GUID IID__CodeTypeDeclaration;
extern __declspec (package) const GUID IID__CodeTypeMemberCollection;
extern __declspec (package) const GUID IID__CodeTypeDelegate;
extern __declspec (package) const GUID GUID_MemberAttributes;
extern __declspec (package) const GUID IID__CodeTypeOfExpression;
extern __declspec (package) const GUID IID__CodeTypeParameter;
extern __declspec (package) const GUID GUID_CodeTypeReferenceOptions;
extern __declspec (package) const GUID IID__CodeTypeReferenceExpression;
extern __declspec (package) const GUID IID__CodeVariableDeclarationStatement;
extern __declspec (package) const GUID IID__CodeVariableReferenceExpression;
extern __declspec (package) const GUID IID__Component;
extern __declspec (package) const GUID IID__AttributeCollection;
extern __declspec (package) const GUID IID__PropertyDescriptor;
extern __declspec (package) const GUID IID_IComponent;
extern __declspec (package) const GUID IID_ISite;
extern __declspec (package) const GUID IID_IContainer;
extern __declspec (package) const GUID GUID_DesignerSerializationVisibility;
extern __declspec (package) const GUID IID__ComponentCollection;
extern __declspec (package) const GUID IID__EventDescriptor;
extern __declspec (package) const GUID IID__EventDescriptorCollection;
extern __declspec (package) const GUID IID__MemberDescriptor;
extern __declspec (package) const GUID IID__MarshalByValueComponent;
extern __declspec (package) const GUID IID_IDesigner;
extern __declspec (package) const GUID IID_IDesignerHost;
extern __declspec (package) const GUID IID__CommandID;
extern __declspec (package) const GUID IID__ComponentChangedEventArgs;
extern __declspec (package) const GUID IID__ComponentChangedEventHandler;
extern __declspec (package) const GUID IID__ComponentChangingEventArgs;
extern __declspec (package) const GUID IID__ComponentChangingEventHandler;
extern __declspec (package) const GUID IID__ComponentEventArgs;
extern __declspec (package) const GUID IID__ComponentEventHandler;
extern __declspec (package) const GUID IID__ComponentRenameEventArgs;
extern __declspec (package) const GUID IID__ComponentRenameEventHandler;
extern __declspec (package) const GUID IID__DesignerTransactionCloseEventArgs;
extern __declspec (package) const GUID IID__DesignerTransactionCloseEventHandler;
extern __declspec (package) const GUID IID__DesignerVerb;
extern __declspec (package) const GUID IID__MenuCommand;
extern __declspec (package) const GUID IID__DesignerVerbCollection;
extern __declspec (package) const GUID IID_IComponentChangeService;
extern __declspec (package) const GUID IID_IServiceContainer;
extern __declspec (package) const GUID IID_IEventBindingService;
extern __declspec (package) const GUID IID_IMenuCommandService;
extern __declspec (package) const GUID IID_IRootDesigner;
extern __declspec (package) const GUID GUID_ViewTechnology;
extern __declspec (package) const GUID IID_ISelectionService;
extern __declspec (package) const GUID GUID_SelectionTypes;
extern __declspec (package) const GUID IID__ServiceCreatorCallback;
extern __declspec (package) const GUID IID__DesignerLoader;
extern __declspec (package) const GUID IID__PerformanceCounterManager;
extern __declspec (package) const GUID IID__WebHeaderCollection;
extern __declspec (package) const GUID IID__WebClient;
extern __declspec (package) const GUID IID__StandardOleMarshalObject;
extern __declspec (package) const GUID CLSID_CodeDomProvider;
extern __declspec (package) const GUID CLSID_TypeConverter;
extern __declspec (package) const GUID CLSID_CodeTypeMember;
extern __declspec (package) const GUID CLSID_CodeArgumentReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeExpression;
extern __declspec (package) const GUID CLSID_CodeArrayCreateExpression;
extern __declspec (package) const GUID CLSID_CodeTypeReference;
extern __declspec (package) const GUID CLSID_CodeExpressionCollection;
extern __declspec (package) const GUID CLSID_CodeArrayIndexerExpression;
extern __declspec (package) const GUID CLSID_CodeAssignStatement;
extern __declspec (package) const GUID CLSID_CodeStatement;
extern __declspec (package) const GUID CLSID_CodeAttachEventStatement;
extern __declspec (package) const GUID CLSID_CodeEventReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeAttributeArgument;
extern __declspec (package) const GUID CLSID_CodeAttributeArgumentCollection;
extern __declspec (package) const GUID CLSID_CodeAttributeDeclaration;
extern __declspec (package) const GUID CLSID_CodeAttributeDeclarationCollection;
extern __declspec (package) const GUID CLSID_CodeBaseReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeBinaryOperatorExpression;
extern __declspec (package) const GUID CLSID_CodeCastExpression;
extern __declspec (package) const GUID CLSID_CodeCatchClause;
extern __declspec (package) const GUID CLSID_CodeStatementCollection;
extern __declspec (package) const GUID CLSID_CodeCatchClauseCollection;
extern __declspec (package) const GUID CLSID_CodeChecksumPragma;
extern __declspec (package) const GUID CLSID_CodeDirective;
extern __declspec (package) const GUID CLSID_CodeComment;
extern __declspec (package) const GUID CLSID_CodeObject;
extern __declspec (package) const GUID CLSID_CodeCommentStatement;
extern __declspec (package) const GUID CLSID_CodeCommentStatementCollection;
extern __declspec (package) const GUID CLSID_CodeCompileUnit;
extern __declspec (package) const GUID CLSID_CodeNamespaceCollection;
extern __declspec (package) const GUID CLSID_CodeDirectiveCollection;
extern __declspec (package) const GUID CLSID_CodeConditionStatement;
extern __declspec (package) const GUID CLSID_CodeConstructor;
extern __declspec (package) const GUID CLSID_CodeMemberMethod;
extern __declspec (package) const GUID CLSID_CodeDefaultValueExpression;
extern __declspec (package) const GUID CLSID_CodeDelegateCreateExpression;
extern __declspec (package) const GUID CLSID_CodeDelegateInvokeExpression;
extern __declspec (package) const GUID CLSID_CodeDirectionExpression;
extern __declspec (package) const GUID CLSID_CodeEntryPointMethod;
extern __declspec (package) const GUID CLSID_CodeExpressionStatement;
extern __declspec (package) const GUID CLSID_CodeFieldReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeGotoStatement;
extern __declspec (package) const GUID CLSID_CodeIndexerExpression;
extern __declspec (package) const GUID CLSID_CodeIterationStatement;
extern __declspec (package) const GUID CLSID_CodeLabeledStatement;
extern __declspec (package) const GUID CLSID_CodeLinePragma;
extern __declspec (package) const GUID CLSID_CodeMemberEvent;
extern __declspec (package) const GUID CLSID_CodeTypeReferenceCollection;
extern __declspec (package) const GUID CLSID_CodeMemberField;
extern __declspec (package) const GUID CLSID_CodeParameterDeclarationExpressionCollection;
extern __declspec (package) const GUID CLSID_CodeTypeParameterCollection;
extern __declspec (package) const GUID CLSID_CodeMemberProperty;
extern __declspec (package) const GUID CLSID_CodeMethodInvokeExpression;
extern __declspec (package) const GUID CLSID_CodeMethodReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeMethodReturnStatement;
extern __declspec (package) const GUID CLSID_CodeNamespace;
extern __declspec (package) const GUID CLSID_CodeTypeDeclarationCollection;
extern __declspec (package) const GUID CLSID_CodeNamespaceImportCollection;
extern __declspec (package) const GUID CLSID_CodeNamespaceImport;
extern __declspec (package) const GUID CLSID_CodeObjectCreateExpression;
extern __declspec (package) const GUID CLSID_CodeParameterDeclarationExpression;
extern __declspec (package) const GUID CLSID_CodePrimitiveExpression;
extern __declspec (package) const GUID CLSID_CodePropertyReferenceExpression;
extern __declspec (package) const GUID CLSID_CodePropertySetValueReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeRegionDirective;
extern __declspec (package) const GUID CLSID_CodeRemoveEventStatement;
extern __declspec (package) const GUID CLSID_CodeSnippetCompileUnit;
extern __declspec (package) const GUID CLSID_CodeSnippetExpression;
extern __declspec (package) const GUID CLSID_CodeSnippetStatement;
extern __declspec (package) const GUID CLSID_CodeSnippetTypeMember;
extern __declspec (package) const GUID CLSID_CodeThisReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeThrowExceptionStatement;
extern __declspec (package) const GUID CLSID_CodeTryCatchFinallyStatement;
extern __declspec (package) const GUID CLSID_CodeTypeConstructor;
extern __declspec (package) const GUID CLSID_CodeTypeDeclaration;
extern __declspec (package) const GUID CLSID_CodeTypeMemberCollection;
extern __declspec (package) const GUID CLSID_CodeTypeDelegate;
extern __declspec (package) const GUID CLSID_CodeTypeOfExpression;
extern __declspec (package) const GUID CLSID_CodeTypeParameter;
extern __declspec (package) const GUID CLSID_CodeTypeReferenceExpression;
extern __declspec (package) const GUID CLSID_CodeVariableDeclarationStatement;
extern __declspec (package) const GUID CLSID_CodeVariableReferenceExpression;
extern __declspec (package) const GUID CLSID_component;
extern __declspec (package) const GUID CLSID_AttributeCollection;
extern __declspec (package) const GUID CLSID_PropertyDescriptor;
extern __declspec (package) const GUID CLSID_ComponentCollection;
extern __declspec (package) const GUID CLSID_EventDescriptor;
extern __declspec (package) const GUID CLSID_EventDescriptorCollection;
extern __declspec (package) const GUID CLSID_MemberDescriptor;
extern __declspec (package) const GUID CLSID_MarshalByValueComponent;
extern __declspec (package) const GUID CLSID_CommandID;
extern __declspec (package) const GUID CLSID_ComponentChangedEventArgs;
extern __declspec (package) const GUID CLSID_ComponentChangedEventHandler;
extern __declspec (package) const GUID CLSID_ComponentChangingEventArgs;
extern __declspec (package) const GUID CLSID_ComponentChangingEventHandler;
extern __declspec (package) const GUID CLSID_ComponentEventArgs;
extern __declspec (package) const GUID CLSID_ComponentEventHandler;
extern __declspec (package) const GUID CLSID_ComponentRenameEventArgs;
extern __declspec (package) const GUID CLSID_ComponentRenameEventHandler;
extern __declspec (package) const GUID CLSID_DesignerTransactionCloseEventArgs;
extern __declspec (package) const GUID CLSID_DesignerTransactionCloseEventHandler;
extern __declspec (package) const GUID CLSID_DesignerVerb;
extern __declspec (package) const GUID CLSID_MenuCommand;
extern __declspec (package) const GUID CLSID_DesignerVerbCollection;
extern __declspec (package) const GUID CLSID_ServiceCreatorCallback;
extern __declspec (package) const GUID CLSID_DesignerLoader;
extern __declspec (package) const GUID CLSID_PerformanceCounterManager;
extern __declspec (package) const GUID CLSID_WebHeaderCollection;
extern __declspec (package) const GUID CLSID_WebClient;
extern __declspec (package) const GUID CLSID_StandardOleMarshalObject;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    CodeBinaryOperatorType;
enum class    FieldDirection;
enum class    CodeRegionMode;
enum class    MemberAttributes;
enum class    CodeTypeReferenceOptions;
enum class    DesignerSerializationVisibility;
enum class    ViewTechnology;
enum class    SelectionTypes;
interface DECLSPEC_UUID("{61059E8D-1DD2-3F4B-A4C5-D566B8968FFB}") _CodeDomProvider;
typedef TComInterface<_CodeDomProvider, &IID__CodeDomProvider> _CodeDomProviderPtr;

interface DECLSPEC_UUID("{05241989-96C5-3BF9-AB9B-37E261C1B8F8}") _TypeConverter;
typedef TComInterface<_TypeConverter, &IID__TypeConverter> _TypeConverterPtr;

interface DECLSPEC_UUID("{8068AE1D-26CB-3DB6-97CD-ED83DE116C5A}") _CodeTypeMember;
typedef TComInterface<_CodeTypeMember, &IID__CodeTypeMember> _CodeTypeMemberPtr;

interface DECLSPEC_UUID("{5CBAE170-8759-3B8A-B919-E12FB86AD1F3}") ITypeDescriptorContext;
typedef TComInterface<ITypeDescriptorContext, &IID_ITypeDescriptorContext> ITypeDescriptorContextPtr;

interface DECLSPEC_UUID("{A52B85C6-5370-35C9-A04A-04A92013862C}") _CodeArgumentReferenceExpression;
typedef TComInterface<_CodeArgumentReferenceExpression, &IID__CodeArgumentReferenceExpression> _CodeArgumentReferenceExpressionPtr;

interface DECLSPEC_UUID("{AD377794-864F-3421-9FB8-C684BBC1BC02}") _CodeExpression;
typedef TComInterface<_CodeExpression, &IID__CodeExpression> _CodeExpressionPtr;

interface DECLSPEC_UUID("{F7955E55-7F3B-3277-AA0C-F62AA615676D}") _CodeArrayCreateExpression;
typedef TComInterface<_CodeArrayCreateExpression, &IID__CodeArrayCreateExpression> _CodeArrayCreateExpressionPtr;

interface DECLSPEC_UUID("{B6D972C6-022B-3F91-9655-E288E9D32C55}") _CodeTypeReference;
typedef TComInterface<_CodeTypeReference, &IID__CodeTypeReference> _CodeTypeReferencePtr;

interface DECLSPEC_UUID("{AF72CC74-2275-362A-9141-A4A79D596F39}") _CodeExpressionCollection;
typedef TComInterface<_CodeExpressionCollection, &IID__CodeExpressionCollection> _CodeExpressionCollectionPtr;

interface DECLSPEC_UUID("{732748F5-5256-327B-A7E5-2000B07F21B3}") _CodeArrayIndexerExpression;
typedef TComInterface<_CodeArrayIndexerExpression, &IID__CodeArrayIndexerExpression> _CodeArrayIndexerExpressionPtr;

interface DECLSPEC_UUID("{E2024DE0-DC21-305D-8761-6C31F2177FB0}") _CodeAssignStatement;
typedef TComInterface<_CodeAssignStatement, &IID__CodeAssignStatement> _CodeAssignStatementPtr;

interface DECLSPEC_UUID("{B125774D-EF66-382B-878D-2D916999B0D2}") _CodeStatement;
typedef TComInterface<_CodeStatement, &IID__CodeStatement> _CodeStatementPtr;

interface DECLSPEC_UUID("{F7BC47E9-706C-3AA7-B1BA-8AB95188FA11}") _CodeAttachEventStatement;
typedef TComInterface<_CodeAttachEventStatement, &IID__CodeAttachEventStatement> _CodeAttachEventStatementPtr;

interface DECLSPEC_UUID("{35872687-5A11-34D7-85AB-865830A3BDEE}") _CodeEventReferenceExpression;
typedef TComInterface<_CodeEventReferenceExpression, &IID__CodeEventReferenceExpression> _CodeEventReferenceExpressionPtr;

interface DECLSPEC_UUID("{02EFD952-FF8C-3B72-8C33-739A506D53D9}") _CodeAttributeArgument;
typedef TComInterface<_CodeAttributeArgument, &IID__CodeAttributeArgument> _CodeAttributeArgumentPtr;

interface DECLSPEC_UUID("{FE84E484-A7EC-3D15-B5E2-EDC2DE2DB42E}") _CodeAttributeArgumentCollection;
typedef TComInterface<_CodeAttributeArgumentCollection, &IID__CodeAttributeArgumentCollection> _CodeAttributeArgumentCollectionPtr;

interface DECLSPEC_UUID("{EF72D021-2C6D-3E33-9442-574BFD6E0871}") _CodeAttributeDeclaration;
typedef TComInterface<_CodeAttributeDeclaration, &IID__CodeAttributeDeclaration> _CodeAttributeDeclarationPtr;

interface DECLSPEC_UUID("{7E9ACA22-637C-3F88-A931-AAF36A4F9A6B}") _CodeAttributeDeclarationCollection;
typedef TComInterface<_CodeAttributeDeclarationCollection, &IID__CodeAttributeDeclarationCollection> _CodeAttributeDeclarationCollectionPtr;

interface DECLSPEC_UUID("{45E29CA6-670A-3B13-9557-4E5903056BF3}") _CodeBaseReferenceExpression;
typedef TComInterface<_CodeBaseReferenceExpression, &IID__CodeBaseReferenceExpression> _CodeBaseReferenceExpressionPtr;

interface DECLSPEC_UUID("{A22929C9-D301-3F5B-98B7-844FDBA1DEDF}") _CodeBinaryOperatorExpression;
typedef TComInterface<_CodeBinaryOperatorExpression, &IID__CodeBinaryOperatorExpression> _CodeBinaryOperatorExpressionPtr;

interface DECLSPEC_UUID("{90BED8ED-21E3-31FE-8F02-C929BA4FB0AC}") _CodeCastExpression;
typedef TComInterface<_CodeCastExpression, &IID__CodeCastExpression> _CodeCastExpressionPtr;

interface DECLSPEC_UUID("{609C7788-BDB0-364C-92E3-FC16AC613430}") _CodeCatchClause;
typedef TComInterface<_CodeCatchClause, &IID__CodeCatchClause> _CodeCatchClausePtr;

interface DECLSPEC_UUID("{4B9A5032-4B8C-3DE6-997C-C38B4B3AF26A}") _CodeStatementCollection;
typedef TComInterface<_CodeStatementCollection, &IID__CodeStatementCollection> _CodeStatementCollectionPtr;

interface DECLSPEC_UUID("{FF5E1CD9-0478-34A4-9B9C-7C80BCB1A725}") _CodeCatchClauseCollection;
typedef TComInterface<_CodeCatchClauseCollection, &IID__CodeCatchClauseCollection> _CodeCatchClauseCollectionPtr;

interface DECLSPEC_UUID("{7EB20114-E822-358C-BDAB-DCF9E5090F23}") _CodeChecksumPragma;
typedef TComInterface<_CodeChecksumPragma, &IID__CodeChecksumPragma> _CodeChecksumPragmaPtr;

interface DECLSPEC_UUID("{767E752E-2315-35CF-9652-7FC46AE870D3}") _CodeDirective;
typedef TComInterface<_CodeDirective, &IID__CodeDirective> _CodeDirectivePtr;

interface DECLSPEC_UUID("{C94F39B3-436F-3711-9CB0-91C6299B62A2}") _CodeComment;
typedef TComInterface<_CodeComment, &IID__CodeComment> _CodeCommentPtr;

interface DECLSPEC_UUID("{EE499EFD-22E2-3740-A64A-2AB010099C01}") _CodeObject;
typedef TComInterface<_CodeObject, &IID__CodeObject> _CodeObjectPtr;

interface DECLSPEC_UUID("{0C13F8B9-F2E0-3918-A33E-3E491BDC529E}") _CodeCommentStatement;
typedef TComInterface<_CodeCommentStatement, &IID__CodeCommentStatement> _CodeCommentStatementPtr;

interface DECLSPEC_UUID("{E34CEB72-8F86-333D-AEDA-069221DF6A1A}") _CodeCommentStatementCollection;
typedef TComInterface<_CodeCommentStatementCollection, &IID__CodeCommentStatementCollection> _CodeCommentStatementCollectionPtr;

interface DECLSPEC_UUID("{6F20C263-AF67-380F-A482-9A21F7599748}") _CodeCompileUnit;
typedef TComInterface<_CodeCompileUnit, &IID__CodeCompileUnit> _CodeCompileUnitPtr;

interface DECLSPEC_UUID("{F5E54F16-ADE3-3B5D-8B05-1F9803557905}") _CodeNamespaceCollection;
typedef TComInterface<_CodeNamespaceCollection, &IID__CodeNamespaceCollection> _CodeNamespaceCollectionPtr;

interface DECLSPEC_UUID("{EEFBDD27-4904-3E90-ACFC-624164CB45DD}") _CodeDirectiveCollection;
typedef TComInterface<_CodeDirectiveCollection, &IID__CodeDirectiveCollection> _CodeDirectiveCollectionPtr;

interface DECLSPEC_UUID("{69904B31-5FB5-39BF-83B0-5DDFA1F26D71}") _CodeConditionStatement;
typedef TComInterface<_CodeConditionStatement, &IID__CodeConditionStatement> _CodeConditionStatementPtr;

interface DECLSPEC_UUID("{5A33C771-806E-337D-AE1F-66B523FC49BF}") _CodeConstructor;
typedef TComInterface<_CodeConstructor, &IID__CodeConstructor> _CodeConstructorPtr;

interface DECLSPEC_UUID("{95C2EE26-4247-3DDC-8056-97353F10DE8F}") _CodeMemberMethod;
typedef TComInterface<_CodeMemberMethod, &IID__CodeMemberMethod> _CodeMemberMethodPtr;

interface DECLSPEC_UUID("{EA9E1DD2-EF9A-3570-AE1A-2F625F594C3B}") _CodeDefaultValueExpression;
typedef TComInterface<_CodeDefaultValueExpression, &IID__CodeDefaultValueExpression> _CodeDefaultValueExpressionPtr;

interface DECLSPEC_UUID("{D14E12C1-E1D1-3B74-A3AF-021A5A268FBE}") _CodeDelegateCreateExpression;
typedef TComInterface<_CodeDelegateCreateExpression, &IID__CodeDelegateCreateExpression> _CodeDelegateCreateExpressionPtr;

interface DECLSPEC_UUID("{6F6C3482-8900-36EA-B621-943534E82C73}") _CodeDelegateInvokeExpression;
typedef TComInterface<_CodeDelegateInvokeExpression, &IID__CodeDelegateInvokeExpression> _CodeDelegateInvokeExpressionPtr;

interface DECLSPEC_UUID("{11EDAF3B-144E-32C8-8BE0-81D40A950656}") _CodeDirectionExpression;
typedef TComInterface<_CodeDirectionExpression, &IID__CodeDirectionExpression> _CodeDirectionExpressionPtr;

interface DECLSPEC_UUID("{7CD4EF19-27EB-399E-8ED2-C6647A99C03E}") _CodeEntryPointMethod;
typedef TComInterface<_CodeEntryPointMethod, &IID__CodeEntryPointMethod> _CodeEntryPointMethodPtr;

interface DECLSPEC_UUID("{CEA240AF-60C5-3C69-9DA1-DA3F9A6D7B3C}") _CodeExpressionStatement;
typedef TComInterface<_CodeExpressionStatement, &IID__CodeExpressionStatement> _CodeExpressionStatementPtr;

interface DECLSPEC_UUID("{82D57B2B-C639-32A0-89B4-62A0C29DD64E}") _CodeFieldReferenceExpression;
typedef TComInterface<_CodeFieldReferenceExpression, &IID__CodeFieldReferenceExpression> _CodeFieldReferenceExpressionPtr;

interface DECLSPEC_UUID("{8F1BAED9-52EC-3545-9CF0-6ED71A76A5CA}") _CodeGotoStatement;
typedef TComInterface<_CodeGotoStatement, &IID__CodeGotoStatement> _CodeGotoStatementPtr;

interface DECLSPEC_UUID("{C92C323F-8601-34D4-A2D6-F5E2653DB456}") _CodeIndexerExpression;
typedef TComInterface<_CodeIndexerExpression, &IID__CodeIndexerExpression> _CodeIndexerExpressionPtr;

interface DECLSPEC_UUID("{B16F7137-C0E7-3ECF-9652-FB1EA947E44E}") _CodeIterationStatement;
typedef TComInterface<_CodeIterationStatement, &IID__CodeIterationStatement> _CodeIterationStatementPtr;

interface DECLSPEC_UUID("{56699CCA-FD8D-3AD2-9643-149BAD87FD60}") _CodeLabeledStatement;
typedef TComInterface<_CodeLabeledStatement, &IID__CodeLabeledStatement> _CodeLabeledStatementPtr;

interface DECLSPEC_UUID("{1B52DED6-92F3-3B4F-851C-AB1F647582A3}") _CodeLinePragma;
typedef TComInterface<_CodeLinePragma, &IID__CodeLinePragma> _CodeLinePragmaPtr;

interface DECLSPEC_UUID("{E1A7EA9F-5D43-3FA9-AFBC-9A2BFDA84B65}") _CodeMemberEvent;
typedef TComInterface<_CodeMemberEvent, &IID__CodeMemberEvent> _CodeMemberEventPtr;

interface DECLSPEC_UUID("{68A04561-D0A0-3EEB-B904-462DC4EB5531}") _CodeTypeReferenceCollection;
typedef TComInterface<_CodeTypeReferenceCollection, &IID__CodeTypeReferenceCollection> _CodeTypeReferenceCollectionPtr;

interface DECLSPEC_UUID("{EEF50D17-7AA6-3E14-96C6-DD90FE5BAA1E}") _CodeMemberField;
typedef TComInterface<_CodeMemberField, &IID__CodeMemberField> _CodeMemberFieldPtr;

interface DECLSPEC_UUID("{05192769-7D6A-3C8C-94C2-DFA668F61088}") _CodeParameterDeclarationExpressionCollection;
typedef TComInterface<_CodeParameterDeclarationExpressionCollection, &IID__CodeParameterDeclarationExpressionCollection> _CodeParameterDeclarationExpressionCollectionPtr;

interface DECLSPEC_UUID("{6E814F1F-C349-3766-B55D-87C9B0232B20}") _CodeTypeParameterCollection;
typedef TComInterface<_CodeTypeParameterCollection, &IID__CodeTypeParameterCollection> _CodeTypeParameterCollectionPtr;

interface DECLSPEC_UUID("{802E2ACC-A7F8-3CA9-9114-F49998BEBE6E}") _CodeMemberProperty;
typedef TComInterface<_CodeMemberProperty, &IID__CodeMemberProperty> _CodeMemberPropertyPtr;

interface DECLSPEC_UUID("{FFE1F142-85CF-3353-8512-EE73775E9C4C}") _CodeMethodInvokeExpression;
typedef TComInterface<_CodeMethodInvokeExpression, &IID__CodeMethodInvokeExpression> _CodeMethodInvokeExpressionPtr;

interface DECLSPEC_UUID("{CBDF02F4-A9F4-33C0-8B24-275008890DCB}") _CodeMethodReferenceExpression;
typedef TComInterface<_CodeMethodReferenceExpression, &IID__CodeMethodReferenceExpression> _CodeMethodReferenceExpressionPtr;

interface DECLSPEC_UUID("{851D821B-1E0C-3E91-832D-BA593523F566}") _CodeMethodReturnStatement;
typedef TComInterface<_CodeMethodReturnStatement, &IID__CodeMethodReturnStatement> _CodeMethodReturnStatementPtr;

interface DECLSPEC_UUID("{31ED1DCB-C007-3F96-8809-4D5E3540A7C1}") _CodeNamespace;
typedef TComInterface<_CodeNamespace, &IID__CodeNamespace> _CodeNamespacePtr;

interface DECLSPEC_UUID("{BE0ECED3-5F0D-310A-B352-7D1ADF28F8EC}") _CodeTypeDeclarationCollection;
typedef TComInterface<_CodeTypeDeclarationCollection, &IID__CodeTypeDeclarationCollection> _CodeTypeDeclarationCollectionPtr;

interface DECLSPEC_UUID("{4C545457-76D7-3C56-B277-6A9E86D1046F}") _CodeNamespaceImportCollection;
typedef TComInterface<_CodeNamespaceImportCollection, &IID__CodeNamespaceImportCollection> _CodeNamespaceImportCollectionPtr;

interface DECLSPEC_UUID("{34418787-726B-3E74-AEED-C01397FC707D}") _CodeNamespaceImport;
typedef TComInterface<_CodeNamespaceImport, &IID__CodeNamespaceImport> _CodeNamespaceImportPtr;

interface DECLSPEC_UUID("{CFE5E5E9-745F-348B-A7E6-38A46D1A20E0}") _CodeObjectCreateExpression;
typedef TComInterface<_CodeObjectCreateExpression, &IID__CodeObjectCreateExpression> _CodeObjectCreateExpressionPtr;

interface DECLSPEC_UUID("{EE96565B-2B1A-33C6-BA07-B63158F1C8C4}") _CodeParameterDeclarationExpression;
typedef TComInterface<_CodeParameterDeclarationExpression, &IID__CodeParameterDeclarationExpression> _CodeParameterDeclarationExpressionPtr;

interface DECLSPEC_UUID("{175BB49A-4CBE-38B3-8C6C-1B0145EDABB7}") _CodePrimitiveExpression;
typedef TComInterface<_CodePrimitiveExpression, &IID__CodePrimitiveExpression> _CodePrimitiveExpressionPtr;

interface DECLSPEC_UUID("{F8D64802-F9B7-3095-A641-D31E6E9F87B1}") _CodePropertyReferenceExpression;
typedef TComInterface<_CodePropertyReferenceExpression, &IID__CodePropertyReferenceExpression> _CodePropertyReferenceExpressionPtr;

interface DECLSPEC_UUID("{2EE13FA1-8A02-3573-9AC9-4FEBD2CEAB45}") _CodePropertySetValueReferenceExpression;
typedef TComInterface<_CodePropertySetValueReferenceExpression, &IID__CodePropertySetValueReferenceExpression> _CodePropertySetValueReferenceExpressionPtr;

interface DECLSPEC_UUID("{26AE5CC6-CCFD-3906-8B68-16E5EEFABB10}") _CodeRegionDirective;
typedef TComInterface<_CodeRegionDirective, &IID__CodeRegionDirective> _CodeRegionDirectivePtr;

interface DECLSPEC_UUID("{853BC437-CA6E-375D-BCBB-818E917D9691}") _CodeRemoveEventStatement;
typedef TComInterface<_CodeRemoveEventStatement, &IID__CodeRemoveEventStatement> _CodeRemoveEventStatementPtr;

interface DECLSPEC_UUID("{C7D34CF6-CF82-38B0-BF67-EB36DA63AE6E}") _CodeSnippetCompileUnit;
typedef TComInterface<_CodeSnippetCompileUnit, &IID__CodeSnippetCompileUnit> _CodeSnippetCompileUnitPtr;

interface DECLSPEC_UUID("{9F3E3CD1-8082-31E9-851C-3E177E56A87B}") _CodeSnippetExpression;
typedef TComInterface<_CodeSnippetExpression, &IID__CodeSnippetExpression> _CodeSnippetExpressionPtr;

interface DECLSPEC_UUID("{B4B00613-C48B-3FA9-B8F6-A527EC6F21C3}") _CodeSnippetStatement;
typedef TComInterface<_CodeSnippetStatement, &IID__CodeSnippetStatement> _CodeSnippetStatementPtr;

interface DECLSPEC_UUID("{575BF8D0-7A9D-39EB-81F9-AA2BEBA890FA}") _CodeSnippetTypeMember;
typedef TComInterface<_CodeSnippetTypeMember, &IID__CodeSnippetTypeMember> _CodeSnippetTypeMemberPtr;

interface DECLSPEC_UUID("{3B4A1A6B-8E65-355D-B93A-E6AB753B2401}") _CodeThisReferenceExpression;
typedef TComInterface<_CodeThisReferenceExpression, &IID__CodeThisReferenceExpression> _CodeThisReferenceExpressionPtr;

interface DECLSPEC_UUID("{12350E95-6F4E-30F0-9343-72F1C64380A0}") _CodeThrowExceptionStatement;
typedef TComInterface<_CodeThrowExceptionStatement, &IID__CodeThrowExceptionStatement> _CodeThrowExceptionStatementPtr;

interface DECLSPEC_UUID("{8FD0F76A-29BF-3982-8335-C9B44ABF31C3}") _CodeTryCatchFinallyStatement;
typedef TComInterface<_CodeTryCatchFinallyStatement, &IID__CodeTryCatchFinallyStatement> _CodeTryCatchFinallyStatementPtr;

interface DECLSPEC_UUID("{261AD877-0F22-33DE-9A3A-31F5DA424B30}") _CodeTypeConstructor;
typedef TComInterface<_CodeTypeConstructor, &IID__CodeTypeConstructor> _CodeTypeConstructorPtr;

interface DECLSPEC_UUID("{7AA363E1-FA53-31EB-BE4A-1EB4838264F3}") _CodeTypeDeclaration;
typedef TComInterface<_CodeTypeDeclaration, &IID__CodeTypeDeclaration> _CodeTypeDeclarationPtr;

interface DECLSPEC_UUID("{F943231E-6192-33A0-9CA3-D6ED0E4F323D}") _CodeTypeMemberCollection;
typedef TComInterface<_CodeTypeMemberCollection, &IID__CodeTypeMemberCollection> _CodeTypeMemberCollectionPtr;

interface DECLSPEC_UUID("{455090AB-5C44-3F4F-8EED-CCC90A3112B5}") _CodeTypeDelegate;
typedef TComInterface<_CodeTypeDelegate, &IID__CodeTypeDelegate> _CodeTypeDelegatePtr;

interface DECLSPEC_UUID("{12CBCE8E-75FF-312F-81B9-7FBC6212090B}") _CodeTypeOfExpression;
typedef TComInterface<_CodeTypeOfExpression, &IID__CodeTypeOfExpression> _CodeTypeOfExpressionPtr;

interface DECLSPEC_UUID("{B6ED2127-296F-3B31-AEB5-E2101E98D746}") _CodeTypeParameter;
typedef TComInterface<_CodeTypeParameter, &IID__CodeTypeParameter> _CodeTypeParameterPtr;

interface DECLSPEC_UUID("{726BB04D-2C4C-3E3D-A01A-31448DB063DD}") _CodeTypeReferenceExpression;
typedef TComInterface<_CodeTypeReferenceExpression, &IID__CodeTypeReferenceExpression> _CodeTypeReferenceExpressionPtr;

interface DECLSPEC_UUID("{4192A87C-5C57-3879-8624-AF5CA2ED9EB2}") _CodeVariableDeclarationStatement;
typedef TComInterface<_CodeVariableDeclarationStatement, &IID__CodeVariableDeclarationStatement> _CodeVariableDeclarationStatementPtr;

interface DECLSPEC_UUID("{54B54936-A71C-3A45-B982-2C484E7BCF86}") _CodeVariableReferenceExpression;
typedef TComInterface<_CodeVariableReferenceExpression, &IID__CodeVariableReferenceExpression> _CodeVariableReferenceExpressionPtr;

interface DECLSPEC_UUID("{06565C0F-C465-37DE-896F-9864BC0BFC96}") _Component;
typedef TComInterface<_Component, &IID__Component> _ComponentPtr;

interface DECLSPEC_UUID("{6F971E04-B06A-3DD0-B6F5-622826693454}") _AttributeCollection;
typedef TComInterface<_AttributeCollection, &IID__AttributeCollection> _AttributeCollectionPtr;

interface DECLSPEC_UUID("{FE5060F8-212F-3A4F-8FA8-DB2E14588C49}") _PropertyDescriptor;
typedef TComInterface<_PropertyDescriptor, &IID__PropertyDescriptor> _PropertyDescriptorPtr;

interface DECLSPEC_UUID("{B86E59F2-F1E2-389D-B5F1-C55307C8106E}") IComponent;
typedef TComInterface<IComponent, &IID_IComponent> IComponentPtr;

interface DECLSPEC_UUID("{C4E1006A-9D98-3E96-A07E-921725135C28}") ISite;
typedef TComInterface<ISite, &IID_ISite> ISitePtr;

interface DECLSPEC_UUID("{61D9C50C-4AAD-3539-AF82-4F36C19D77C8}") IContainer;
typedef TComInterface<IContainer, &IID_IContainer> IContainerPtr;

interface DECLSPEC_UUID("{42F00C62-F454-3A38-AF9E-35D4E2BDFDAC}") _ComponentCollection;
typedef TComInterface<_ComponentCollection, &IID__ComponentCollection> _ComponentCollectionPtr;

interface DECLSPEC_UUID("{95B6A563-4A39-37A2-91D7-04B8ECDD1B66}") _EventDescriptor;
typedef TComInterface<_EventDescriptor, &IID__EventDescriptor> _EventDescriptorPtr;

interface DECLSPEC_UUID("{4C933253-83F2-35B6-961A-0780FF1BAF7C}") _EventDescriptorCollection;
typedef TComInterface<_EventDescriptorCollection, &IID__EventDescriptorCollection> _EventDescriptorCollectionPtr;

interface DECLSPEC_UUID("{F55EFA91-812E-3C6E-998F-3598E93FB8A7}") _MemberDescriptor;
typedef TComInterface<_MemberDescriptor, &IID__MemberDescriptor> _MemberDescriptorPtr;

interface DECLSPEC_UUID("{35F38044-2017-3E05-BA83-1B87CC0D49C7}") _MarshalByValueComponent;
typedef TComInterface<_MarshalByValueComponent, &IID__MarshalByValueComponent> _MarshalByValueComponentPtr;

interface DECLSPEC_UUID("{6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}") IDesigner;
typedef TComInterface<IDesigner, &IID_IDesigner> IDesignerPtr;

interface DECLSPEC_UUID("{EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}") IDesignerHost;
typedef TComInterface<IDesignerHost, &IID_IDesignerHost> IDesignerHostPtr;

interface DECLSPEC_UUID("{FC50598B-2406-33D2-BA9A-CFBEA52BC05A}") _CommandID;
typedef TComInterface<_CommandID, &IID__CommandID> _CommandIDPtr;

interface DECLSPEC_UUID("{A8FEF1C6-D434-3686-A4DE-B68E8EABB509}") _ComponentChangedEventArgs;
typedef TComInterface<_ComponentChangedEventArgs, &IID__ComponentChangedEventArgs> _ComponentChangedEventArgsPtr;

interface DECLSPEC_UUID("{0451C390-1F90-341D-9278-B9FF2636D67D}") _ComponentChangedEventHandler;
typedef TComInterface<_ComponentChangedEventHandler, &IID__ComponentChangedEventHandler> _ComponentChangedEventHandlerPtr;

interface DECLSPEC_UUID("{B78CBAA3-37DF-31C9-ABD2-CDCB1A7FBA9F}") _ComponentChangingEventArgs;
typedef TComInterface<_ComponentChangingEventArgs, &IID__ComponentChangingEventArgs> _ComponentChangingEventArgsPtr;

interface DECLSPEC_UUID("{7F8C2DA3-D337-334F-92E9-87BE9BDC6070}") _ComponentChangingEventHandler;
typedef TComInterface<_ComponentChangingEventHandler, &IID__ComponentChangingEventHandler> _ComponentChangingEventHandlerPtr;

interface DECLSPEC_UUID("{438E8DCF-6875-305F-8CA5-40DBB15782A6}") _ComponentEventArgs;
typedef TComInterface<_ComponentEventArgs, &IID__ComponentEventArgs> _ComponentEventArgsPtr;

interface DECLSPEC_UUID("{290B355D-80D3-3AFA-96AB-B4D395729374}") _ComponentEventHandler;
typedef TComInterface<_ComponentEventHandler, &IID__ComponentEventHandler> _ComponentEventHandlerPtr;

interface DECLSPEC_UUID("{DA5D7739-9522-3E28-9AB7-7C2D7D27C63A}") _ComponentRenameEventArgs;
typedef TComInterface<_ComponentRenameEventArgs, &IID__ComponentRenameEventArgs> _ComponentRenameEventArgsPtr;

interface DECLSPEC_UUID("{BA2DF049-DA87-3BD1-97B0-7904B59ADF7E}") _ComponentRenameEventHandler;
typedef TComInterface<_ComponentRenameEventHandler, &IID__ComponentRenameEventHandler> _ComponentRenameEventHandlerPtr;

interface DECLSPEC_UUID("{3924A637-C2C4-3558-945F-279B5AC39ED9}") _DesignerTransactionCloseEventArgs;
typedef TComInterface<_DesignerTransactionCloseEventArgs, &IID__DesignerTransactionCloseEventArgs> _DesignerTransactionCloseEventArgsPtr;

interface DECLSPEC_UUID("{4543D155-EE6A-3529-BC8D-CF0E866B6B0B}") _DesignerTransactionCloseEventHandler;
typedef TComInterface<_DesignerTransactionCloseEventHandler, &IID__DesignerTransactionCloseEventHandler> _DesignerTransactionCloseEventHandlerPtr;

interface DECLSPEC_UUID("{7C41B90E-52FB-3E54-8B03-EBE0BF172C84}") _DesignerVerb;
typedef TComInterface<_DesignerVerb, &IID__DesignerVerb> _DesignerVerbPtr;

interface DECLSPEC_UUID("{1FF238CE-6190-3750-A34F-05F02B7315A6}") _MenuCommand;
typedef TComInterface<_MenuCommand, &IID__MenuCommand> _MenuCommandPtr;

interface DECLSPEC_UUID("{AC3BDDA4-25B8-3321-A1C0-7C37BBF2DDED}") _DesignerVerbCollection;
typedef TComInterface<_DesignerVerbCollection, &IID__DesignerVerbCollection> _DesignerVerbCollectionPtr;

interface DECLSPEC_UUID("{2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}") IComponentChangeService;
typedef TComInterface<IComponentChangeService, &IID_IComponentChangeService> IComponentChangeServicePtr;

interface DECLSPEC_UUID("{6BA96B42-7FDD-3223-BF52-7FE677B92815}") IServiceContainer;
typedef TComInterface<IServiceContainer, &IID_IServiceContainer> IServiceContainerPtr;

interface DECLSPEC_UUID("{1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}") IEventBindingService;
typedef TComInterface<IEventBindingService, &IID_IEventBindingService> IEventBindingServicePtr;

interface DECLSPEC_UUID("{DF651C5D-783E-3789-901F-A962B7587E69}") IMenuCommandService;
typedef TComInterface<IMenuCommandService, &IID_IMenuCommandService> IMenuCommandServicePtr;

interface DECLSPEC_UUID("{2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}") IRootDesigner;
typedef TComInterface<IRootDesigner, &IID_IRootDesigner> IRootDesignerPtr;

interface DECLSPEC_UUID("{297A65BE-5080-3F7F-AD19-B0D05D6F2327}") ISelectionService;
typedef TComInterface<ISelectionService, &IID_ISelectionService> ISelectionServicePtr;

interface DECLSPEC_UUID("{BE380BEC-79F2-3876-B510-FA2FE43B7EB7}") _ServiceCreatorCallback;
typedef TComInterface<_ServiceCreatorCallback, &IID__ServiceCreatorCallback> _ServiceCreatorCallbackPtr;

interface DECLSPEC_UUID("{43BE964C-1B4A-3D1F-9D94-8185A1E6CB7B}") _DesignerLoader;
typedef TComInterface<_DesignerLoader, &IID__DesignerLoader> _DesignerLoaderPtr;

interface DECLSPEC_UUID("{A9809E7D-42F8-3284-82CF-AB5F863A29AA}") _PerformanceCounterManager;
typedef TComInterface<_PerformanceCounterManager, &IID__PerformanceCounterManager> _PerformanceCounterManagerPtr;

interface DECLSPEC_UUID("{B97E84F2-FAB2-340D-8D49-2AC85CF5C0EC}") _WebHeaderCollection;
typedef TComInterface<_WebHeaderCollection, &IID__WebHeaderCollection> _WebHeaderCollectionPtr;

interface DECLSPEC_UUID("{85B4A627-7552-3AA6-8A1C-A213C5788FEC}") _WebClient;
typedef TComInterface<_WebClient, &IID__WebClient> _WebClientPtr;

interface DECLSPEC_UUID("{05F3D6C7-D4D1-37EB-AC35-63347B838A23}") _StandardOleMarshalObject;
typedef TComInterface<_StandardOleMarshalObject, &IID__StandardOleMarshalObject> _StandardOleMarshalObjectPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _CodeDomProvider CodeDomProvider;
typedef _CodeDomProviderPtr CodeDomProviderPtr;
typedef _TypeConverter TypeConverter;
typedef _TypeConverterPtr TypeConverterPtr;
typedef _CodeTypeMember CodeTypeMember;
typedef _CodeTypeMemberPtr CodeTypeMemberPtr;
typedef _CodeArgumentReferenceExpression CodeArgumentReferenceExpression;
typedef _CodeArgumentReferenceExpressionPtr CodeArgumentReferenceExpressionPtr;
typedef _CodeExpression CodeExpression;
typedef _CodeExpressionPtr CodeExpressionPtr;
typedef _CodeArrayCreateExpression CodeArrayCreateExpression;
typedef _CodeArrayCreateExpressionPtr CodeArrayCreateExpressionPtr;
typedef _CodeTypeReference CodeTypeReference;
typedef _CodeTypeReferencePtr CodeTypeReferencePtr;
typedef _CodeExpressionCollection CodeExpressionCollection;
typedef _CodeExpressionCollectionPtr CodeExpressionCollectionPtr;
typedef _CodeArrayIndexerExpression CodeArrayIndexerExpression;
typedef _CodeArrayIndexerExpressionPtr CodeArrayIndexerExpressionPtr;
typedef _CodeAssignStatement CodeAssignStatement;
typedef _CodeAssignStatementPtr CodeAssignStatementPtr;
typedef _CodeStatement CodeStatement;
typedef _CodeStatementPtr CodeStatementPtr;
typedef _CodeAttachEventStatement CodeAttachEventStatement;
typedef _CodeAttachEventStatementPtr CodeAttachEventStatementPtr;
typedef _CodeEventReferenceExpression CodeEventReferenceExpression;
typedef _CodeEventReferenceExpressionPtr CodeEventReferenceExpressionPtr;
typedef _CodeAttributeArgument CodeAttributeArgument;
typedef _CodeAttributeArgumentPtr CodeAttributeArgumentPtr;
typedef _CodeAttributeArgumentCollection CodeAttributeArgumentCollection;
typedef _CodeAttributeArgumentCollectionPtr CodeAttributeArgumentCollectionPtr;
typedef _CodeAttributeDeclaration CodeAttributeDeclaration;
typedef _CodeAttributeDeclarationPtr CodeAttributeDeclarationPtr;
typedef _CodeAttributeDeclarationCollection CodeAttributeDeclarationCollection;
typedef _CodeAttributeDeclarationCollectionPtr CodeAttributeDeclarationCollectionPtr;
typedef _CodeBaseReferenceExpression CodeBaseReferenceExpression;
typedef _CodeBaseReferenceExpressionPtr CodeBaseReferenceExpressionPtr;
typedef _CodeBinaryOperatorExpression CodeBinaryOperatorExpression;
typedef _CodeBinaryOperatorExpressionPtr CodeBinaryOperatorExpressionPtr;
typedef _CodeCastExpression CodeCastExpression;
typedef _CodeCastExpressionPtr CodeCastExpressionPtr;
typedef _CodeCatchClause CodeCatchClause;
typedef _CodeCatchClausePtr CodeCatchClausePtr;
typedef _CodeStatementCollection CodeStatementCollection;
typedef _CodeStatementCollectionPtr CodeStatementCollectionPtr;
typedef _CodeCatchClauseCollection CodeCatchClauseCollection;
typedef _CodeCatchClauseCollectionPtr CodeCatchClauseCollectionPtr;
typedef _CodeChecksumPragma CodeChecksumPragma;
typedef _CodeChecksumPragmaPtr CodeChecksumPragmaPtr;
typedef _CodeDirective CodeDirective;
typedef _CodeDirectivePtr CodeDirectivePtr;
typedef _CodeComment CodeComment;
typedef _CodeCommentPtr CodeCommentPtr;
typedef _CodeObject CodeObject;
typedef _CodeObjectPtr CodeObjectPtr;
typedef _CodeCommentStatement CodeCommentStatement;
typedef _CodeCommentStatementPtr CodeCommentStatementPtr;
typedef _CodeCommentStatementCollection CodeCommentStatementCollection;
typedef _CodeCommentStatementCollectionPtr CodeCommentStatementCollectionPtr;
typedef _CodeCompileUnit CodeCompileUnit;
typedef _CodeCompileUnitPtr CodeCompileUnitPtr;
typedef _CodeNamespaceCollection CodeNamespaceCollection;
typedef _CodeNamespaceCollectionPtr CodeNamespaceCollectionPtr;
typedef _CodeDirectiveCollection CodeDirectiveCollection;
typedef _CodeDirectiveCollectionPtr CodeDirectiveCollectionPtr;
typedef _CodeConditionStatement CodeConditionStatement;
typedef _CodeConditionStatementPtr CodeConditionStatementPtr;
typedef _CodeConstructor CodeConstructor;
typedef _CodeConstructorPtr CodeConstructorPtr;
typedef _CodeMemberMethod CodeMemberMethod;
typedef _CodeMemberMethodPtr CodeMemberMethodPtr;
typedef _CodeDefaultValueExpression CodeDefaultValueExpression;
typedef _CodeDefaultValueExpressionPtr CodeDefaultValueExpressionPtr;
typedef _CodeDelegateCreateExpression CodeDelegateCreateExpression;
typedef _CodeDelegateCreateExpressionPtr CodeDelegateCreateExpressionPtr;
typedef _CodeDelegateInvokeExpression CodeDelegateInvokeExpression;
typedef _CodeDelegateInvokeExpressionPtr CodeDelegateInvokeExpressionPtr;
typedef _CodeDirectionExpression CodeDirectionExpression;
typedef _CodeDirectionExpressionPtr CodeDirectionExpressionPtr;
typedef _CodeEntryPointMethod CodeEntryPointMethod;
typedef _CodeEntryPointMethodPtr CodeEntryPointMethodPtr;
typedef _CodeExpressionStatement CodeExpressionStatement;
typedef _CodeExpressionStatementPtr CodeExpressionStatementPtr;
typedef _CodeFieldReferenceExpression CodeFieldReferenceExpression;
typedef _CodeFieldReferenceExpressionPtr CodeFieldReferenceExpressionPtr;
typedef _CodeGotoStatement CodeGotoStatement;
typedef _CodeGotoStatementPtr CodeGotoStatementPtr;
typedef _CodeIndexerExpression CodeIndexerExpression;
typedef _CodeIndexerExpressionPtr CodeIndexerExpressionPtr;
typedef _CodeIterationStatement CodeIterationStatement;
typedef _CodeIterationStatementPtr CodeIterationStatementPtr;
typedef _CodeLabeledStatement CodeLabeledStatement;
typedef _CodeLabeledStatementPtr CodeLabeledStatementPtr;
typedef _CodeLinePragma CodeLinePragma;
typedef _CodeLinePragmaPtr CodeLinePragmaPtr;
typedef _CodeMemberEvent CodeMemberEvent;
typedef _CodeMemberEventPtr CodeMemberEventPtr;
typedef _CodeTypeReferenceCollection CodeTypeReferenceCollection;
typedef _CodeTypeReferenceCollectionPtr CodeTypeReferenceCollectionPtr;
typedef _CodeMemberField CodeMemberField;
typedef _CodeMemberFieldPtr CodeMemberFieldPtr;
typedef _CodeParameterDeclarationExpressionCollection CodeParameterDeclarationExpressionCollection;
typedef _CodeParameterDeclarationExpressionCollectionPtr CodeParameterDeclarationExpressionCollectionPtr;
typedef _CodeTypeParameterCollection CodeTypeParameterCollection;
typedef _CodeTypeParameterCollectionPtr CodeTypeParameterCollectionPtr;
typedef _CodeMemberProperty CodeMemberProperty;
typedef _CodeMemberPropertyPtr CodeMemberPropertyPtr;
typedef _CodeMethodInvokeExpression CodeMethodInvokeExpression;
typedef _CodeMethodInvokeExpressionPtr CodeMethodInvokeExpressionPtr;
typedef _CodeMethodReferenceExpression CodeMethodReferenceExpression;
typedef _CodeMethodReferenceExpressionPtr CodeMethodReferenceExpressionPtr;
typedef _CodeMethodReturnStatement CodeMethodReturnStatement;
typedef _CodeMethodReturnStatementPtr CodeMethodReturnStatementPtr;
typedef _CodeNamespace CodeNamespace;
typedef _CodeNamespacePtr CodeNamespacePtr;
typedef _CodeTypeDeclarationCollection CodeTypeDeclarationCollection;
typedef _CodeTypeDeclarationCollectionPtr CodeTypeDeclarationCollectionPtr;
typedef _CodeNamespaceImportCollection CodeNamespaceImportCollection;
typedef _CodeNamespaceImportCollectionPtr CodeNamespaceImportCollectionPtr;
typedef _CodeNamespaceImport CodeNamespaceImport;
typedef _CodeNamespaceImportPtr CodeNamespaceImportPtr;
typedef _CodeObjectCreateExpression CodeObjectCreateExpression;
typedef _CodeObjectCreateExpressionPtr CodeObjectCreateExpressionPtr;
typedef _CodeParameterDeclarationExpression CodeParameterDeclarationExpression;
typedef _CodeParameterDeclarationExpressionPtr CodeParameterDeclarationExpressionPtr;
typedef _CodePrimitiveExpression CodePrimitiveExpression;
typedef _CodePrimitiveExpressionPtr CodePrimitiveExpressionPtr;
typedef _CodePropertyReferenceExpression CodePropertyReferenceExpression;
typedef _CodePropertyReferenceExpressionPtr CodePropertyReferenceExpressionPtr;
typedef _CodePropertySetValueReferenceExpression CodePropertySetValueReferenceExpression;
typedef _CodePropertySetValueReferenceExpressionPtr CodePropertySetValueReferenceExpressionPtr;
typedef _CodeRegionDirective CodeRegionDirective;
typedef _CodeRegionDirectivePtr CodeRegionDirectivePtr;
typedef _CodeRemoveEventStatement CodeRemoveEventStatement;
typedef _CodeRemoveEventStatementPtr CodeRemoveEventStatementPtr;
typedef _CodeSnippetCompileUnit CodeSnippetCompileUnit;
typedef _CodeSnippetCompileUnitPtr CodeSnippetCompileUnitPtr;
typedef _CodeSnippetExpression CodeSnippetExpression;
typedef _CodeSnippetExpressionPtr CodeSnippetExpressionPtr;
typedef _CodeSnippetStatement CodeSnippetStatement;
typedef _CodeSnippetStatementPtr CodeSnippetStatementPtr;
typedef _CodeSnippetTypeMember CodeSnippetTypeMember;
typedef _CodeSnippetTypeMemberPtr CodeSnippetTypeMemberPtr;
typedef _CodeThisReferenceExpression CodeThisReferenceExpression;
typedef _CodeThisReferenceExpressionPtr CodeThisReferenceExpressionPtr;
typedef _CodeThrowExceptionStatement CodeThrowExceptionStatement;
typedef _CodeThrowExceptionStatementPtr CodeThrowExceptionStatementPtr;
typedef _CodeTryCatchFinallyStatement CodeTryCatchFinallyStatement;
typedef _CodeTryCatchFinallyStatementPtr CodeTryCatchFinallyStatementPtr;
typedef _CodeTypeConstructor CodeTypeConstructor;
typedef _CodeTypeConstructorPtr CodeTypeConstructorPtr;
typedef _CodeTypeDeclaration CodeTypeDeclaration;
typedef _CodeTypeDeclarationPtr CodeTypeDeclarationPtr;
typedef _CodeTypeMemberCollection CodeTypeMemberCollection;
typedef _CodeTypeMemberCollectionPtr CodeTypeMemberCollectionPtr;
typedef _CodeTypeDelegate CodeTypeDelegate;
typedef _CodeTypeDelegatePtr CodeTypeDelegatePtr;
typedef _CodeTypeOfExpression CodeTypeOfExpression;
typedef _CodeTypeOfExpressionPtr CodeTypeOfExpressionPtr;
typedef _CodeTypeParameter CodeTypeParameter;
typedef _CodeTypeParameterPtr CodeTypeParameterPtr;
typedef _CodeTypeReferenceExpression CodeTypeReferenceExpression;
typedef _CodeTypeReferenceExpressionPtr CodeTypeReferenceExpressionPtr;
typedef _CodeVariableDeclarationStatement CodeVariableDeclarationStatement;
typedef _CodeVariableDeclarationStatementPtr CodeVariableDeclarationStatementPtr;
typedef _CodeVariableReferenceExpression CodeVariableReferenceExpression;
typedef _CodeVariableReferenceExpressionPtr CodeVariableReferenceExpressionPtr;
typedef _Component component;
typedef _ComponentPtr componentPtr;
typedef _AttributeCollection AttributeCollection;
typedef _AttributeCollectionPtr AttributeCollectionPtr;
typedef _PropertyDescriptor PropertyDescriptor;
typedef _PropertyDescriptorPtr PropertyDescriptorPtr;
typedef _ComponentCollection ComponentCollection;
typedef _ComponentCollectionPtr ComponentCollectionPtr;
typedef _EventDescriptor EventDescriptor;
typedef _EventDescriptorPtr EventDescriptorPtr;
typedef _EventDescriptorCollection EventDescriptorCollection;
typedef _EventDescriptorCollectionPtr EventDescriptorCollectionPtr;
typedef _MemberDescriptor MemberDescriptor;
typedef _MemberDescriptorPtr MemberDescriptorPtr;
typedef _MarshalByValueComponent MarshalByValueComponent;
typedef _MarshalByValueComponentPtr MarshalByValueComponentPtr;
typedef _CommandID CommandID;
typedef _CommandIDPtr CommandIDPtr;
typedef _ComponentChangedEventArgs ComponentChangedEventArgs;
typedef _ComponentChangedEventArgsPtr ComponentChangedEventArgsPtr;
typedef _ComponentChangedEventHandler ComponentChangedEventHandler;
typedef _ComponentChangedEventHandlerPtr ComponentChangedEventHandlerPtr;
typedef _ComponentChangingEventArgs ComponentChangingEventArgs;
typedef _ComponentChangingEventArgsPtr ComponentChangingEventArgsPtr;
typedef _ComponentChangingEventHandler ComponentChangingEventHandler;
typedef _ComponentChangingEventHandlerPtr ComponentChangingEventHandlerPtr;
typedef _ComponentEventArgs ComponentEventArgs;
typedef _ComponentEventArgsPtr ComponentEventArgsPtr;
typedef _ComponentEventHandler ComponentEventHandler;
typedef _ComponentEventHandlerPtr ComponentEventHandlerPtr;
typedef _ComponentRenameEventArgs ComponentRenameEventArgs;
typedef _ComponentRenameEventArgsPtr ComponentRenameEventArgsPtr;
typedef _ComponentRenameEventHandler ComponentRenameEventHandler;
typedef _ComponentRenameEventHandlerPtr ComponentRenameEventHandlerPtr;
typedef _DesignerTransactionCloseEventArgs DesignerTransactionCloseEventArgs;
typedef _DesignerTransactionCloseEventArgsPtr DesignerTransactionCloseEventArgsPtr;
typedef _DesignerTransactionCloseEventHandler DesignerTransactionCloseEventHandler;
typedef _DesignerTransactionCloseEventHandlerPtr DesignerTransactionCloseEventHandlerPtr;
typedef _DesignerVerb DesignerVerb;
typedef _DesignerVerbPtr DesignerVerbPtr;
typedef _MenuCommand MenuCommand;
typedef _MenuCommandPtr MenuCommandPtr;
typedef _DesignerVerbCollection DesignerVerbCollection;
typedef _DesignerVerbCollectionPtr DesignerVerbCollectionPtr;
typedef _ServiceCreatorCallback ServiceCreatorCallback;
typedef _ServiceCreatorCallbackPtr ServiceCreatorCallbackPtr;
typedef _DesignerLoader DesignerLoader;
typedef _DesignerLoaderPtr DesignerLoaderPtr;
typedef _PerformanceCounterManager PerformanceCounterManager;
typedef _PerformanceCounterManagerPtr PerformanceCounterManagerPtr;
typedef _WebHeaderCollection WebHeaderCollection;
typedef _WebHeaderCollectionPtr WebHeaderCollectionPtr;
typedef _WebClient WebClient;
typedef _WebClientPtr WebClientPtr;
typedef _StandardOleMarshalObject StandardOleMarshalObject;
typedef _StandardOleMarshalObjectPtr StandardOleMarshalObjectPtr;

#define LIBID_OF_CodeDomProvider (&LIBID_SYSTEM)
#define LIBID_OF_TypeConverter (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeMember (&LIBID_SYSTEM)
#define LIBID_OF_CodeArgumentReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeArrayCreateExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeReference (&LIBID_SYSTEM)
#define LIBID_OF_CodeExpressionCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeArrayIndexerExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeAssignStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeAttachEventStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeEventReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeAttributeArgument (&LIBID_SYSTEM)
#define LIBID_OF_CodeAttributeArgumentCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeAttributeDeclaration (&LIBID_SYSTEM)
#define LIBID_OF_CodeAttributeDeclarationCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeBaseReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeBinaryOperatorExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeCastExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeCatchClause (&LIBID_SYSTEM)
#define LIBID_OF_CodeStatementCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeCatchClauseCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeChecksumPragma (&LIBID_SYSTEM)
#define LIBID_OF_CodeDirective (&LIBID_SYSTEM)
#define LIBID_OF_CodeComment (&LIBID_SYSTEM)
#define LIBID_OF_CodeObject (&LIBID_SYSTEM)
#define LIBID_OF_CodeCommentStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeCommentStatementCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeCompileUnit (&LIBID_SYSTEM)
#define LIBID_OF_CodeNamespaceCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeDirectiveCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeConditionStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeConstructor (&LIBID_SYSTEM)
#define LIBID_OF_CodeMemberMethod (&LIBID_SYSTEM)
#define LIBID_OF_CodeDefaultValueExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeDelegateCreateExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeDelegateInvokeExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeDirectionExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeEntryPointMethod (&LIBID_SYSTEM)
#define LIBID_OF_CodeExpressionStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeFieldReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeGotoStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeIndexerExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeIterationStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeLabeledStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeLinePragma (&LIBID_SYSTEM)
#define LIBID_OF_CodeMemberEvent (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeReferenceCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeMemberField (&LIBID_SYSTEM)
#define LIBID_OF_CodeParameterDeclarationExpressionCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeParameterCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeMemberProperty (&LIBID_SYSTEM)
#define LIBID_OF_CodeMethodInvokeExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeMethodReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeMethodReturnStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeNamespace (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeDeclarationCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeNamespaceImportCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeNamespaceImport (&LIBID_SYSTEM)
#define LIBID_OF_CodeObjectCreateExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeParameterDeclarationExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodePrimitiveExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodePropertyReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodePropertySetValueReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeRegionDirective (&LIBID_SYSTEM)
#define LIBID_OF_CodeRemoveEventStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeSnippetCompileUnit (&LIBID_SYSTEM)
#define LIBID_OF_CodeSnippetExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeSnippetStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeSnippetTypeMember (&LIBID_SYSTEM)
#define LIBID_OF_CodeThisReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeThrowExceptionStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeTryCatchFinallyStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeConstructor (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeDeclaration (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeMemberCollection (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeDelegate (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeOfExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeParameter (&LIBID_SYSTEM)
#define LIBID_OF_CodeTypeReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_CodeVariableDeclarationStatement (&LIBID_SYSTEM)
#define LIBID_OF_CodeVariableReferenceExpression (&LIBID_SYSTEM)
#define LIBID_OF_component (&LIBID_SYSTEM)
#define LIBID_OF_AttributeCollection (&LIBID_SYSTEM)
#define LIBID_OF_PropertyDescriptor (&LIBID_SYSTEM)
#define LIBID_OF_ComponentCollection (&LIBID_SYSTEM)
#define LIBID_OF_EventDescriptor (&LIBID_SYSTEM)
#define LIBID_OF_EventDescriptorCollection (&LIBID_SYSTEM)
#define LIBID_OF_MemberDescriptor (&LIBID_SYSTEM)
#define LIBID_OF_MarshalByValueComponent (&LIBID_SYSTEM)
#define LIBID_OF_CommandID (&LIBID_SYSTEM)
#define LIBID_OF_ComponentChangedEventArgs (&LIBID_SYSTEM)
#define LIBID_OF_ComponentChangedEventHandler (&LIBID_SYSTEM)
#define LIBID_OF_ComponentChangingEventArgs (&LIBID_SYSTEM)
#define LIBID_OF_ComponentChangingEventHandler (&LIBID_SYSTEM)
#define LIBID_OF_ComponentEventArgs (&LIBID_SYSTEM)
#define LIBID_OF_ComponentEventHandler (&LIBID_SYSTEM)
#define LIBID_OF_ComponentRenameEventArgs (&LIBID_SYSTEM)
#define LIBID_OF_ComponentRenameEventHandler (&LIBID_SYSTEM)
#define LIBID_OF_DesignerTransactionCloseEventArgs (&LIBID_SYSTEM)
#define LIBID_OF_DesignerTransactionCloseEventHandler (&LIBID_SYSTEM)
#define LIBID_OF_DesignerVerb (&LIBID_SYSTEM)
#define LIBID_OF_MenuCommand (&LIBID_SYSTEM)
#define LIBID_OF_DesignerVerbCollection (&LIBID_SYSTEM)
#define LIBID_OF_ServiceCreatorCallback (&LIBID_SYSTEM)
#define LIBID_OF_DesignerLoader (&LIBID_SYSTEM)
#define LIBID_OF_PerformanceCounterManager (&LIBID_SYSTEM)
#define LIBID_OF_WebHeaderCollection (&LIBID_SYSTEM)
#define LIBID_OF_WebClient (&LIBID_SYSTEM)
#define LIBID_OF_StandardOleMarshalObject (&LIBID_SYSTEM)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class CodeBinaryOperatorType
{
  CodeBinaryOperatorType_Add = 0, 
  CodeBinaryOperatorType_Assign = 5, 
  CodeBinaryOperatorType_BitwiseAnd = 10, 
  CodeBinaryOperatorType_BitwiseOr = 9, 
  CodeBinaryOperatorType_BooleanAnd = 12, 
  CodeBinaryOperatorType_BooleanOr = 11, 
  CodeBinaryOperatorType_Divide = 3, 
  CodeBinaryOperatorType_GreaterThan = 15, 
  CodeBinaryOperatorType_GreaterThanOrEqual = 16, 
  CodeBinaryOperatorType_IdentityEquality = 7, 
  CodeBinaryOperatorType_IdentityInequality = 6, 
  CodeBinaryOperatorType_LessThan = 13, 
  CodeBinaryOperatorType_LessThanOrEqual = 14, 
  CodeBinaryOperatorType_Modulus = 4, 
  CodeBinaryOperatorType_Multiply = 2, 
  CodeBinaryOperatorType_Subtract = 1, 
  CodeBinaryOperatorType_ValueEquality = 8
};

enum class FieldDirection
{
  FieldDirection_In = 0, 
  FieldDirection_Out = 1, 
  FieldDirection_Ref = 2
};

enum class CodeRegionMode
{
  CodeRegionMode_End = 2, 
  CodeRegionMode_None = 0, 
  CodeRegionMode_Start = 1
};

enum class MemberAttributes
{
  MemberAttributes_Abstract = 1, 
  MemberAttributes_AccessMask = 61440, 
  MemberAttributes_Assembly = 4096, 
  MemberAttributes_Const = 5, 
  MemberAttributes_Family = 12288, 
  MemberAttributes_FamilyAndAssembly = 8192, 
  MemberAttributes_FamilyOrAssembly = 16384, 
  MemberAttributes_Final = 2, 
  MemberAttributes_New = 16, 
  MemberAttributes_Overloaded = 256, 
  MemberAttributes_Override = 4, 
  MemberAttributes_Private = 20480, 
  MemberAttributes_Public = 24576, 
  MemberAttributes_ScopeMask = 15, 
  MemberAttributes_Static = 3, 
  MemberAttributes_VTableMask = 240
};

enum class CodeTypeReferenceOptions
{
  CodeTypeReferenceOptions_GenericTypeParameter = 2, 
  CodeTypeReferenceOptions_GlobalReference = 1
};

enum class DesignerSerializationVisibility
{
  DesignerSerializationVisibility_Content = 2, 
  DesignerSerializationVisibility_Hidden = 0, 
  DesignerSerializationVisibility_Visible = 1
};

enum class ViewTechnology
{
  ViewTechnology_Default = 2, 
  ViewTechnology_Passthrough = 0, 
  ViewTechnology_WindowsForms = 1
};

enum class SelectionTypes
{
  SelectionTypes_Add = 64, 
  SelectionTypes_Auto = 1, 
  SelectionTypes_Click = 16, 
  SelectionTypes_MouseDown = 4, 
  SelectionTypes_MouseUp = 8, 
  SelectionTypes_Normal = 1, 
  SelectionTypes_Primary = 16, 
  SelectionTypes_Remove = 128, 
  SelectionTypes_Replace = 2, 
  SelectionTypes_Toggle = 32, 
  SelectionTypes_Valid = 31
};

// *********************************************************************//
// Interface: _CodeDomProvider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {61059E8D-1DD2-3F4B-A4C5-D566B8968FFB}
// *********************************************************************//
interface _CodeDomProvider  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TypeConverter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05241989-96C5-3BF9-AB9B-37E261C1B8F8}
// *********************************************************************//
interface _TypeConverter  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8068AE1D-26CB-3DB6-97CD-ED83DE116C5A}
// *********************************************************************//
interface _CodeTypeMember  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITypeDescriptorContext
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5CBAE170-8759-3B8A-B919-E12FB86AD1F3}
// *********************************************************************//
interface ITypeDescriptorContext  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Instance(VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyDescriptor(System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnComponentChanging(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnComponentChanged(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::IContainerPtr __fastcall get_Container(void)
  {
    System_tlb::IContainerPtr pRetVal;
    OLECHECK(this->get_Container(&pRetVal));
    return pRetVal;
  }

  VARIANT __fastcall get_Instance(void)
  {
    VARIANT pRetVal;
    OLECHECK(this->get_Instance((VARIANT*)&pRetVal));
    return pRetVal;
  }

  System_tlb::_PropertyDescriptorPtr __fastcall get_PropertyDescriptor(void)
  {
    System_tlb::_PropertyDescriptorPtr pRetVal;
    OLECHECK(this->get_PropertyDescriptor(&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall OnComponentChanging(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->OnComponentChanging((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   System_tlb::_PropertyDescriptorPtr PropertyDescriptor = {read = get_PropertyDescriptor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeArgumentReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A52B85C6-5370-35C9-A04A-04A92013862C}
// *********************************************************************//
interface _CodeArgumentReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD377794-864F-3421-9FB8-C684BBC1BC02}
// *********************************************************************//
interface _CodeExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeArrayCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7955E55-7F3B-3277-AA0C-F62AA615676D}
// *********************************************************************//
interface _CodeArrayCreateExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeReference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6D972C6-022B-3F91-9655-E288E9D32C55}
// *********************************************************************//
interface _CodeTypeReference  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AF72CC74-2275-362A-9141-A4A79D596F39}
// *********************************************************************//
interface _CodeExpressionCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeArrayIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {732748F5-5256-327B-A7E5-2000B07F21B3}
// *********************************************************************//
interface _CodeArrayIndexerExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAssignStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E2024DE0-DC21-305D-8761-6C31F2177FB0}
// *********************************************************************//
interface _CodeAssignStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B125774D-EF66-382B-878D-2D916999B0D2}
// *********************************************************************//
interface _CodeStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAttachEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7BC47E9-706C-3AA7-B1BA-8AB95188FA11}
// *********************************************************************//
interface _CodeAttachEventStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeEventReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35872687-5A11-34D7-85AB-865830A3BDEE}
// *********************************************************************//
interface _CodeEventReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAttributeArgument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02EFD952-FF8C-3B72-8C33-739A506D53D9}
// *********************************************************************//
interface _CodeAttributeArgument  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAttributeArgumentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE84E484-A7EC-3D15-B5E2-EDC2DE2DB42E}
// *********************************************************************//
interface _CodeAttributeArgumentCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAttributeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EF72D021-2C6D-3E33-9442-574BFD6E0871}
// *********************************************************************//
interface _CodeAttributeDeclaration  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeAttributeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7E9ACA22-637C-3F88-A931-AAF36A4F9A6B}
// *********************************************************************//
interface _CodeAttributeDeclarationCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeBaseReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {45E29CA6-670A-3B13-9557-4E5903056BF3}
// *********************************************************************//
interface _CodeBaseReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeBinaryOperatorExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A22929C9-D301-3F5B-98B7-844FDBA1DEDF}
// *********************************************************************//
interface _CodeBinaryOperatorExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCastExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90BED8ED-21E3-31FE-8F02-C929BA4FB0AC}
// *********************************************************************//
interface _CodeCastExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCatchClause
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {609C7788-BDB0-364C-92E3-FC16AC613430}
// *********************************************************************//
interface _CodeCatchClause  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B9A5032-4B8C-3DE6-997C-C38B4B3AF26A}
// *********************************************************************//
interface _CodeStatementCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCatchClauseCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF5E1CD9-0478-34A4-9B9C-7C80BCB1A725}
// *********************************************************************//
interface _CodeCatchClauseCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeChecksumPragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB20114-E822-358C-BDAB-DCF9E5090F23}
// *********************************************************************//
interface _CodeChecksumPragma  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {767E752E-2315-35CF-9652-7FC46AE870D3}
// *********************************************************************//
interface _CodeDirective  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeComment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C94F39B3-436F-3711-9CB0-91C6299B62A2}
// *********************************************************************//
interface _CodeComment  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE499EFD-22E2-3740-A64A-2AB010099C01}
// *********************************************************************//
interface _CodeObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCommentStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C13F8B9-F2E0-3918-A33E-3E491BDC529E}
// *********************************************************************//
interface _CodeCommentStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCommentStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E34CEB72-8F86-333D-AEDA-069221DF6A1A}
// *********************************************************************//
interface _CodeCommentStatementCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F20C263-AF67-380F-A482-9A21F7599748}
// *********************************************************************//
interface _CodeCompileUnit  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeNamespaceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5E54F16-ADE3-3B5D-8B05-1F9803557905}
// *********************************************************************//
interface _CodeNamespaceCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDirectiveCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEFBDD27-4904-3E90-ACFC-624164CB45DD}
// *********************************************************************//
interface _CodeDirectiveCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeConditionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {69904B31-5FB5-39BF-83B0-5DDFA1F26D71}
// *********************************************************************//
interface _CodeConditionStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5A33C771-806E-337D-AE1F-66B523FC49BF}
// *********************************************************************//
interface _CodeConstructor  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMemberMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95C2EE26-4247-3DDC-8056-97353F10DE8F}
// *********************************************************************//
interface _CodeMemberMethod  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDefaultValueExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EA9E1DD2-EF9A-3570-AE1A-2F625F594C3B}
// *********************************************************************//
interface _CodeDefaultValueExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDelegateCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14E12C1-E1D1-3B74-A3AF-021A5A268FBE}
// *********************************************************************//
interface _CodeDelegateCreateExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDelegateInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F6C3482-8900-36EA-B621-943534E82C73}
// *********************************************************************//
interface _CodeDelegateInvokeExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeDirectionExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11EDAF3B-144E-32C8-8BE0-81D40A950656}
// *********************************************************************//
interface _CodeDirectionExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeEntryPointMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7CD4EF19-27EB-399E-8ED2-C6647A99C03E}
// *********************************************************************//
interface _CodeEntryPointMethod  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeExpressionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CEA240AF-60C5-3C69-9DA1-DA3F9A6D7B3C}
// *********************************************************************//
interface _CodeExpressionStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeFieldReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82D57B2B-C639-32A0-89B4-62A0C29DD64E}
// *********************************************************************//
interface _CodeFieldReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeGotoStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8F1BAED9-52EC-3545-9CF0-6ED71A76A5CA}
// *********************************************************************//
interface _CodeGotoStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C92C323F-8601-34D4-A2D6-F5E2653DB456}
// *********************************************************************//
interface _CodeIndexerExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeIterationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B16F7137-C0E7-3ECF-9652-FB1EA947E44E}
// *********************************************************************//
interface _CodeIterationStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeLabeledStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56699CCA-FD8D-3AD2-9643-149BAD87FD60}
// *********************************************************************//
interface _CodeLabeledStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeLinePragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B52DED6-92F3-3B4F-851C-AB1F647582A3}
// *********************************************************************//
interface _CodeLinePragma  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMemberEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E1A7EA9F-5D43-3FA9-AFBC-9A2BFDA84B65}
// *********************************************************************//
interface _CodeMemberEvent  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeReferenceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {68A04561-D0A0-3EEB-B904-462DC4EB5531}
// *********************************************************************//
interface _CodeTypeReferenceCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMemberField
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEF50D17-7AA6-3E14-96C6-DD90FE5BAA1E}
// *********************************************************************//
interface _CodeMemberField  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeParameterDeclarationExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05192769-7D6A-3C8C-94C2-DFA668F61088}
// *********************************************************************//
interface _CodeParameterDeclarationExpressionCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeParameterCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E814F1F-C349-3766-B55D-87C9B0232B20}
// *********************************************************************//
interface _CodeTypeParameterCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMemberProperty
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {802E2ACC-A7F8-3CA9-9114-F49998BEBE6E}
// *********************************************************************//
interface _CodeMemberProperty  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMethodInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFE1F142-85CF-3353-8512-EE73775E9C4C}
// *********************************************************************//
interface _CodeMethodInvokeExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMethodReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CBDF02F4-A9F4-33C0-8B24-275008890DCB}
// *********************************************************************//
interface _CodeMethodReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeMethodReturnStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {851D821B-1E0C-3E91-832D-BA593523F566}
// *********************************************************************//
interface _CodeMethodReturnStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeNamespace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {31ED1DCB-C007-3F96-8809-4D5E3540A7C1}
// *********************************************************************//
interface _CodeNamespace  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE0ECED3-5F0D-310A-B352-7D1ADF28F8EC}
// *********************************************************************//
interface _CodeTypeDeclarationCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeNamespaceImportCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C545457-76D7-3C56-B277-6A9E86D1046F}
// *********************************************************************//
interface _CodeNamespaceImportCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeNamespaceImport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {34418787-726B-3E74-AEED-C01397FC707D}
// *********************************************************************//
interface _CodeNamespaceImport  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeObjectCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CFE5E5E9-745F-348B-A7E6-38A46D1A20E0}
// *********************************************************************//
interface _CodeObjectCreateExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeParameterDeclarationExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE96565B-2B1A-33C6-BA07-B63158F1C8C4}
// *********************************************************************//
interface _CodeParameterDeclarationExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodePrimitiveExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {175BB49A-4CBE-38B3-8C6C-1B0145EDABB7}
// *********************************************************************//
interface _CodePrimitiveExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodePropertyReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F8D64802-F9B7-3095-A641-D31E6E9F87B1}
// *********************************************************************//
interface _CodePropertyReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodePropertySetValueReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EE13FA1-8A02-3573-9AC9-4FEBD2CEAB45}
// *********************************************************************//
interface _CodePropertySetValueReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeRegionDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26AE5CC6-CCFD-3906-8B68-16E5EEFABB10}
// *********************************************************************//
interface _CodeRegionDirective  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeRemoveEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {853BC437-CA6E-375D-BCBB-818E917D9691}
// *********************************************************************//
interface _CodeRemoveEventStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeSnippetCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C7D34CF6-CF82-38B0-BF67-EB36DA63AE6E}
// *********************************************************************//
interface _CodeSnippetCompileUnit  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeSnippetExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9F3E3CD1-8082-31E9-851C-3E177E56A87B}
// *********************************************************************//
interface _CodeSnippetExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeSnippetStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B4B00613-C48B-3FA9-B8F6-A527EC6F21C3}
// *********************************************************************//
interface _CodeSnippetStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeSnippetTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {575BF8D0-7A9D-39EB-81F9-AA2BEBA890FA}
// *********************************************************************//
interface _CodeSnippetTypeMember  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeThisReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B4A1A6B-8E65-355D-B93A-E6AB753B2401}
// *********************************************************************//
interface _CodeThisReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeThrowExceptionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12350E95-6F4E-30F0-9343-72F1C64380A0}
// *********************************************************************//
interface _CodeThrowExceptionStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTryCatchFinallyStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD0F76A-29BF-3982-8335-C9B44ABF31C3}
// *********************************************************************//
interface _CodeTryCatchFinallyStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {261AD877-0F22-33DE-9A3A-31F5DA424B30}
// *********************************************************************//
interface _CodeTypeConstructor  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7AA363E1-FA53-31EB-BE4A-1EB4838264F3}
// *********************************************************************//
interface _CodeTypeDeclaration  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeMemberCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F943231E-6192-33A0-9CA3-D6ED0E4F323D}
// *********************************************************************//
interface _CodeTypeMemberCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeDelegate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {455090AB-5C44-3F4F-8EED-CCC90A3112B5}
// *********************************************************************//
interface _CodeTypeDelegate  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeOfExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12CBCE8E-75FF-312F-81B9-7FBC6212090B}
// *********************************************************************//
interface _CodeTypeOfExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeParameter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6ED2127-296F-3B31-AEB5-E2101E98D746}
// *********************************************************************//
interface _CodeTypeParameter  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeTypeReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {726BB04D-2C4C-3E3D-A01A-31448DB063DD}
// *********************************************************************//
interface _CodeTypeReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeVariableDeclarationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4192A87C-5C57-3879-8624-AF5CA2ED9EB2}
// *********************************************************************//
interface _CodeVariableDeclarationStatement  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeVariableReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54B54936-A71C-3A45-B982-2C484E7BCF86}
// *********************************************************************//
interface _CodeVariableReferenceExpression  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {06565C0F-C465-37DE-896F-9864BC0BFC96}
// *********************************************************************//
interface _Component  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _AttributeCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F971E04-B06A-3DD0-B6F5-622826693454}
// *********************************************************************//
interface _AttributeCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PropertyDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE5060F8-212F-3A4F-8FA8-DB2E14588C49}
// *********************************************************************//
interface _PropertyDescriptor  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B86E59F2-F1E2-389D-B5F1-C55307C8106E}
// *********************************************************************//
interface IComponent  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Site(System_tlb::ISite** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_Site(System_tlb::ISite* pRetVal/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE add_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::ISitePtr __fastcall get_Site(void)
  {
    System_tlb::ISitePtr pRetVal;
    OLECHECK(this->get_Site(&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::ISitePtr Site = {read = get_Site};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISite
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C4E1006A-9D98-3E96-A07E-921725135C28}
// *********************************************************************//
interface ISite  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DesignMode(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_name(BSTR pRetVal/*[in]*/) = 0; // [1610743811]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::IComponentPtr __fastcall get_component(void)
  {
    System_tlb::IComponentPtr pRetVal;
    OLECHECK(this->get_component(&pRetVal));
    return pRetVal;
  }

  System_tlb::IContainerPtr __fastcall get_Container(void)
  {
    System_tlb::IContainerPtr pRetVal;
    OLECHECK(this->get_Container(&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall get_DesignMode(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->get_DesignMode((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall get_name(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_name((BSTR*)&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::IComponentPtr component = {read = get_component};
  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   VARIANT_BOOL    DesignMode = {read = get_DesignMode};
  __property   BSTR            name = {read = get_name, write = set_name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61D9C50C-4AAD-3539-AF82-4F36C19D77C8}
// *********************************************************************//
interface IContainer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Add(System_tlb::IComponent* component/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add_2(System_tlb::IComponent* component/*[in]*/, 
                                          BSTR name/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Components(System_tlb::_ComponentCollection** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(System_tlb::IComponent* component/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::_ComponentCollectionPtr __fastcall get_Components(void)
  {
    System_tlb::_ComponentCollectionPtr pRetVal;
    OLECHECK(this->get_Components(&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::_ComponentCollectionPtr Components = {read = get_Components};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42F00C62-F454-3A38-AF9E-35D4E2BDFDAC}
// *********************************************************************//
interface _ComponentCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _EventDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95B6A563-4A39-37A2-91D7-04B8ECDD1B66}
// *********************************************************************//
interface _EventDescriptor  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _EventDescriptorCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C933253-83F2-35B6-961A-0780FF1BAF7C}
// *********************************************************************//
interface _EventDescriptorCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MemberDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F55EFA91-812E-3C6E-998F-3598E93FB8A7}
// *********************************************************************//
interface _MemberDescriptor  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MarshalByValueComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35F38044-2017-3E05-BA83-1B87CC0D49C7}
// *********************************************************************//
interface _MarshalByValueComponent  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}
// *********************************************************************//
interface IDesigner  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DoDefaultAction(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Initialize(System_tlb::IComponent* component/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::IComponentPtr __fastcall get_component(void)
  {
    System_tlb::IComponentPtr pRetVal;
    OLECHECK(this->get_component(&pRetVal));
    return pRetVal;
  }

  System_tlb::_DesignerVerbCollectionPtr __fastcall get_Verbs(void)
  {
    System_tlb::_DesignerVerbCollectionPtr pRetVal;
    OLECHECK(this->get_Verbs(&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::IComponentPtr component = {read = get_component};
  __property   System_tlb::_DesignerVerbCollectionPtr Verbs = {read = get_Verbs};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDesignerHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}
// *********************************************************************//
interface IDesignerHost  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Loading(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InTransaction(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RootComponent(System_tlb::IComponent** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RootComponentClassName(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TransactionDescription(BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                                    System_tlb::IComponent** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                                      BSTR name/*[in]*/, 
                                                      System_tlb::IComponent** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateTransaction(LPUNKNOWN* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateTransaction_2(BSTR description/*[in]*/, 
                                                        LPUNKNOWN* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DestroyComponent(System_tlb::IComponent* component/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDesigner(System_tlb::IComponent* component/*[in]*/, 
                                                System_tlb::IDesigner** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetType(BSTR typeName/*[in]*/, 
                                            Mscorlib_tlb::_Type** pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Loading(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->get_Loading((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall get_InTransaction(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->get_InTransaction((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  System_tlb::IContainerPtr __fastcall get_Container(void)
  {
    System_tlb::IContainerPtr pRetVal;
    OLECHECK(this->get_Container(&pRetVal));
    return pRetVal;
  }

  System_tlb::IComponentPtr __fastcall get_RootComponent(void)
  {
    System_tlb::IComponentPtr pRetVal;
    OLECHECK(this->get_RootComponent(&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall get_RootComponentClassName(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_RootComponentClassName((BSTR*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall get_TransactionDescription(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_TransactionDescription((BSTR*)&pRetVal));
    return pRetVal;
  }

  System_tlb::IComponent* __fastcall CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/)
  {
    System_tlb::IComponent* pRetVal = 0;
    OLECHECK(this->CreateComponent(componentClass, (System_tlb::IComponent**)&pRetVal));
    return pRetVal;
  }

  System_tlb::IComponent* __fastcall CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                                       BSTR name/*[in]*/)
  {
    System_tlb::IComponent* pRetVal = 0;
    OLECHECK(this->CreateComponent_2(componentClass, name, (System_tlb::IComponent**)&pRetVal));
    return pRetVal;
  }

  LPUNKNOWN __fastcall CreateTransaction(void)
  {
    LPUNKNOWN pRetVal;
    OLECHECK(this->CreateTransaction((LPUNKNOWN*)&pRetVal));
    return pRetVal;
  }

  LPUNKNOWN __fastcall CreateTransaction_2(BSTR description/*[in]*/)
  {
    LPUNKNOWN pRetVal;
    OLECHECK(this->CreateTransaction_2(description, (LPUNKNOWN*)&pRetVal));
    return pRetVal;
  }

  System_tlb::IDesigner* __fastcall GetDesigner(System_tlb::IComponent* component/*[in]*/)
  {
    System_tlb::IDesigner* pRetVal = 0;
    OLECHECK(this->GetDesigner(component, (System_tlb::IDesigner**)&pRetVal));
    return pRetVal;
  }

  Mscorlib_tlb::_Type* __fastcall GetType(BSTR typeName/*[in]*/)
  {
    Mscorlib_tlb::_Type* pRetVal = 0;
    OLECHECK(this->GetType(typeName, (Mscorlib_tlb::_Type**)&pRetVal));
    return pRetVal;
  }


  __property   VARIANT_BOOL    Loading = {read = get_Loading};
  __property   VARIANT_BOOL    InTransaction = {read = get_InTransaction};
  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   System_tlb::IComponentPtr RootComponent = {read = get_RootComponent};
  __property   BSTR            RootComponentClassName = {read = get_RootComponentClassName};
  __property   BSTR            TransactionDescription = {read = get_TransactionDescription};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandID
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC50598B-2406-33D2-BA9A-CFBEA52BC05A}
// *********************************************************************//
interface _CommandID  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A8FEF1C6-D434-3686-A4DE-B68E8EABB509}
// *********************************************************************//
interface _ComponentChangedEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0451C390-1F90-341D-9278-B9FF2636D67D}
// *********************************************************************//
interface _ComponentChangedEventHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentChangingEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B78CBAA3-37DF-31C9-ABD2-CDCB1A7FBA9F}
// *********************************************************************//
interface _ComponentChangingEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentChangingEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7F8C2DA3-D337-334F-92E9-87BE9BDC6070}
// *********************************************************************//
interface _ComponentChangingEventHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {438E8DCF-6875-305F-8CA5-40DBB15782A6}
// *********************************************************************//
interface _ComponentEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {290B355D-80D3-3AFA-96AB-B4D395729374}
// *********************************************************************//
interface _ComponentEventHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentRenameEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DA5D7739-9522-3E28-9AB7-7C2D7D27C63A}
// *********************************************************************//
interface _ComponentRenameEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComponentRenameEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA2DF049-DA87-3BD1-97B0-7904B59ADF7E}
// *********************************************************************//
interface _ComponentRenameEventHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DesignerTransactionCloseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3924A637-C2C4-3558-945F-279B5AC39ED9}
// *********************************************************************//
interface _DesignerTransactionCloseEventArgs  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DesignerTransactionCloseEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4543D155-EE6A-3529-BC8D-CF0E866B6B0B}
// *********************************************************************//
interface _DesignerTransactionCloseEventHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DesignerVerb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7C41B90E-52FB-3E54-8B03-EBE0BF172C84}
// *********************************************************************//
interface _DesignerVerb  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MenuCommand
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1FF238CE-6190-3750-A34F-05F02B7315A6}
// *********************************************************************//
interface _MenuCommand  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DesignerVerbCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC3BDDA4-25B8-3321-A1C0-7C37BBF2DDED}
// *********************************************************************//
interface _DesignerVerbCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IComponentChangeService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}
// *********************************************************************//
interface IComponentChangeService  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE add_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnComponentChanged(VARIANT component/*[in]*/, 
                                                       System_tlb::_MemberDescriptor* member/*[in]*/, 
                                                       VARIANT oldValue/*[in]*/, 
                                                       VARIANT newValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnComponentChanging(VARIANT component/*[in]*/, 
                                                        System_tlb::_MemberDescriptor* member/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IServiceContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BA96B42-7FDD-3223-BF52-7FE677B92815}
// *********************************************************************//
interface IServiceContainer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddService(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                               VARIANT serviceInstance/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                                 VARIANT serviceInstance/*[in]*/, 
                                                 VARIANT_BOOL promote/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddService_3(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                                 System_tlb::_ServiceCreatorCallback* callback/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddService_4(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                                 System_tlb::_ServiceCreatorCallback* callback/*[in]*/, 
                                                 VARIANT_BOOL promote/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveService(Mscorlib_tlb::_Type* serviceType/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                                    VARIANT_BOOL promote/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEventBindingService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}
// *********************************************************************//
interface IEventBindingService  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                                           System_tlb::_EventDescriptor* e/*[in]*/, 
                                                           BSTR* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/, 
                                                         Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/, 
                                             System_tlb::_EventDescriptor** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/, 
                                                       LPUNKNOWN* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/, 
                                                     System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowCode(VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowCode_2(long lineNumber/*[in]*/, 
                                               VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                               System_tlb::_EventDescriptor* e/*[in]*/, 
                                               VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                         System_tlb::_EventDescriptor* e/*[in]*/)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->CreateUniqueMethodName(component, e, (BSTR*)&pRetVal));
    return pRetVal;
  }

  Mscorlib_tlb::ICollection* __fastcall GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/)
  {
    Mscorlib_tlb::ICollection* pRetVal = 0;
    OLECHECK(this->GetCompatibleMethods(e, (Mscorlib_tlb::ICollection**)&pRetVal));
    return pRetVal;
  }

  System_tlb::_EventDescriptor* __fastcall GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/)
  {
    System_tlb::_EventDescriptor* pRetVal = 0;
    OLECHECK(this->GetEvent(property, (System_tlb::_EventDescriptor**)&pRetVal));
    return pRetVal;
  }

  LPUNKNOWN __fastcall GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/)
  {
    LPUNKNOWN pRetVal;
    OLECHECK(this->GetEventProperties(events, (LPUNKNOWN*)&pRetVal));
    return pRetVal;
  }

  System_tlb::_PropertyDescriptor* __fastcall GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/)
  {
    System_tlb::_PropertyDescriptor* pRetVal = 0;
    OLECHECK(this->GetEventProperty(e, (System_tlb::_PropertyDescriptor**)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall ShowCode(void)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->ShowCode((VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall ShowCode_2(long lineNumber/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->ShowCode_2(lineNumber, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                     System_tlb::_EventDescriptor* e/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->ShowCode_3(component, e, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMenuCommandService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DF651C5D-783E-3789-901F-A962B7587E69}
// *********************************************************************//
interface IMenuCommandService  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddCommand(System_tlb::_MenuCommand* command/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddVerb(System_tlb::_DesignerVerb* verb/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE FindCommand(System_tlb::_CommandID* CommandID/*[in]*/, 
                                                System_tlb::_MenuCommand** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/, 
                                                 VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveCommand(System_tlb::_MenuCommand* command/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveVerb(System_tlb::_DesignerVerb* verb/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(System_tlb::_CommandID* menuID/*[in]*/, 
                                                    long x/*[in]*/, long y/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  System_tlb::_DesignerVerbCollectionPtr __fastcall get_Verbs(void)
  {
    System_tlb::_DesignerVerbCollectionPtr pRetVal;
    OLECHECK(this->get_Verbs(&pRetVal));
    return pRetVal;
  }

  System_tlb::_MenuCommand* __fastcall FindCommand(System_tlb::_CommandID* CommandID/*[in]*/)
  {
    System_tlb::_MenuCommand* pRetVal = 0;
    OLECHECK(this->FindCommand(CommandID, (System_tlb::_MenuCommand**)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->GlobalInvoke(CommandID, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }


  __property   System_tlb::_DesignerVerbCollectionPtr Verbs = {read = get_Verbs};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRootDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}
// *********************************************************************//
interface IRootDesigner  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SupportedTechnologies(LPSAFEARRAY* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetView(System_tlb::ViewTechnology technology/*[in]*/, 
                                            VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPSAFEARRAY __fastcall get_SupportedTechnologies(void)
  {
    LPSAFEARRAY pRetVal;
    OLECHECK(this->get_SupportedTechnologies((LPSAFEARRAY*)&pRetVal));
    return pRetVal;
  }

  VARIANT __fastcall GetView(System_tlb::ViewTechnology technology/*[in]*/)
  {
    VARIANT pRetVal;
    OLECHECK(this->GetView(technology, (VARIANT*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISelectionService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {297A65BE-5080-3F7F-AD19-B0D05D6F2327}
// *********************************************************************//
interface ISelectionService  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_PrimarySelection(VARIANT* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionCount(long* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE add_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE remove_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetComponentSelected(VARIANT component/*[in]*/, 
                                                         VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetSelectedComponents(Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSelectedComponents(Mscorlib_tlb::ICollection* Components/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSelectedComponents_2(Mscorlib_tlb::ICollection* Components/*[in]*/, 
                                                            System_tlb::SelectionTypes selectionType/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_PrimarySelection(void)
  {
    VARIANT pRetVal;
    OLECHECK(this->get_PrimarySelection((VARIANT*)&pRetVal));
    return pRetVal;
  }

  long __fastcall get_SelectionCount(void)
  {
    long pRetVal;
    OLECHECK(this->get_SelectionCount((long*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall GetComponentSelected(VARIANT component/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->GetComponentSelected(component, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  Mscorlib_tlb::ICollection* __fastcall GetSelectedComponents(void)
  {
    Mscorlib_tlb::ICollection* pRetVal = 0;
    OLECHECK(this->GetSelectedComponents((Mscorlib_tlb::ICollection**)&pRetVal));
    return pRetVal;
  }


  __property   long            SelectionCount = {read = get_SelectionCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ServiceCreatorCallback
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE380BEC-79F2-3876-B510-FA2FE43B7EB7}
// *********************************************************************//
interface _ServiceCreatorCallback  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DesignerLoader
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {43BE964C-1B4A-3D1F-9D94-8185A1E6CB7B}
// *********************************************************************//
interface _DesignerLoader  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PerformanceCounterManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A9809E7D-42F8-3284-82CF-AB5F863A29AA}
// *********************************************************************//
interface _PerformanceCounterManager  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WebHeaderCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B97E84F2-FAB2-340D-8D49-2AC85CF5C0EC}
// *********************************************************************//
interface _WebHeaderCollection  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _WebClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85B4A627-7552-3AA6-8A1C-A213C5788FEC}
// *********************************************************************//
interface _WebClient  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _StandardOleMarshalObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05F3D6C7-D4D1-37EB-AC35-63347B838A23}
// *********************************************************************//
interface _StandardOleMarshalObject  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOM_CodeDomProvider
// Interface: _CodeDomProvider
// *********************************************************************//
template <class T /* _CodeDomProvider */ >
class TCOM_CodeDomProviderT : public TComInterface<_CodeDomProvider>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDomProviderT() {}
  TCOM_CodeDomProviderT(_CodeDomProvider *intf, bool addRef = false) : TComInterface<_CodeDomProvider>(intf, addRef) {}
  TCOM_CodeDomProviderT(const TCOM_CodeDomProviderT& src) : TComInterface<_CodeDomProvider>(src) {}
  TCOM_CodeDomProviderT& operator=(const TCOM_CodeDomProviderT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDomProviderT<_CodeDomProvider> TCOM_CodeDomProvider;

// *********************************************************************//
// DispIntf:  _CodeDomProvider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {61059E8D-1DD2-3F4B-A4C5-D566B8968FFB}
// *********************************************************************//
template<class T>
class _CodeDomProviderDispT : public TAutoDriver<_CodeDomProvider>
{
public:
  _CodeDomProviderDispT(){}

  _CodeDomProviderDispT(_CodeDomProvider *pintf)
  {
    TAutoDriver<_CodeDomProvider>::Bind(pintf, false);
  }

  _CodeDomProviderDispT(_CodeDomProviderPtr pintf)
  {
    TAutoDriver<_CodeDomProvider>::Bind(pintf, true);
  }

  _CodeDomProviderDispT& operator=(_CodeDomProvider *pintf)
  {
    TAutoDriver<_CodeDomProvider>::Bind(pintf, false);
    return *this;
  }

  _CodeDomProviderDispT& operator=(_CodeDomProviderPtr pintf)
  {
    TAutoDriver<_CodeDomProvider>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDomProvider));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDomProvider);
  }


};
typedef _CodeDomProviderDispT<_CodeDomProvider> _CodeDomProviderDisp;

// *********************************************************************//
// SmartIntf: TCOM_TypeConverter
// Interface: _TypeConverter
// *********************************************************************//
template <class T /* _TypeConverter */ >
class TCOM_TypeConverterT : public TComInterface<_TypeConverter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TypeConverterT() {}
  TCOM_TypeConverterT(_TypeConverter *intf, bool addRef = false) : TComInterface<_TypeConverter>(intf, addRef) {}
  TCOM_TypeConverterT(const TCOM_TypeConverterT& src) : TComInterface<_TypeConverter>(src) {}
  TCOM_TypeConverterT& operator=(const TCOM_TypeConverterT& src) { Bind(src, true); return *this;}


};
typedef TCOM_TypeConverterT<_TypeConverter> TCOM_TypeConverter;

// *********************************************************************//
// DispIntf:  _TypeConverter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05241989-96C5-3BF9-AB9B-37E261C1B8F8}
// *********************************************************************//
template<class T>
class _TypeConverterDispT : public TAutoDriver<_TypeConverter>
{
public:
  _TypeConverterDispT(){}

  _TypeConverterDispT(_TypeConverter *pintf)
  {
    TAutoDriver<_TypeConverter>::Bind(pintf, false);
  }

  _TypeConverterDispT(_TypeConverterPtr pintf)
  {
    TAutoDriver<_TypeConverter>::Bind(pintf, true);
  }

  _TypeConverterDispT& operator=(_TypeConverter *pintf)
  {
    TAutoDriver<_TypeConverter>::Bind(pintf, false);
    return *this;
  }

  _TypeConverterDispT& operator=(_TypeConverterPtr pintf)
  {
    TAutoDriver<_TypeConverter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TypeConverter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TypeConverter);
  }


};
typedef _TypeConverterDispT<_TypeConverter> _TypeConverterDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeMember
// Interface: _CodeTypeMember
// *********************************************************************//
template <class T /* _CodeTypeMember */ >
class TCOM_CodeTypeMemberT : public TComInterface<_CodeTypeMember>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeMemberT() {}
  TCOM_CodeTypeMemberT(_CodeTypeMember *intf, bool addRef = false) : TComInterface<_CodeTypeMember>(intf, addRef) {}
  TCOM_CodeTypeMemberT(const TCOM_CodeTypeMemberT& src) : TComInterface<_CodeTypeMember>(src) {}
  TCOM_CodeTypeMemberT& operator=(const TCOM_CodeTypeMemberT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeMemberT<_CodeTypeMember> TCOM_CodeTypeMember;

// *********************************************************************//
// DispIntf:  _CodeTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8068AE1D-26CB-3DB6-97CD-ED83DE116C5A}
// *********************************************************************//
template<class T>
class _CodeTypeMemberDispT : public TAutoDriver<_CodeTypeMember>
{
public:
  _CodeTypeMemberDispT(){}

  _CodeTypeMemberDispT(_CodeTypeMember *pintf)
  {
    TAutoDriver<_CodeTypeMember>::Bind(pintf, false);
  }

  _CodeTypeMemberDispT(_CodeTypeMemberPtr pintf)
  {
    TAutoDriver<_CodeTypeMember>::Bind(pintf, true);
  }

  _CodeTypeMemberDispT& operator=(_CodeTypeMember *pintf)
  {
    TAutoDriver<_CodeTypeMember>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeMemberDispT& operator=(_CodeTypeMemberPtr pintf)
  {
    TAutoDriver<_CodeTypeMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeMember));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeMember);
  }


};
typedef _CodeTypeMemberDispT<_CodeTypeMember> _CodeTypeMemberDisp;

typedef TComInterface<ITypeDescriptorContext>  TCOMITypeDescriptorContext;

// *********************************************************************//
// DispIntf:  ITypeDescriptorContext
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5CBAE170-8759-3B8A-B919-E12FB86AD1F3}
// *********************************************************************//
template<class T>
class ITypeDescriptorContextDispT : public TAutoDriver<ITypeDescriptorContext>
{
public:
  ITypeDescriptorContextDispT(){}

  ITypeDescriptorContextDispT(ITypeDescriptorContext *pintf)
  {
    TAutoDriver<ITypeDescriptorContext>::Bind(pintf, false);
  }

  ITypeDescriptorContextDispT(ITypeDescriptorContextPtr pintf)
  {
    TAutoDriver<ITypeDescriptorContext>::Bind(pintf, true);
  }

  ITypeDescriptorContextDispT& operator=(ITypeDescriptorContext *pintf)
  {
    TAutoDriver<ITypeDescriptorContext>::Bind(pintf, false);
    return *this;
  }

  ITypeDescriptorContextDispT& operator=(ITypeDescriptorContextPtr pintf)
  {
    TAutoDriver<ITypeDescriptorContext>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/);
  System_tlb::IContainerPtr __fastcall get_Container(void);
  HRESULT         __fastcall get_Instance(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_Instance(void);
  HRESULT         __fastcall get_PropertyDescriptor(System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/);
  System_tlb::_PropertyDescriptorPtr __fastcall get_PropertyDescriptor(void);
  HRESULT         __fastcall OnComponentChanging(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall OnComponentChanging(void);
  HRESULT         __fastcall OnComponentChanged();

  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   System_tlb::_PropertyDescriptorPtr PropertyDescriptor = {read = get_PropertyDescriptor};
};
typedef ITypeDescriptorContextDispT<ITypeDescriptorContext> ITypeDescriptorContextDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeArgumentReferenceExpression
// Interface: _CodeArgumentReferenceExpression
// *********************************************************************//
template <class T /* _CodeArgumentReferenceExpression */ >
class TCOM_CodeArgumentReferenceExpressionT : public TComInterface<_CodeArgumentReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeArgumentReferenceExpressionT() {}
  TCOM_CodeArgumentReferenceExpressionT(_CodeArgumentReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeArgumentReferenceExpression>(intf, addRef) {}
  TCOM_CodeArgumentReferenceExpressionT(const TCOM_CodeArgumentReferenceExpressionT& src) : TComInterface<_CodeArgumentReferenceExpression>(src) {}
  TCOM_CodeArgumentReferenceExpressionT& operator=(const TCOM_CodeArgumentReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeArgumentReferenceExpressionT<_CodeArgumentReferenceExpression> TCOM_CodeArgumentReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeArgumentReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A52B85C6-5370-35C9-A04A-04A92013862C}
// *********************************************************************//
template<class T>
class _CodeArgumentReferenceExpressionDispT : public TAutoDriver<_CodeArgumentReferenceExpression>
{
public:
  _CodeArgumentReferenceExpressionDispT(){}

  _CodeArgumentReferenceExpressionDispT(_CodeArgumentReferenceExpression *pintf)
  {
    TAutoDriver<_CodeArgumentReferenceExpression>::Bind(pintf, false);
  }

  _CodeArgumentReferenceExpressionDispT(_CodeArgumentReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeArgumentReferenceExpression>::Bind(pintf, true);
  }

  _CodeArgumentReferenceExpressionDispT& operator=(_CodeArgumentReferenceExpression *pintf)
  {
    TAutoDriver<_CodeArgumentReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeArgumentReferenceExpressionDispT& operator=(_CodeArgumentReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeArgumentReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeArgumentReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeArgumentReferenceExpression);
  }


};
typedef _CodeArgumentReferenceExpressionDispT<_CodeArgumentReferenceExpression> _CodeArgumentReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeExpression
// Interface: _CodeExpression
// *********************************************************************//
template <class T /* _CodeExpression */ >
class TCOM_CodeExpressionT : public TComInterface<_CodeExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeExpressionT() {}
  TCOM_CodeExpressionT(_CodeExpression *intf, bool addRef = false) : TComInterface<_CodeExpression>(intf, addRef) {}
  TCOM_CodeExpressionT(const TCOM_CodeExpressionT& src) : TComInterface<_CodeExpression>(src) {}
  TCOM_CodeExpressionT& operator=(const TCOM_CodeExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeExpressionT<_CodeExpression> TCOM_CodeExpression;

// *********************************************************************//
// DispIntf:  _CodeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD377794-864F-3421-9FB8-C684BBC1BC02}
// *********************************************************************//
template<class T>
class _CodeExpressionDispT : public TAutoDriver<_CodeExpression>
{
public:
  _CodeExpressionDispT(){}

  _CodeExpressionDispT(_CodeExpression *pintf)
  {
    TAutoDriver<_CodeExpression>::Bind(pintf, false);
  }

  _CodeExpressionDispT(_CodeExpressionPtr pintf)
  {
    TAutoDriver<_CodeExpression>::Bind(pintf, true);
  }

  _CodeExpressionDispT& operator=(_CodeExpression *pintf)
  {
    TAutoDriver<_CodeExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeExpressionDispT& operator=(_CodeExpressionPtr pintf)
  {
    TAutoDriver<_CodeExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeExpression);
  }


};
typedef _CodeExpressionDispT<_CodeExpression> _CodeExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeArrayCreateExpression
// Interface: _CodeArrayCreateExpression
// *********************************************************************//
template <class T /* _CodeArrayCreateExpression */ >
class TCOM_CodeArrayCreateExpressionT : public TComInterface<_CodeArrayCreateExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeArrayCreateExpressionT() {}
  TCOM_CodeArrayCreateExpressionT(_CodeArrayCreateExpression *intf, bool addRef = false) : TComInterface<_CodeArrayCreateExpression>(intf, addRef) {}
  TCOM_CodeArrayCreateExpressionT(const TCOM_CodeArrayCreateExpressionT& src) : TComInterface<_CodeArrayCreateExpression>(src) {}
  TCOM_CodeArrayCreateExpressionT& operator=(const TCOM_CodeArrayCreateExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeArrayCreateExpressionT<_CodeArrayCreateExpression> TCOM_CodeArrayCreateExpression;

// *********************************************************************//
// DispIntf:  _CodeArrayCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7955E55-7F3B-3277-AA0C-F62AA615676D}
// *********************************************************************//
template<class T>
class _CodeArrayCreateExpressionDispT : public TAutoDriver<_CodeArrayCreateExpression>
{
public:
  _CodeArrayCreateExpressionDispT(){}

  _CodeArrayCreateExpressionDispT(_CodeArrayCreateExpression *pintf)
  {
    TAutoDriver<_CodeArrayCreateExpression>::Bind(pintf, false);
  }

  _CodeArrayCreateExpressionDispT(_CodeArrayCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeArrayCreateExpression>::Bind(pintf, true);
  }

  _CodeArrayCreateExpressionDispT& operator=(_CodeArrayCreateExpression *pintf)
  {
    TAutoDriver<_CodeArrayCreateExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeArrayCreateExpressionDispT& operator=(_CodeArrayCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeArrayCreateExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeArrayCreateExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeArrayCreateExpression);
  }


};
typedef _CodeArrayCreateExpressionDispT<_CodeArrayCreateExpression> _CodeArrayCreateExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReference
// Interface: _CodeTypeReference
// *********************************************************************//
template <class T /* _CodeTypeReference */ >
class TCOM_CodeTypeReferenceT : public TComInterface<_CodeTypeReference>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeReferenceT() {}
  TCOM_CodeTypeReferenceT(_CodeTypeReference *intf, bool addRef = false) : TComInterface<_CodeTypeReference>(intf, addRef) {}
  TCOM_CodeTypeReferenceT(const TCOM_CodeTypeReferenceT& src) : TComInterface<_CodeTypeReference>(src) {}
  TCOM_CodeTypeReferenceT& operator=(const TCOM_CodeTypeReferenceT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeReferenceT<_CodeTypeReference> TCOM_CodeTypeReference;

// *********************************************************************//
// DispIntf:  _CodeTypeReference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6D972C6-022B-3F91-9655-E288E9D32C55}
// *********************************************************************//
template<class T>
class _CodeTypeReferenceDispT : public TAutoDriver<_CodeTypeReference>
{
public:
  _CodeTypeReferenceDispT(){}

  _CodeTypeReferenceDispT(_CodeTypeReference *pintf)
  {
    TAutoDriver<_CodeTypeReference>::Bind(pintf, false);
  }

  _CodeTypeReferenceDispT(_CodeTypeReferencePtr pintf)
  {
    TAutoDriver<_CodeTypeReference>::Bind(pintf, true);
  }

  _CodeTypeReferenceDispT& operator=(_CodeTypeReference *pintf)
  {
    TAutoDriver<_CodeTypeReference>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeReferenceDispT& operator=(_CodeTypeReferencePtr pintf)
  {
    TAutoDriver<_CodeTypeReference>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeReference));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeReference);
  }


};
typedef _CodeTypeReferenceDispT<_CodeTypeReference> _CodeTypeReferenceDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeExpressionCollection
// Interface: _CodeExpressionCollection
// *********************************************************************//
template <class T /* _CodeExpressionCollection */ >
class TCOM_CodeExpressionCollectionT : public TComInterface<_CodeExpressionCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeExpressionCollectionT() {}
  TCOM_CodeExpressionCollectionT(_CodeExpressionCollection *intf, bool addRef = false) : TComInterface<_CodeExpressionCollection>(intf, addRef) {}
  TCOM_CodeExpressionCollectionT(const TCOM_CodeExpressionCollectionT& src) : TComInterface<_CodeExpressionCollection>(src) {}
  TCOM_CodeExpressionCollectionT& operator=(const TCOM_CodeExpressionCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeExpressionCollectionT<_CodeExpressionCollection> TCOM_CodeExpressionCollection;

// *********************************************************************//
// DispIntf:  _CodeExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AF72CC74-2275-362A-9141-A4A79D596F39}
// *********************************************************************//
template<class T>
class _CodeExpressionCollectionDispT : public TAutoDriver<_CodeExpressionCollection>
{
public:
  _CodeExpressionCollectionDispT(){}

  _CodeExpressionCollectionDispT(_CodeExpressionCollection *pintf)
  {
    TAutoDriver<_CodeExpressionCollection>::Bind(pintf, false);
  }

  _CodeExpressionCollectionDispT(_CodeExpressionCollectionPtr pintf)
  {
    TAutoDriver<_CodeExpressionCollection>::Bind(pintf, true);
  }

  _CodeExpressionCollectionDispT& operator=(_CodeExpressionCollection *pintf)
  {
    TAutoDriver<_CodeExpressionCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeExpressionCollectionDispT& operator=(_CodeExpressionCollectionPtr pintf)
  {
    TAutoDriver<_CodeExpressionCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeExpressionCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeExpressionCollection);
  }


};
typedef _CodeExpressionCollectionDispT<_CodeExpressionCollection> _CodeExpressionCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeArrayIndexerExpression
// Interface: _CodeArrayIndexerExpression
// *********************************************************************//
template <class T /* _CodeArrayIndexerExpression */ >
class TCOM_CodeArrayIndexerExpressionT : public TComInterface<_CodeArrayIndexerExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeArrayIndexerExpressionT() {}
  TCOM_CodeArrayIndexerExpressionT(_CodeArrayIndexerExpression *intf, bool addRef = false) : TComInterface<_CodeArrayIndexerExpression>(intf, addRef) {}
  TCOM_CodeArrayIndexerExpressionT(const TCOM_CodeArrayIndexerExpressionT& src) : TComInterface<_CodeArrayIndexerExpression>(src) {}
  TCOM_CodeArrayIndexerExpressionT& operator=(const TCOM_CodeArrayIndexerExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeArrayIndexerExpressionT<_CodeArrayIndexerExpression> TCOM_CodeArrayIndexerExpression;

// *********************************************************************//
// DispIntf:  _CodeArrayIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {732748F5-5256-327B-A7E5-2000B07F21B3}
// *********************************************************************//
template<class T>
class _CodeArrayIndexerExpressionDispT : public TAutoDriver<_CodeArrayIndexerExpression>
{
public:
  _CodeArrayIndexerExpressionDispT(){}

  _CodeArrayIndexerExpressionDispT(_CodeArrayIndexerExpression *pintf)
  {
    TAutoDriver<_CodeArrayIndexerExpression>::Bind(pintf, false);
  }

  _CodeArrayIndexerExpressionDispT(_CodeArrayIndexerExpressionPtr pintf)
  {
    TAutoDriver<_CodeArrayIndexerExpression>::Bind(pintf, true);
  }

  _CodeArrayIndexerExpressionDispT& operator=(_CodeArrayIndexerExpression *pintf)
  {
    TAutoDriver<_CodeArrayIndexerExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeArrayIndexerExpressionDispT& operator=(_CodeArrayIndexerExpressionPtr pintf)
  {
    TAutoDriver<_CodeArrayIndexerExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeArrayIndexerExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeArrayIndexerExpression);
  }


};
typedef _CodeArrayIndexerExpressionDispT<_CodeArrayIndexerExpression> _CodeArrayIndexerExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAssignStatement
// Interface: _CodeAssignStatement
// *********************************************************************//
template <class T /* _CodeAssignStatement */ >
class TCOM_CodeAssignStatementT : public TComInterface<_CodeAssignStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAssignStatementT() {}
  TCOM_CodeAssignStatementT(_CodeAssignStatement *intf, bool addRef = false) : TComInterface<_CodeAssignStatement>(intf, addRef) {}
  TCOM_CodeAssignStatementT(const TCOM_CodeAssignStatementT& src) : TComInterface<_CodeAssignStatement>(src) {}
  TCOM_CodeAssignStatementT& operator=(const TCOM_CodeAssignStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAssignStatementT<_CodeAssignStatement> TCOM_CodeAssignStatement;

// *********************************************************************//
// DispIntf:  _CodeAssignStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E2024DE0-DC21-305D-8761-6C31F2177FB0}
// *********************************************************************//
template<class T>
class _CodeAssignStatementDispT : public TAutoDriver<_CodeAssignStatement>
{
public:
  _CodeAssignStatementDispT(){}

  _CodeAssignStatementDispT(_CodeAssignStatement *pintf)
  {
    TAutoDriver<_CodeAssignStatement>::Bind(pintf, false);
  }

  _CodeAssignStatementDispT(_CodeAssignStatementPtr pintf)
  {
    TAutoDriver<_CodeAssignStatement>::Bind(pintf, true);
  }

  _CodeAssignStatementDispT& operator=(_CodeAssignStatement *pintf)
  {
    TAutoDriver<_CodeAssignStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeAssignStatementDispT& operator=(_CodeAssignStatementPtr pintf)
  {
    TAutoDriver<_CodeAssignStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAssignStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAssignStatement);
  }


};
typedef _CodeAssignStatementDispT<_CodeAssignStatement> _CodeAssignStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeStatement
// Interface: _CodeStatement
// *********************************************************************//
template <class T /* _CodeStatement */ >
class TCOM_CodeStatementT : public TComInterface<_CodeStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeStatementT() {}
  TCOM_CodeStatementT(_CodeStatement *intf, bool addRef = false) : TComInterface<_CodeStatement>(intf, addRef) {}
  TCOM_CodeStatementT(const TCOM_CodeStatementT& src) : TComInterface<_CodeStatement>(src) {}
  TCOM_CodeStatementT& operator=(const TCOM_CodeStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeStatementT<_CodeStatement> TCOM_CodeStatement;

// *********************************************************************//
// DispIntf:  _CodeStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B125774D-EF66-382B-878D-2D916999B0D2}
// *********************************************************************//
template<class T>
class _CodeStatementDispT : public TAutoDriver<_CodeStatement>
{
public:
  _CodeStatementDispT(){}

  _CodeStatementDispT(_CodeStatement *pintf)
  {
    TAutoDriver<_CodeStatement>::Bind(pintf, false);
  }

  _CodeStatementDispT(_CodeStatementPtr pintf)
  {
    TAutoDriver<_CodeStatement>::Bind(pintf, true);
  }

  _CodeStatementDispT& operator=(_CodeStatement *pintf)
  {
    TAutoDriver<_CodeStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeStatementDispT& operator=(_CodeStatementPtr pintf)
  {
    TAutoDriver<_CodeStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeStatement);
  }


};
typedef _CodeStatementDispT<_CodeStatement> _CodeStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAttachEventStatement
// Interface: _CodeAttachEventStatement
// *********************************************************************//
template <class T /* _CodeAttachEventStatement */ >
class TCOM_CodeAttachEventStatementT : public TComInterface<_CodeAttachEventStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAttachEventStatementT() {}
  TCOM_CodeAttachEventStatementT(_CodeAttachEventStatement *intf, bool addRef = false) : TComInterface<_CodeAttachEventStatement>(intf, addRef) {}
  TCOM_CodeAttachEventStatementT(const TCOM_CodeAttachEventStatementT& src) : TComInterface<_CodeAttachEventStatement>(src) {}
  TCOM_CodeAttachEventStatementT& operator=(const TCOM_CodeAttachEventStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAttachEventStatementT<_CodeAttachEventStatement> TCOM_CodeAttachEventStatement;

// *********************************************************************//
// DispIntf:  _CodeAttachEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7BC47E9-706C-3AA7-B1BA-8AB95188FA11}
// *********************************************************************//
template<class T>
class _CodeAttachEventStatementDispT : public TAutoDriver<_CodeAttachEventStatement>
{
public:
  _CodeAttachEventStatementDispT(){}

  _CodeAttachEventStatementDispT(_CodeAttachEventStatement *pintf)
  {
    TAutoDriver<_CodeAttachEventStatement>::Bind(pintf, false);
  }

  _CodeAttachEventStatementDispT(_CodeAttachEventStatementPtr pintf)
  {
    TAutoDriver<_CodeAttachEventStatement>::Bind(pintf, true);
  }

  _CodeAttachEventStatementDispT& operator=(_CodeAttachEventStatement *pintf)
  {
    TAutoDriver<_CodeAttachEventStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeAttachEventStatementDispT& operator=(_CodeAttachEventStatementPtr pintf)
  {
    TAutoDriver<_CodeAttachEventStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAttachEventStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAttachEventStatement);
  }


};
typedef _CodeAttachEventStatementDispT<_CodeAttachEventStatement> _CodeAttachEventStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeEventReferenceExpression
// Interface: _CodeEventReferenceExpression
// *********************************************************************//
template <class T /* _CodeEventReferenceExpression */ >
class TCOM_CodeEventReferenceExpressionT : public TComInterface<_CodeEventReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeEventReferenceExpressionT() {}
  TCOM_CodeEventReferenceExpressionT(_CodeEventReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeEventReferenceExpression>(intf, addRef) {}
  TCOM_CodeEventReferenceExpressionT(const TCOM_CodeEventReferenceExpressionT& src) : TComInterface<_CodeEventReferenceExpression>(src) {}
  TCOM_CodeEventReferenceExpressionT& operator=(const TCOM_CodeEventReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeEventReferenceExpressionT<_CodeEventReferenceExpression> TCOM_CodeEventReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeEventReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35872687-5A11-34D7-85AB-865830A3BDEE}
// *********************************************************************//
template<class T>
class _CodeEventReferenceExpressionDispT : public TAutoDriver<_CodeEventReferenceExpression>
{
public:
  _CodeEventReferenceExpressionDispT(){}

  _CodeEventReferenceExpressionDispT(_CodeEventReferenceExpression *pintf)
  {
    TAutoDriver<_CodeEventReferenceExpression>::Bind(pintf, false);
  }

  _CodeEventReferenceExpressionDispT(_CodeEventReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeEventReferenceExpression>::Bind(pintf, true);
  }

  _CodeEventReferenceExpressionDispT& operator=(_CodeEventReferenceExpression *pintf)
  {
    TAutoDriver<_CodeEventReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeEventReferenceExpressionDispT& operator=(_CodeEventReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeEventReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeEventReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeEventReferenceExpression);
  }


};
typedef _CodeEventReferenceExpressionDispT<_CodeEventReferenceExpression> _CodeEventReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeArgument
// Interface: _CodeAttributeArgument
// *********************************************************************//
template <class T /* _CodeAttributeArgument */ >
class TCOM_CodeAttributeArgumentT : public TComInterface<_CodeAttributeArgument>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAttributeArgumentT() {}
  TCOM_CodeAttributeArgumentT(_CodeAttributeArgument *intf, bool addRef = false) : TComInterface<_CodeAttributeArgument>(intf, addRef) {}
  TCOM_CodeAttributeArgumentT(const TCOM_CodeAttributeArgumentT& src) : TComInterface<_CodeAttributeArgument>(src) {}
  TCOM_CodeAttributeArgumentT& operator=(const TCOM_CodeAttributeArgumentT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAttributeArgumentT<_CodeAttributeArgument> TCOM_CodeAttributeArgument;

// *********************************************************************//
// DispIntf:  _CodeAttributeArgument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02EFD952-FF8C-3B72-8C33-739A506D53D9}
// *********************************************************************//
template<class T>
class _CodeAttributeArgumentDispT : public TAutoDriver<_CodeAttributeArgument>
{
public:
  _CodeAttributeArgumentDispT(){}

  _CodeAttributeArgumentDispT(_CodeAttributeArgument *pintf)
  {
    TAutoDriver<_CodeAttributeArgument>::Bind(pintf, false);
  }

  _CodeAttributeArgumentDispT(_CodeAttributeArgumentPtr pintf)
  {
    TAutoDriver<_CodeAttributeArgument>::Bind(pintf, true);
  }

  _CodeAttributeArgumentDispT& operator=(_CodeAttributeArgument *pintf)
  {
    TAutoDriver<_CodeAttributeArgument>::Bind(pintf, false);
    return *this;
  }

  _CodeAttributeArgumentDispT& operator=(_CodeAttributeArgumentPtr pintf)
  {
    TAutoDriver<_CodeAttributeArgument>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAttributeArgument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAttributeArgument);
  }


};
typedef _CodeAttributeArgumentDispT<_CodeAttributeArgument> _CodeAttributeArgumentDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeArgumentCollection
// Interface: _CodeAttributeArgumentCollection
// *********************************************************************//
template <class T /* _CodeAttributeArgumentCollection */ >
class TCOM_CodeAttributeArgumentCollectionT : public TComInterface<_CodeAttributeArgumentCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAttributeArgumentCollectionT() {}
  TCOM_CodeAttributeArgumentCollectionT(_CodeAttributeArgumentCollection *intf, bool addRef = false) : TComInterface<_CodeAttributeArgumentCollection>(intf, addRef) {}
  TCOM_CodeAttributeArgumentCollectionT(const TCOM_CodeAttributeArgumentCollectionT& src) : TComInterface<_CodeAttributeArgumentCollection>(src) {}
  TCOM_CodeAttributeArgumentCollectionT& operator=(const TCOM_CodeAttributeArgumentCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAttributeArgumentCollectionT<_CodeAttributeArgumentCollection> TCOM_CodeAttributeArgumentCollection;

// *********************************************************************//
// DispIntf:  _CodeAttributeArgumentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE84E484-A7EC-3D15-B5E2-EDC2DE2DB42E}
// *********************************************************************//
template<class T>
class _CodeAttributeArgumentCollectionDispT : public TAutoDriver<_CodeAttributeArgumentCollection>
{
public:
  _CodeAttributeArgumentCollectionDispT(){}

  _CodeAttributeArgumentCollectionDispT(_CodeAttributeArgumentCollection *pintf)
  {
    TAutoDriver<_CodeAttributeArgumentCollection>::Bind(pintf, false);
  }

  _CodeAttributeArgumentCollectionDispT(_CodeAttributeArgumentCollectionPtr pintf)
  {
    TAutoDriver<_CodeAttributeArgumentCollection>::Bind(pintf, true);
  }

  _CodeAttributeArgumentCollectionDispT& operator=(_CodeAttributeArgumentCollection *pintf)
  {
    TAutoDriver<_CodeAttributeArgumentCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeAttributeArgumentCollectionDispT& operator=(_CodeAttributeArgumentCollectionPtr pintf)
  {
    TAutoDriver<_CodeAttributeArgumentCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAttributeArgumentCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAttributeArgumentCollection);
  }


};
typedef _CodeAttributeArgumentCollectionDispT<_CodeAttributeArgumentCollection> _CodeAttributeArgumentCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeDeclaration
// Interface: _CodeAttributeDeclaration
// *********************************************************************//
template <class T /* _CodeAttributeDeclaration */ >
class TCOM_CodeAttributeDeclarationT : public TComInterface<_CodeAttributeDeclaration>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAttributeDeclarationT() {}
  TCOM_CodeAttributeDeclarationT(_CodeAttributeDeclaration *intf, bool addRef = false) : TComInterface<_CodeAttributeDeclaration>(intf, addRef) {}
  TCOM_CodeAttributeDeclarationT(const TCOM_CodeAttributeDeclarationT& src) : TComInterface<_CodeAttributeDeclaration>(src) {}
  TCOM_CodeAttributeDeclarationT& operator=(const TCOM_CodeAttributeDeclarationT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAttributeDeclarationT<_CodeAttributeDeclaration> TCOM_CodeAttributeDeclaration;

// *********************************************************************//
// DispIntf:  _CodeAttributeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EF72D021-2C6D-3E33-9442-574BFD6E0871}
// *********************************************************************//
template<class T>
class _CodeAttributeDeclarationDispT : public TAutoDriver<_CodeAttributeDeclaration>
{
public:
  _CodeAttributeDeclarationDispT(){}

  _CodeAttributeDeclarationDispT(_CodeAttributeDeclaration *pintf)
  {
    TAutoDriver<_CodeAttributeDeclaration>::Bind(pintf, false);
  }

  _CodeAttributeDeclarationDispT(_CodeAttributeDeclarationPtr pintf)
  {
    TAutoDriver<_CodeAttributeDeclaration>::Bind(pintf, true);
  }

  _CodeAttributeDeclarationDispT& operator=(_CodeAttributeDeclaration *pintf)
  {
    TAutoDriver<_CodeAttributeDeclaration>::Bind(pintf, false);
    return *this;
  }

  _CodeAttributeDeclarationDispT& operator=(_CodeAttributeDeclarationPtr pintf)
  {
    TAutoDriver<_CodeAttributeDeclaration>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAttributeDeclaration));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAttributeDeclaration);
  }


};
typedef _CodeAttributeDeclarationDispT<_CodeAttributeDeclaration> _CodeAttributeDeclarationDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeDeclarationCollection
// Interface: _CodeAttributeDeclarationCollection
// *********************************************************************//
template <class T /* _CodeAttributeDeclarationCollection */ >
class TCOM_CodeAttributeDeclarationCollectionT : public TComInterface<_CodeAttributeDeclarationCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeAttributeDeclarationCollectionT() {}
  TCOM_CodeAttributeDeclarationCollectionT(_CodeAttributeDeclarationCollection *intf, bool addRef = false) : TComInterface<_CodeAttributeDeclarationCollection>(intf, addRef) {}
  TCOM_CodeAttributeDeclarationCollectionT(const TCOM_CodeAttributeDeclarationCollectionT& src) : TComInterface<_CodeAttributeDeclarationCollection>(src) {}
  TCOM_CodeAttributeDeclarationCollectionT& operator=(const TCOM_CodeAttributeDeclarationCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeAttributeDeclarationCollectionT<_CodeAttributeDeclarationCollection> TCOM_CodeAttributeDeclarationCollection;

// *********************************************************************//
// DispIntf:  _CodeAttributeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7E9ACA22-637C-3F88-A931-AAF36A4F9A6B}
// *********************************************************************//
template<class T>
class _CodeAttributeDeclarationCollectionDispT : public TAutoDriver<_CodeAttributeDeclarationCollection>
{
public:
  _CodeAttributeDeclarationCollectionDispT(){}

  _CodeAttributeDeclarationCollectionDispT(_CodeAttributeDeclarationCollection *pintf)
  {
    TAutoDriver<_CodeAttributeDeclarationCollection>::Bind(pintf, false);
  }

  _CodeAttributeDeclarationCollectionDispT(_CodeAttributeDeclarationCollectionPtr pintf)
  {
    TAutoDriver<_CodeAttributeDeclarationCollection>::Bind(pintf, true);
  }

  _CodeAttributeDeclarationCollectionDispT& operator=(_CodeAttributeDeclarationCollection *pintf)
  {
    TAutoDriver<_CodeAttributeDeclarationCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeAttributeDeclarationCollectionDispT& operator=(_CodeAttributeDeclarationCollectionPtr pintf)
  {
    TAutoDriver<_CodeAttributeDeclarationCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeAttributeDeclarationCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeAttributeDeclarationCollection);
  }


};
typedef _CodeAttributeDeclarationCollectionDispT<_CodeAttributeDeclarationCollection> _CodeAttributeDeclarationCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeBaseReferenceExpression
// Interface: _CodeBaseReferenceExpression
// *********************************************************************//
template <class T /* _CodeBaseReferenceExpression */ >
class TCOM_CodeBaseReferenceExpressionT : public TComInterface<_CodeBaseReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeBaseReferenceExpressionT() {}
  TCOM_CodeBaseReferenceExpressionT(_CodeBaseReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeBaseReferenceExpression>(intf, addRef) {}
  TCOM_CodeBaseReferenceExpressionT(const TCOM_CodeBaseReferenceExpressionT& src) : TComInterface<_CodeBaseReferenceExpression>(src) {}
  TCOM_CodeBaseReferenceExpressionT& operator=(const TCOM_CodeBaseReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeBaseReferenceExpressionT<_CodeBaseReferenceExpression> TCOM_CodeBaseReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeBaseReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {45E29CA6-670A-3B13-9557-4E5903056BF3}
// *********************************************************************//
template<class T>
class _CodeBaseReferenceExpressionDispT : public TAutoDriver<_CodeBaseReferenceExpression>
{
public:
  _CodeBaseReferenceExpressionDispT(){}

  _CodeBaseReferenceExpressionDispT(_CodeBaseReferenceExpression *pintf)
  {
    TAutoDriver<_CodeBaseReferenceExpression>::Bind(pintf, false);
  }

  _CodeBaseReferenceExpressionDispT(_CodeBaseReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeBaseReferenceExpression>::Bind(pintf, true);
  }

  _CodeBaseReferenceExpressionDispT& operator=(_CodeBaseReferenceExpression *pintf)
  {
    TAutoDriver<_CodeBaseReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeBaseReferenceExpressionDispT& operator=(_CodeBaseReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeBaseReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeBaseReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeBaseReferenceExpression);
  }


};
typedef _CodeBaseReferenceExpressionDispT<_CodeBaseReferenceExpression> _CodeBaseReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeBinaryOperatorExpression
// Interface: _CodeBinaryOperatorExpression
// *********************************************************************//
template <class T /* _CodeBinaryOperatorExpression */ >
class TCOM_CodeBinaryOperatorExpressionT : public TComInterface<_CodeBinaryOperatorExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeBinaryOperatorExpressionT() {}
  TCOM_CodeBinaryOperatorExpressionT(_CodeBinaryOperatorExpression *intf, bool addRef = false) : TComInterface<_CodeBinaryOperatorExpression>(intf, addRef) {}
  TCOM_CodeBinaryOperatorExpressionT(const TCOM_CodeBinaryOperatorExpressionT& src) : TComInterface<_CodeBinaryOperatorExpression>(src) {}
  TCOM_CodeBinaryOperatorExpressionT& operator=(const TCOM_CodeBinaryOperatorExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeBinaryOperatorExpressionT<_CodeBinaryOperatorExpression> TCOM_CodeBinaryOperatorExpression;

// *********************************************************************//
// DispIntf:  _CodeBinaryOperatorExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A22929C9-D301-3F5B-98B7-844FDBA1DEDF}
// *********************************************************************//
template<class T>
class _CodeBinaryOperatorExpressionDispT : public TAutoDriver<_CodeBinaryOperatorExpression>
{
public:
  _CodeBinaryOperatorExpressionDispT(){}

  _CodeBinaryOperatorExpressionDispT(_CodeBinaryOperatorExpression *pintf)
  {
    TAutoDriver<_CodeBinaryOperatorExpression>::Bind(pintf, false);
  }

  _CodeBinaryOperatorExpressionDispT(_CodeBinaryOperatorExpressionPtr pintf)
  {
    TAutoDriver<_CodeBinaryOperatorExpression>::Bind(pintf, true);
  }

  _CodeBinaryOperatorExpressionDispT& operator=(_CodeBinaryOperatorExpression *pintf)
  {
    TAutoDriver<_CodeBinaryOperatorExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeBinaryOperatorExpressionDispT& operator=(_CodeBinaryOperatorExpressionPtr pintf)
  {
    TAutoDriver<_CodeBinaryOperatorExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeBinaryOperatorExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeBinaryOperatorExpression);
  }


};
typedef _CodeBinaryOperatorExpressionDispT<_CodeBinaryOperatorExpression> _CodeBinaryOperatorExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCastExpression
// Interface: _CodeCastExpression
// *********************************************************************//
template <class T /* _CodeCastExpression */ >
class TCOM_CodeCastExpressionT : public TComInterface<_CodeCastExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCastExpressionT() {}
  TCOM_CodeCastExpressionT(_CodeCastExpression *intf, bool addRef = false) : TComInterface<_CodeCastExpression>(intf, addRef) {}
  TCOM_CodeCastExpressionT(const TCOM_CodeCastExpressionT& src) : TComInterface<_CodeCastExpression>(src) {}
  TCOM_CodeCastExpressionT& operator=(const TCOM_CodeCastExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCastExpressionT<_CodeCastExpression> TCOM_CodeCastExpression;

// *********************************************************************//
// DispIntf:  _CodeCastExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90BED8ED-21E3-31FE-8F02-C929BA4FB0AC}
// *********************************************************************//
template<class T>
class _CodeCastExpressionDispT : public TAutoDriver<_CodeCastExpression>
{
public:
  _CodeCastExpressionDispT(){}

  _CodeCastExpressionDispT(_CodeCastExpression *pintf)
  {
    TAutoDriver<_CodeCastExpression>::Bind(pintf, false);
  }

  _CodeCastExpressionDispT(_CodeCastExpressionPtr pintf)
  {
    TAutoDriver<_CodeCastExpression>::Bind(pintf, true);
  }

  _CodeCastExpressionDispT& operator=(_CodeCastExpression *pintf)
  {
    TAutoDriver<_CodeCastExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeCastExpressionDispT& operator=(_CodeCastExpressionPtr pintf)
  {
    TAutoDriver<_CodeCastExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCastExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCastExpression);
  }


};
typedef _CodeCastExpressionDispT<_CodeCastExpression> _CodeCastExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCatchClause
// Interface: _CodeCatchClause
// *********************************************************************//
template <class T /* _CodeCatchClause */ >
class TCOM_CodeCatchClauseT : public TComInterface<_CodeCatchClause>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCatchClauseT() {}
  TCOM_CodeCatchClauseT(_CodeCatchClause *intf, bool addRef = false) : TComInterface<_CodeCatchClause>(intf, addRef) {}
  TCOM_CodeCatchClauseT(const TCOM_CodeCatchClauseT& src) : TComInterface<_CodeCatchClause>(src) {}
  TCOM_CodeCatchClauseT& operator=(const TCOM_CodeCatchClauseT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCatchClauseT<_CodeCatchClause> TCOM_CodeCatchClause;

// *********************************************************************//
// DispIntf:  _CodeCatchClause
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {609C7788-BDB0-364C-92E3-FC16AC613430}
// *********************************************************************//
template<class T>
class _CodeCatchClauseDispT : public TAutoDriver<_CodeCatchClause>
{
public:
  _CodeCatchClauseDispT(){}

  _CodeCatchClauseDispT(_CodeCatchClause *pintf)
  {
    TAutoDriver<_CodeCatchClause>::Bind(pintf, false);
  }

  _CodeCatchClauseDispT(_CodeCatchClausePtr pintf)
  {
    TAutoDriver<_CodeCatchClause>::Bind(pintf, true);
  }

  _CodeCatchClauseDispT& operator=(_CodeCatchClause *pintf)
  {
    TAutoDriver<_CodeCatchClause>::Bind(pintf, false);
    return *this;
  }

  _CodeCatchClauseDispT& operator=(_CodeCatchClausePtr pintf)
  {
    TAutoDriver<_CodeCatchClause>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCatchClause));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCatchClause);
  }


};
typedef _CodeCatchClauseDispT<_CodeCatchClause> _CodeCatchClauseDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeStatementCollection
// Interface: _CodeStatementCollection
// *********************************************************************//
template <class T /* _CodeStatementCollection */ >
class TCOM_CodeStatementCollectionT : public TComInterface<_CodeStatementCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeStatementCollectionT() {}
  TCOM_CodeStatementCollectionT(_CodeStatementCollection *intf, bool addRef = false) : TComInterface<_CodeStatementCollection>(intf, addRef) {}
  TCOM_CodeStatementCollectionT(const TCOM_CodeStatementCollectionT& src) : TComInterface<_CodeStatementCollection>(src) {}
  TCOM_CodeStatementCollectionT& operator=(const TCOM_CodeStatementCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeStatementCollectionT<_CodeStatementCollection> TCOM_CodeStatementCollection;

// *********************************************************************//
// DispIntf:  _CodeStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B9A5032-4B8C-3DE6-997C-C38B4B3AF26A}
// *********************************************************************//
template<class T>
class _CodeStatementCollectionDispT : public TAutoDriver<_CodeStatementCollection>
{
public:
  _CodeStatementCollectionDispT(){}

  _CodeStatementCollectionDispT(_CodeStatementCollection *pintf)
  {
    TAutoDriver<_CodeStatementCollection>::Bind(pintf, false);
  }

  _CodeStatementCollectionDispT(_CodeStatementCollectionPtr pintf)
  {
    TAutoDriver<_CodeStatementCollection>::Bind(pintf, true);
  }

  _CodeStatementCollectionDispT& operator=(_CodeStatementCollection *pintf)
  {
    TAutoDriver<_CodeStatementCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeStatementCollectionDispT& operator=(_CodeStatementCollectionPtr pintf)
  {
    TAutoDriver<_CodeStatementCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeStatementCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeStatementCollection);
  }


};
typedef _CodeStatementCollectionDispT<_CodeStatementCollection> _CodeStatementCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCatchClauseCollection
// Interface: _CodeCatchClauseCollection
// *********************************************************************//
template <class T /* _CodeCatchClauseCollection */ >
class TCOM_CodeCatchClauseCollectionT : public TComInterface<_CodeCatchClauseCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCatchClauseCollectionT() {}
  TCOM_CodeCatchClauseCollectionT(_CodeCatchClauseCollection *intf, bool addRef = false) : TComInterface<_CodeCatchClauseCollection>(intf, addRef) {}
  TCOM_CodeCatchClauseCollectionT(const TCOM_CodeCatchClauseCollectionT& src) : TComInterface<_CodeCatchClauseCollection>(src) {}
  TCOM_CodeCatchClauseCollectionT& operator=(const TCOM_CodeCatchClauseCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCatchClauseCollectionT<_CodeCatchClauseCollection> TCOM_CodeCatchClauseCollection;

// *********************************************************************//
// DispIntf:  _CodeCatchClauseCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF5E1CD9-0478-34A4-9B9C-7C80BCB1A725}
// *********************************************************************//
template<class T>
class _CodeCatchClauseCollectionDispT : public TAutoDriver<_CodeCatchClauseCollection>
{
public:
  _CodeCatchClauseCollectionDispT(){}

  _CodeCatchClauseCollectionDispT(_CodeCatchClauseCollection *pintf)
  {
    TAutoDriver<_CodeCatchClauseCollection>::Bind(pintf, false);
  }

  _CodeCatchClauseCollectionDispT(_CodeCatchClauseCollectionPtr pintf)
  {
    TAutoDriver<_CodeCatchClauseCollection>::Bind(pintf, true);
  }

  _CodeCatchClauseCollectionDispT& operator=(_CodeCatchClauseCollection *pintf)
  {
    TAutoDriver<_CodeCatchClauseCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeCatchClauseCollectionDispT& operator=(_CodeCatchClauseCollectionPtr pintf)
  {
    TAutoDriver<_CodeCatchClauseCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCatchClauseCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCatchClauseCollection);
  }


};
typedef _CodeCatchClauseCollectionDispT<_CodeCatchClauseCollection> _CodeCatchClauseCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeChecksumPragma
// Interface: _CodeChecksumPragma
// *********************************************************************//
template <class T /* _CodeChecksumPragma */ >
class TCOM_CodeChecksumPragmaT : public TComInterface<_CodeChecksumPragma>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeChecksumPragmaT() {}
  TCOM_CodeChecksumPragmaT(_CodeChecksumPragma *intf, bool addRef = false) : TComInterface<_CodeChecksumPragma>(intf, addRef) {}
  TCOM_CodeChecksumPragmaT(const TCOM_CodeChecksumPragmaT& src) : TComInterface<_CodeChecksumPragma>(src) {}
  TCOM_CodeChecksumPragmaT& operator=(const TCOM_CodeChecksumPragmaT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeChecksumPragmaT<_CodeChecksumPragma> TCOM_CodeChecksumPragma;

// *********************************************************************//
// DispIntf:  _CodeChecksumPragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB20114-E822-358C-BDAB-DCF9E5090F23}
// *********************************************************************//
template<class T>
class _CodeChecksumPragmaDispT : public TAutoDriver<_CodeChecksumPragma>
{
public:
  _CodeChecksumPragmaDispT(){}

  _CodeChecksumPragmaDispT(_CodeChecksumPragma *pintf)
  {
    TAutoDriver<_CodeChecksumPragma>::Bind(pintf, false);
  }

  _CodeChecksumPragmaDispT(_CodeChecksumPragmaPtr pintf)
  {
    TAutoDriver<_CodeChecksumPragma>::Bind(pintf, true);
  }

  _CodeChecksumPragmaDispT& operator=(_CodeChecksumPragma *pintf)
  {
    TAutoDriver<_CodeChecksumPragma>::Bind(pintf, false);
    return *this;
  }

  _CodeChecksumPragmaDispT& operator=(_CodeChecksumPragmaPtr pintf)
  {
    TAutoDriver<_CodeChecksumPragma>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeChecksumPragma));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeChecksumPragma);
  }


};
typedef _CodeChecksumPragmaDispT<_CodeChecksumPragma> _CodeChecksumPragmaDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDirective
// Interface: _CodeDirective
// *********************************************************************//
template <class T /* _CodeDirective */ >
class TCOM_CodeDirectiveT : public TComInterface<_CodeDirective>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDirectiveT() {}
  TCOM_CodeDirectiveT(_CodeDirective *intf, bool addRef = false) : TComInterface<_CodeDirective>(intf, addRef) {}
  TCOM_CodeDirectiveT(const TCOM_CodeDirectiveT& src) : TComInterface<_CodeDirective>(src) {}
  TCOM_CodeDirectiveT& operator=(const TCOM_CodeDirectiveT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDirectiveT<_CodeDirective> TCOM_CodeDirective;

// *********************************************************************//
// DispIntf:  _CodeDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {767E752E-2315-35CF-9652-7FC46AE870D3}
// *********************************************************************//
template<class T>
class _CodeDirectiveDispT : public TAutoDriver<_CodeDirective>
{
public:
  _CodeDirectiveDispT(){}

  _CodeDirectiveDispT(_CodeDirective *pintf)
  {
    TAutoDriver<_CodeDirective>::Bind(pintf, false);
  }

  _CodeDirectiveDispT(_CodeDirectivePtr pintf)
  {
    TAutoDriver<_CodeDirective>::Bind(pintf, true);
  }

  _CodeDirectiveDispT& operator=(_CodeDirective *pintf)
  {
    TAutoDriver<_CodeDirective>::Bind(pintf, false);
    return *this;
  }

  _CodeDirectiveDispT& operator=(_CodeDirectivePtr pintf)
  {
    TAutoDriver<_CodeDirective>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDirective));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDirective);
  }


};
typedef _CodeDirectiveDispT<_CodeDirective> _CodeDirectiveDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeComment
// Interface: _CodeComment
// *********************************************************************//
template <class T /* _CodeComment */ >
class TCOM_CodeCommentT : public TComInterface<_CodeComment>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCommentT() {}
  TCOM_CodeCommentT(_CodeComment *intf, bool addRef = false) : TComInterface<_CodeComment>(intf, addRef) {}
  TCOM_CodeCommentT(const TCOM_CodeCommentT& src) : TComInterface<_CodeComment>(src) {}
  TCOM_CodeCommentT& operator=(const TCOM_CodeCommentT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCommentT<_CodeComment> TCOM_CodeComment;

// *********************************************************************//
// DispIntf:  _CodeComment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C94F39B3-436F-3711-9CB0-91C6299B62A2}
// *********************************************************************//
template<class T>
class _CodeCommentDispT : public TAutoDriver<_CodeComment>
{
public:
  _CodeCommentDispT(){}

  _CodeCommentDispT(_CodeComment *pintf)
  {
    TAutoDriver<_CodeComment>::Bind(pintf, false);
  }

  _CodeCommentDispT(_CodeCommentPtr pintf)
  {
    TAutoDriver<_CodeComment>::Bind(pintf, true);
  }

  _CodeCommentDispT& operator=(_CodeComment *pintf)
  {
    TAutoDriver<_CodeComment>::Bind(pintf, false);
    return *this;
  }

  _CodeCommentDispT& operator=(_CodeCommentPtr pintf)
  {
    TAutoDriver<_CodeComment>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeComment));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeComment);
  }


};
typedef _CodeCommentDispT<_CodeComment> _CodeCommentDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeObject
// Interface: _CodeObject
// *********************************************************************//
template <class T /* _CodeObject */ >
class TCOM_CodeObjectT : public TComInterface<_CodeObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeObjectT() {}
  TCOM_CodeObjectT(_CodeObject *intf, bool addRef = false) : TComInterface<_CodeObject>(intf, addRef) {}
  TCOM_CodeObjectT(const TCOM_CodeObjectT& src) : TComInterface<_CodeObject>(src) {}
  TCOM_CodeObjectT& operator=(const TCOM_CodeObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeObjectT<_CodeObject> TCOM_CodeObject;

// *********************************************************************//
// DispIntf:  _CodeObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE499EFD-22E2-3740-A64A-2AB010099C01}
// *********************************************************************//
template<class T>
class _CodeObjectDispT : public TAutoDriver<_CodeObject>
{
public:
  _CodeObjectDispT(){}

  _CodeObjectDispT(_CodeObject *pintf)
  {
    TAutoDriver<_CodeObject>::Bind(pintf, false);
  }

  _CodeObjectDispT(_CodeObjectPtr pintf)
  {
    TAutoDriver<_CodeObject>::Bind(pintf, true);
  }

  _CodeObjectDispT& operator=(_CodeObject *pintf)
  {
    TAutoDriver<_CodeObject>::Bind(pintf, false);
    return *this;
  }

  _CodeObjectDispT& operator=(_CodeObjectPtr pintf)
  {
    TAutoDriver<_CodeObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeObject);
  }


};
typedef _CodeObjectDispT<_CodeObject> _CodeObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCommentStatement
// Interface: _CodeCommentStatement
// *********************************************************************//
template <class T /* _CodeCommentStatement */ >
class TCOM_CodeCommentStatementT : public TComInterface<_CodeCommentStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCommentStatementT() {}
  TCOM_CodeCommentStatementT(_CodeCommentStatement *intf, bool addRef = false) : TComInterface<_CodeCommentStatement>(intf, addRef) {}
  TCOM_CodeCommentStatementT(const TCOM_CodeCommentStatementT& src) : TComInterface<_CodeCommentStatement>(src) {}
  TCOM_CodeCommentStatementT& operator=(const TCOM_CodeCommentStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCommentStatementT<_CodeCommentStatement> TCOM_CodeCommentStatement;

// *********************************************************************//
// DispIntf:  _CodeCommentStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C13F8B9-F2E0-3918-A33E-3E491BDC529E}
// *********************************************************************//
template<class T>
class _CodeCommentStatementDispT : public TAutoDriver<_CodeCommentStatement>
{
public:
  _CodeCommentStatementDispT(){}

  _CodeCommentStatementDispT(_CodeCommentStatement *pintf)
  {
    TAutoDriver<_CodeCommentStatement>::Bind(pintf, false);
  }

  _CodeCommentStatementDispT(_CodeCommentStatementPtr pintf)
  {
    TAutoDriver<_CodeCommentStatement>::Bind(pintf, true);
  }

  _CodeCommentStatementDispT& operator=(_CodeCommentStatement *pintf)
  {
    TAutoDriver<_CodeCommentStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeCommentStatementDispT& operator=(_CodeCommentStatementPtr pintf)
  {
    TAutoDriver<_CodeCommentStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCommentStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCommentStatement);
  }


};
typedef _CodeCommentStatementDispT<_CodeCommentStatement> _CodeCommentStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCommentStatementCollection
// Interface: _CodeCommentStatementCollection
// *********************************************************************//
template <class T /* _CodeCommentStatementCollection */ >
class TCOM_CodeCommentStatementCollectionT : public TComInterface<_CodeCommentStatementCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCommentStatementCollectionT() {}
  TCOM_CodeCommentStatementCollectionT(_CodeCommentStatementCollection *intf, bool addRef = false) : TComInterface<_CodeCommentStatementCollection>(intf, addRef) {}
  TCOM_CodeCommentStatementCollectionT(const TCOM_CodeCommentStatementCollectionT& src) : TComInterface<_CodeCommentStatementCollection>(src) {}
  TCOM_CodeCommentStatementCollectionT& operator=(const TCOM_CodeCommentStatementCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCommentStatementCollectionT<_CodeCommentStatementCollection> TCOM_CodeCommentStatementCollection;

// *********************************************************************//
// DispIntf:  _CodeCommentStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E34CEB72-8F86-333D-AEDA-069221DF6A1A}
// *********************************************************************//
template<class T>
class _CodeCommentStatementCollectionDispT : public TAutoDriver<_CodeCommentStatementCollection>
{
public:
  _CodeCommentStatementCollectionDispT(){}

  _CodeCommentStatementCollectionDispT(_CodeCommentStatementCollection *pintf)
  {
    TAutoDriver<_CodeCommentStatementCollection>::Bind(pintf, false);
  }

  _CodeCommentStatementCollectionDispT(_CodeCommentStatementCollectionPtr pintf)
  {
    TAutoDriver<_CodeCommentStatementCollection>::Bind(pintf, true);
  }

  _CodeCommentStatementCollectionDispT& operator=(_CodeCommentStatementCollection *pintf)
  {
    TAutoDriver<_CodeCommentStatementCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeCommentStatementCollectionDispT& operator=(_CodeCommentStatementCollectionPtr pintf)
  {
    TAutoDriver<_CodeCommentStatementCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCommentStatementCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCommentStatementCollection);
  }


};
typedef _CodeCommentStatementCollectionDispT<_CodeCommentStatementCollection> _CodeCommentStatementCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeCompileUnit
// Interface: _CodeCompileUnit
// *********************************************************************//
template <class T /* _CodeCompileUnit */ >
class TCOM_CodeCompileUnitT : public TComInterface<_CodeCompileUnit>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeCompileUnitT() {}
  TCOM_CodeCompileUnitT(_CodeCompileUnit *intf, bool addRef = false) : TComInterface<_CodeCompileUnit>(intf, addRef) {}
  TCOM_CodeCompileUnitT(const TCOM_CodeCompileUnitT& src) : TComInterface<_CodeCompileUnit>(src) {}
  TCOM_CodeCompileUnitT& operator=(const TCOM_CodeCompileUnitT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeCompileUnitT<_CodeCompileUnit> TCOM_CodeCompileUnit;

// *********************************************************************//
// DispIntf:  _CodeCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F20C263-AF67-380F-A482-9A21F7599748}
// *********************************************************************//
template<class T>
class _CodeCompileUnitDispT : public TAutoDriver<_CodeCompileUnit>
{
public:
  _CodeCompileUnitDispT(){}

  _CodeCompileUnitDispT(_CodeCompileUnit *pintf)
  {
    TAutoDriver<_CodeCompileUnit>::Bind(pintf, false);
  }

  _CodeCompileUnitDispT(_CodeCompileUnitPtr pintf)
  {
    TAutoDriver<_CodeCompileUnit>::Bind(pintf, true);
  }

  _CodeCompileUnitDispT& operator=(_CodeCompileUnit *pintf)
  {
    TAutoDriver<_CodeCompileUnit>::Bind(pintf, false);
    return *this;
  }

  _CodeCompileUnitDispT& operator=(_CodeCompileUnitPtr pintf)
  {
    TAutoDriver<_CodeCompileUnit>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeCompileUnit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeCompileUnit);
  }


};
typedef _CodeCompileUnitDispT<_CodeCompileUnit> _CodeCompileUnitDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceCollection
// Interface: _CodeNamespaceCollection
// *********************************************************************//
template <class T /* _CodeNamespaceCollection */ >
class TCOM_CodeNamespaceCollectionT : public TComInterface<_CodeNamespaceCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeNamespaceCollectionT() {}
  TCOM_CodeNamespaceCollectionT(_CodeNamespaceCollection *intf, bool addRef = false) : TComInterface<_CodeNamespaceCollection>(intf, addRef) {}
  TCOM_CodeNamespaceCollectionT(const TCOM_CodeNamespaceCollectionT& src) : TComInterface<_CodeNamespaceCollection>(src) {}
  TCOM_CodeNamespaceCollectionT& operator=(const TCOM_CodeNamespaceCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeNamespaceCollectionT<_CodeNamespaceCollection> TCOM_CodeNamespaceCollection;

// *********************************************************************//
// DispIntf:  _CodeNamespaceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5E54F16-ADE3-3B5D-8B05-1F9803557905}
// *********************************************************************//
template<class T>
class _CodeNamespaceCollectionDispT : public TAutoDriver<_CodeNamespaceCollection>
{
public:
  _CodeNamespaceCollectionDispT(){}

  _CodeNamespaceCollectionDispT(_CodeNamespaceCollection *pintf)
  {
    TAutoDriver<_CodeNamespaceCollection>::Bind(pintf, false);
  }

  _CodeNamespaceCollectionDispT(_CodeNamespaceCollectionPtr pintf)
  {
    TAutoDriver<_CodeNamespaceCollection>::Bind(pintf, true);
  }

  _CodeNamespaceCollectionDispT& operator=(_CodeNamespaceCollection *pintf)
  {
    TAutoDriver<_CodeNamespaceCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeNamespaceCollectionDispT& operator=(_CodeNamespaceCollectionPtr pintf)
  {
    TAutoDriver<_CodeNamespaceCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeNamespaceCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeNamespaceCollection);
  }


};
typedef _CodeNamespaceCollectionDispT<_CodeNamespaceCollection> _CodeNamespaceCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDirectiveCollection
// Interface: _CodeDirectiveCollection
// *********************************************************************//
template <class T /* _CodeDirectiveCollection */ >
class TCOM_CodeDirectiveCollectionT : public TComInterface<_CodeDirectiveCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDirectiveCollectionT() {}
  TCOM_CodeDirectiveCollectionT(_CodeDirectiveCollection *intf, bool addRef = false) : TComInterface<_CodeDirectiveCollection>(intf, addRef) {}
  TCOM_CodeDirectiveCollectionT(const TCOM_CodeDirectiveCollectionT& src) : TComInterface<_CodeDirectiveCollection>(src) {}
  TCOM_CodeDirectiveCollectionT& operator=(const TCOM_CodeDirectiveCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDirectiveCollectionT<_CodeDirectiveCollection> TCOM_CodeDirectiveCollection;

// *********************************************************************//
// DispIntf:  _CodeDirectiveCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEFBDD27-4904-3E90-ACFC-624164CB45DD}
// *********************************************************************//
template<class T>
class _CodeDirectiveCollectionDispT : public TAutoDriver<_CodeDirectiveCollection>
{
public:
  _CodeDirectiveCollectionDispT(){}

  _CodeDirectiveCollectionDispT(_CodeDirectiveCollection *pintf)
  {
    TAutoDriver<_CodeDirectiveCollection>::Bind(pintf, false);
  }

  _CodeDirectiveCollectionDispT(_CodeDirectiveCollectionPtr pintf)
  {
    TAutoDriver<_CodeDirectiveCollection>::Bind(pintf, true);
  }

  _CodeDirectiveCollectionDispT& operator=(_CodeDirectiveCollection *pintf)
  {
    TAutoDriver<_CodeDirectiveCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeDirectiveCollectionDispT& operator=(_CodeDirectiveCollectionPtr pintf)
  {
    TAutoDriver<_CodeDirectiveCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDirectiveCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDirectiveCollection);
  }


};
typedef _CodeDirectiveCollectionDispT<_CodeDirectiveCollection> _CodeDirectiveCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeConditionStatement
// Interface: _CodeConditionStatement
// *********************************************************************//
template <class T /* _CodeConditionStatement */ >
class TCOM_CodeConditionStatementT : public TComInterface<_CodeConditionStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeConditionStatementT() {}
  TCOM_CodeConditionStatementT(_CodeConditionStatement *intf, bool addRef = false) : TComInterface<_CodeConditionStatement>(intf, addRef) {}
  TCOM_CodeConditionStatementT(const TCOM_CodeConditionStatementT& src) : TComInterface<_CodeConditionStatement>(src) {}
  TCOM_CodeConditionStatementT& operator=(const TCOM_CodeConditionStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeConditionStatementT<_CodeConditionStatement> TCOM_CodeConditionStatement;

// *********************************************************************//
// DispIntf:  _CodeConditionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {69904B31-5FB5-39BF-83B0-5DDFA1F26D71}
// *********************************************************************//
template<class T>
class _CodeConditionStatementDispT : public TAutoDriver<_CodeConditionStatement>
{
public:
  _CodeConditionStatementDispT(){}

  _CodeConditionStatementDispT(_CodeConditionStatement *pintf)
  {
    TAutoDriver<_CodeConditionStatement>::Bind(pintf, false);
  }

  _CodeConditionStatementDispT(_CodeConditionStatementPtr pintf)
  {
    TAutoDriver<_CodeConditionStatement>::Bind(pintf, true);
  }

  _CodeConditionStatementDispT& operator=(_CodeConditionStatement *pintf)
  {
    TAutoDriver<_CodeConditionStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeConditionStatementDispT& operator=(_CodeConditionStatementPtr pintf)
  {
    TAutoDriver<_CodeConditionStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeConditionStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeConditionStatement);
  }


};
typedef _CodeConditionStatementDispT<_CodeConditionStatement> _CodeConditionStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeConstructor
// Interface: _CodeConstructor
// *********************************************************************//
template <class T /* _CodeConstructor */ >
class TCOM_CodeConstructorT : public TComInterface<_CodeConstructor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeConstructorT() {}
  TCOM_CodeConstructorT(_CodeConstructor *intf, bool addRef = false) : TComInterface<_CodeConstructor>(intf, addRef) {}
  TCOM_CodeConstructorT(const TCOM_CodeConstructorT& src) : TComInterface<_CodeConstructor>(src) {}
  TCOM_CodeConstructorT& operator=(const TCOM_CodeConstructorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeConstructorT<_CodeConstructor> TCOM_CodeConstructor;

// *********************************************************************//
// DispIntf:  _CodeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5A33C771-806E-337D-AE1F-66B523FC49BF}
// *********************************************************************//
template<class T>
class _CodeConstructorDispT : public TAutoDriver<_CodeConstructor>
{
public:
  _CodeConstructorDispT(){}

  _CodeConstructorDispT(_CodeConstructor *pintf)
  {
    TAutoDriver<_CodeConstructor>::Bind(pintf, false);
  }

  _CodeConstructorDispT(_CodeConstructorPtr pintf)
  {
    TAutoDriver<_CodeConstructor>::Bind(pintf, true);
  }

  _CodeConstructorDispT& operator=(_CodeConstructor *pintf)
  {
    TAutoDriver<_CodeConstructor>::Bind(pintf, false);
    return *this;
  }

  _CodeConstructorDispT& operator=(_CodeConstructorPtr pintf)
  {
    TAutoDriver<_CodeConstructor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeConstructor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeConstructor);
  }


};
typedef _CodeConstructorDispT<_CodeConstructor> _CodeConstructorDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMemberMethod
// Interface: _CodeMemberMethod
// *********************************************************************//
template <class T /* _CodeMemberMethod */ >
class TCOM_CodeMemberMethodT : public TComInterface<_CodeMemberMethod>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMemberMethodT() {}
  TCOM_CodeMemberMethodT(_CodeMemberMethod *intf, bool addRef = false) : TComInterface<_CodeMemberMethod>(intf, addRef) {}
  TCOM_CodeMemberMethodT(const TCOM_CodeMemberMethodT& src) : TComInterface<_CodeMemberMethod>(src) {}
  TCOM_CodeMemberMethodT& operator=(const TCOM_CodeMemberMethodT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMemberMethodT<_CodeMemberMethod> TCOM_CodeMemberMethod;

// *********************************************************************//
// DispIntf:  _CodeMemberMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95C2EE26-4247-3DDC-8056-97353F10DE8F}
// *********************************************************************//
template<class T>
class _CodeMemberMethodDispT : public TAutoDriver<_CodeMemberMethod>
{
public:
  _CodeMemberMethodDispT(){}

  _CodeMemberMethodDispT(_CodeMemberMethod *pintf)
  {
    TAutoDriver<_CodeMemberMethod>::Bind(pintf, false);
  }

  _CodeMemberMethodDispT(_CodeMemberMethodPtr pintf)
  {
    TAutoDriver<_CodeMemberMethod>::Bind(pintf, true);
  }

  _CodeMemberMethodDispT& operator=(_CodeMemberMethod *pintf)
  {
    TAutoDriver<_CodeMemberMethod>::Bind(pintf, false);
    return *this;
  }

  _CodeMemberMethodDispT& operator=(_CodeMemberMethodPtr pintf)
  {
    TAutoDriver<_CodeMemberMethod>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMemberMethod));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMemberMethod);
  }


};
typedef _CodeMemberMethodDispT<_CodeMemberMethod> _CodeMemberMethodDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDefaultValueExpression
// Interface: _CodeDefaultValueExpression
// *********************************************************************//
template <class T /* _CodeDefaultValueExpression */ >
class TCOM_CodeDefaultValueExpressionT : public TComInterface<_CodeDefaultValueExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDefaultValueExpressionT() {}
  TCOM_CodeDefaultValueExpressionT(_CodeDefaultValueExpression *intf, bool addRef = false) : TComInterface<_CodeDefaultValueExpression>(intf, addRef) {}
  TCOM_CodeDefaultValueExpressionT(const TCOM_CodeDefaultValueExpressionT& src) : TComInterface<_CodeDefaultValueExpression>(src) {}
  TCOM_CodeDefaultValueExpressionT& operator=(const TCOM_CodeDefaultValueExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDefaultValueExpressionT<_CodeDefaultValueExpression> TCOM_CodeDefaultValueExpression;

// *********************************************************************//
// DispIntf:  _CodeDefaultValueExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EA9E1DD2-EF9A-3570-AE1A-2F625F594C3B}
// *********************************************************************//
template<class T>
class _CodeDefaultValueExpressionDispT : public TAutoDriver<_CodeDefaultValueExpression>
{
public:
  _CodeDefaultValueExpressionDispT(){}

  _CodeDefaultValueExpressionDispT(_CodeDefaultValueExpression *pintf)
  {
    TAutoDriver<_CodeDefaultValueExpression>::Bind(pintf, false);
  }

  _CodeDefaultValueExpressionDispT(_CodeDefaultValueExpressionPtr pintf)
  {
    TAutoDriver<_CodeDefaultValueExpression>::Bind(pintf, true);
  }

  _CodeDefaultValueExpressionDispT& operator=(_CodeDefaultValueExpression *pintf)
  {
    TAutoDriver<_CodeDefaultValueExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeDefaultValueExpressionDispT& operator=(_CodeDefaultValueExpressionPtr pintf)
  {
    TAutoDriver<_CodeDefaultValueExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDefaultValueExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDefaultValueExpression);
  }


};
typedef _CodeDefaultValueExpressionDispT<_CodeDefaultValueExpression> _CodeDefaultValueExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDelegateCreateExpression
// Interface: _CodeDelegateCreateExpression
// *********************************************************************//
template <class T /* _CodeDelegateCreateExpression */ >
class TCOM_CodeDelegateCreateExpressionT : public TComInterface<_CodeDelegateCreateExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDelegateCreateExpressionT() {}
  TCOM_CodeDelegateCreateExpressionT(_CodeDelegateCreateExpression *intf, bool addRef = false) : TComInterface<_CodeDelegateCreateExpression>(intf, addRef) {}
  TCOM_CodeDelegateCreateExpressionT(const TCOM_CodeDelegateCreateExpressionT& src) : TComInterface<_CodeDelegateCreateExpression>(src) {}
  TCOM_CodeDelegateCreateExpressionT& operator=(const TCOM_CodeDelegateCreateExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDelegateCreateExpressionT<_CodeDelegateCreateExpression> TCOM_CodeDelegateCreateExpression;

// *********************************************************************//
// DispIntf:  _CodeDelegateCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14E12C1-E1D1-3B74-A3AF-021A5A268FBE}
// *********************************************************************//
template<class T>
class _CodeDelegateCreateExpressionDispT : public TAutoDriver<_CodeDelegateCreateExpression>
{
public:
  _CodeDelegateCreateExpressionDispT(){}

  _CodeDelegateCreateExpressionDispT(_CodeDelegateCreateExpression *pintf)
  {
    TAutoDriver<_CodeDelegateCreateExpression>::Bind(pintf, false);
  }

  _CodeDelegateCreateExpressionDispT(_CodeDelegateCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeDelegateCreateExpression>::Bind(pintf, true);
  }

  _CodeDelegateCreateExpressionDispT& operator=(_CodeDelegateCreateExpression *pintf)
  {
    TAutoDriver<_CodeDelegateCreateExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeDelegateCreateExpressionDispT& operator=(_CodeDelegateCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeDelegateCreateExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDelegateCreateExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDelegateCreateExpression);
  }


};
typedef _CodeDelegateCreateExpressionDispT<_CodeDelegateCreateExpression> _CodeDelegateCreateExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDelegateInvokeExpression
// Interface: _CodeDelegateInvokeExpression
// *********************************************************************//
template <class T /* _CodeDelegateInvokeExpression */ >
class TCOM_CodeDelegateInvokeExpressionT : public TComInterface<_CodeDelegateInvokeExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDelegateInvokeExpressionT() {}
  TCOM_CodeDelegateInvokeExpressionT(_CodeDelegateInvokeExpression *intf, bool addRef = false) : TComInterface<_CodeDelegateInvokeExpression>(intf, addRef) {}
  TCOM_CodeDelegateInvokeExpressionT(const TCOM_CodeDelegateInvokeExpressionT& src) : TComInterface<_CodeDelegateInvokeExpression>(src) {}
  TCOM_CodeDelegateInvokeExpressionT& operator=(const TCOM_CodeDelegateInvokeExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDelegateInvokeExpressionT<_CodeDelegateInvokeExpression> TCOM_CodeDelegateInvokeExpression;

// *********************************************************************//
// DispIntf:  _CodeDelegateInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F6C3482-8900-36EA-B621-943534E82C73}
// *********************************************************************//
template<class T>
class _CodeDelegateInvokeExpressionDispT : public TAutoDriver<_CodeDelegateInvokeExpression>
{
public:
  _CodeDelegateInvokeExpressionDispT(){}

  _CodeDelegateInvokeExpressionDispT(_CodeDelegateInvokeExpression *pintf)
  {
    TAutoDriver<_CodeDelegateInvokeExpression>::Bind(pintf, false);
  }

  _CodeDelegateInvokeExpressionDispT(_CodeDelegateInvokeExpressionPtr pintf)
  {
    TAutoDriver<_CodeDelegateInvokeExpression>::Bind(pintf, true);
  }

  _CodeDelegateInvokeExpressionDispT& operator=(_CodeDelegateInvokeExpression *pintf)
  {
    TAutoDriver<_CodeDelegateInvokeExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeDelegateInvokeExpressionDispT& operator=(_CodeDelegateInvokeExpressionPtr pintf)
  {
    TAutoDriver<_CodeDelegateInvokeExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDelegateInvokeExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDelegateInvokeExpression);
  }


};
typedef _CodeDelegateInvokeExpressionDispT<_CodeDelegateInvokeExpression> _CodeDelegateInvokeExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDirectionExpression
// Interface: _CodeDirectionExpression
// *********************************************************************//
template <class T /* _CodeDirectionExpression */ >
class TCOM_CodeDirectionExpressionT : public TComInterface<_CodeDirectionExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeDirectionExpressionT() {}
  TCOM_CodeDirectionExpressionT(_CodeDirectionExpression *intf, bool addRef = false) : TComInterface<_CodeDirectionExpression>(intf, addRef) {}
  TCOM_CodeDirectionExpressionT(const TCOM_CodeDirectionExpressionT& src) : TComInterface<_CodeDirectionExpression>(src) {}
  TCOM_CodeDirectionExpressionT& operator=(const TCOM_CodeDirectionExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeDirectionExpressionT<_CodeDirectionExpression> TCOM_CodeDirectionExpression;

// *********************************************************************//
// DispIntf:  _CodeDirectionExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11EDAF3B-144E-32C8-8BE0-81D40A950656}
// *********************************************************************//
template<class T>
class _CodeDirectionExpressionDispT : public TAutoDriver<_CodeDirectionExpression>
{
public:
  _CodeDirectionExpressionDispT(){}

  _CodeDirectionExpressionDispT(_CodeDirectionExpression *pintf)
  {
    TAutoDriver<_CodeDirectionExpression>::Bind(pintf, false);
  }

  _CodeDirectionExpressionDispT(_CodeDirectionExpressionPtr pintf)
  {
    TAutoDriver<_CodeDirectionExpression>::Bind(pintf, true);
  }

  _CodeDirectionExpressionDispT& operator=(_CodeDirectionExpression *pintf)
  {
    TAutoDriver<_CodeDirectionExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeDirectionExpressionDispT& operator=(_CodeDirectionExpressionPtr pintf)
  {
    TAutoDriver<_CodeDirectionExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeDirectionExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeDirectionExpression);
  }


};
typedef _CodeDirectionExpressionDispT<_CodeDirectionExpression> _CodeDirectionExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeEntryPointMethod
// Interface: _CodeEntryPointMethod
// *********************************************************************//
template <class T /* _CodeEntryPointMethod */ >
class TCOM_CodeEntryPointMethodT : public TComInterface<_CodeEntryPointMethod>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeEntryPointMethodT() {}
  TCOM_CodeEntryPointMethodT(_CodeEntryPointMethod *intf, bool addRef = false) : TComInterface<_CodeEntryPointMethod>(intf, addRef) {}
  TCOM_CodeEntryPointMethodT(const TCOM_CodeEntryPointMethodT& src) : TComInterface<_CodeEntryPointMethod>(src) {}
  TCOM_CodeEntryPointMethodT& operator=(const TCOM_CodeEntryPointMethodT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeEntryPointMethodT<_CodeEntryPointMethod> TCOM_CodeEntryPointMethod;

// *********************************************************************//
// DispIntf:  _CodeEntryPointMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7CD4EF19-27EB-399E-8ED2-C6647A99C03E}
// *********************************************************************//
template<class T>
class _CodeEntryPointMethodDispT : public TAutoDriver<_CodeEntryPointMethod>
{
public:
  _CodeEntryPointMethodDispT(){}

  _CodeEntryPointMethodDispT(_CodeEntryPointMethod *pintf)
  {
    TAutoDriver<_CodeEntryPointMethod>::Bind(pintf, false);
  }

  _CodeEntryPointMethodDispT(_CodeEntryPointMethodPtr pintf)
  {
    TAutoDriver<_CodeEntryPointMethod>::Bind(pintf, true);
  }

  _CodeEntryPointMethodDispT& operator=(_CodeEntryPointMethod *pintf)
  {
    TAutoDriver<_CodeEntryPointMethod>::Bind(pintf, false);
    return *this;
  }

  _CodeEntryPointMethodDispT& operator=(_CodeEntryPointMethodPtr pintf)
  {
    TAutoDriver<_CodeEntryPointMethod>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeEntryPointMethod));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeEntryPointMethod);
  }


};
typedef _CodeEntryPointMethodDispT<_CodeEntryPointMethod> _CodeEntryPointMethodDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeExpressionStatement
// Interface: _CodeExpressionStatement
// *********************************************************************//
template <class T /* _CodeExpressionStatement */ >
class TCOM_CodeExpressionStatementT : public TComInterface<_CodeExpressionStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeExpressionStatementT() {}
  TCOM_CodeExpressionStatementT(_CodeExpressionStatement *intf, bool addRef = false) : TComInterface<_CodeExpressionStatement>(intf, addRef) {}
  TCOM_CodeExpressionStatementT(const TCOM_CodeExpressionStatementT& src) : TComInterface<_CodeExpressionStatement>(src) {}
  TCOM_CodeExpressionStatementT& operator=(const TCOM_CodeExpressionStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeExpressionStatementT<_CodeExpressionStatement> TCOM_CodeExpressionStatement;

// *********************************************************************//
// DispIntf:  _CodeExpressionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CEA240AF-60C5-3C69-9DA1-DA3F9A6D7B3C}
// *********************************************************************//
template<class T>
class _CodeExpressionStatementDispT : public TAutoDriver<_CodeExpressionStatement>
{
public:
  _CodeExpressionStatementDispT(){}

  _CodeExpressionStatementDispT(_CodeExpressionStatement *pintf)
  {
    TAutoDriver<_CodeExpressionStatement>::Bind(pintf, false);
  }

  _CodeExpressionStatementDispT(_CodeExpressionStatementPtr pintf)
  {
    TAutoDriver<_CodeExpressionStatement>::Bind(pintf, true);
  }

  _CodeExpressionStatementDispT& operator=(_CodeExpressionStatement *pintf)
  {
    TAutoDriver<_CodeExpressionStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeExpressionStatementDispT& operator=(_CodeExpressionStatementPtr pintf)
  {
    TAutoDriver<_CodeExpressionStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeExpressionStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeExpressionStatement);
  }


};
typedef _CodeExpressionStatementDispT<_CodeExpressionStatement> _CodeExpressionStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeFieldReferenceExpression
// Interface: _CodeFieldReferenceExpression
// *********************************************************************//
template <class T /* _CodeFieldReferenceExpression */ >
class TCOM_CodeFieldReferenceExpressionT : public TComInterface<_CodeFieldReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeFieldReferenceExpressionT() {}
  TCOM_CodeFieldReferenceExpressionT(_CodeFieldReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeFieldReferenceExpression>(intf, addRef) {}
  TCOM_CodeFieldReferenceExpressionT(const TCOM_CodeFieldReferenceExpressionT& src) : TComInterface<_CodeFieldReferenceExpression>(src) {}
  TCOM_CodeFieldReferenceExpressionT& operator=(const TCOM_CodeFieldReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeFieldReferenceExpressionT<_CodeFieldReferenceExpression> TCOM_CodeFieldReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeFieldReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82D57B2B-C639-32A0-89B4-62A0C29DD64E}
// *********************************************************************//
template<class T>
class _CodeFieldReferenceExpressionDispT : public TAutoDriver<_CodeFieldReferenceExpression>
{
public:
  _CodeFieldReferenceExpressionDispT(){}

  _CodeFieldReferenceExpressionDispT(_CodeFieldReferenceExpression *pintf)
  {
    TAutoDriver<_CodeFieldReferenceExpression>::Bind(pintf, false);
  }

  _CodeFieldReferenceExpressionDispT(_CodeFieldReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeFieldReferenceExpression>::Bind(pintf, true);
  }

  _CodeFieldReferenceExpressionDispT& operator=(_CodeFieldReferenceExpression *pintf)
  {
    TAutoDriver<_CodeFieldReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeFieldReferenceExpressionDispT& operator=(_CodeFieldReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeFieldReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeFieldReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeFieldReferenceExpression);
  }


};
typedef _CodeFieldReferenceExpressionDispT<_CodeFieldReferenceExpression> _CodeFieldReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeGotoStatement
// Interface: _CodeGotoStatement
// *********************************************************************//
template <class T /* _CodeGotoStatement */ >
class TCOM_CodeGotoStatementT : public TComInterface<_CodeGotoStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeGotoStatementT() {}
  TCOM_CodeGotoStatementT(_CodeGotoStatement *intf, bool addRef = false) : TComInterface<_CodeGotoStatement>(intf, addRef) {}
  TCOM_CodeGotoStatementT(const TCOM_CodeGotoStatementT& src) : TComInterface<_CodeGotoStatement>(src) {}
  TCOM_CodeGotoStatementT& operator=(const TCOM_CodeGotoStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeGotoStatementT<_CodeGotoStatement> TCOM_CodeGotoStatement;

// *********************************************************************//
// DispIntf:  _CodeGotoStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8F1BAED9-52EC-3545-9CF0-6ED71A76A5CA}
// *********************************************************************//
template<class T>
class _CodeGotoStatementDispT : public TAutoDriver<_CodeGotoStatement>
{
public:
  _CodeGotoStatementDispT(){}

  _CodeGotoStatementDispT(_CodeGotoStatement *pintf)
  {
    TAutoDriver<_CodeGotoStatement>::Bind(pintf, false);
  }

  _CodeGotoStatementDispT(_CodeGotoStatementPtr pintf)
  {
    TAutoDriver<_CodeGotoStatement>::Bind(pintf, true);
  }

  _CodeGotoStatementDispT& operator=(_CodeGotoStatement *pintf)
  {
    TAutoDriver<_CodeGotoStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeGotoStatementDispT& operator=(_CodeGotoStatementPtr pintf)
  {
    TAutoDriver<_CodeGotoStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeGotoStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeGotoStatement);
  }


};
typedef _CodeGotoStatementDispT<_CodeGotoStatement> _CodeGotoStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeIndexerExpression
// Interface: _CodeIndexerExpression
// *********************************************************************//
template <class T /* _CodeIndexerExpression */ >
class TCOM_CodeIndexerExpressionT : public TComInterface<_CodeIndexerExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeIndexerExpressionT() {}
  TCOM_CodeIndexerExpressionT(_CodeIndexerExpression *intf, bool addRef = false) : TComInterface<_CodeIndexerExpression>(intf, addRef) {}
  TCOM_CodeIndexerExpressionT(const TCOM_CodeIndexerExpressionT& src) : TComInterface<_CodeIndexerExpression>(src) {}
  TCOM_CodeIndexerExpressionT& operator=(const TCOM_CodeIndexerExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeIndexerExpressionT<_CodeIndexerExpression> TCOM_CodeIndexerExpression;

// *********************************************************************//
// DispIntf:  _CodeIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C92C323F-8601-34D4-A2D6-F5E2653DB456}
// *********************************************************************//
template<class T>
class _CodeIndexerExpressionDispT : public TAutoDriver<_CodeIndexerExpression>
{
public:
  _CodeIndexerExpressionDispT(){}

  _CodeIndexerExpressionDispT(_CodeIndexerExpression *pintf)
  {
    TAutoDriver<_CodeIndexerExpression>::Bind(pintf, false);
  }

  _CodeIndexerExpressionDispT(_CodeIndexerExpressionPtr pintf)
  {
    TAutoDriver<_CodeIndexerExpression>::Bind(pintf, true);
  }

  _CodeIndexerExpressionDispT& operator=(_CodeIndexerExpression *pintf)
  {
    TAutoDriver<_CodeIndexerExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeIndexerExpressionDispT& operator=(_CodeIndexerExpressionPtr pintf)
  {
    TAutoDriver<_CodeIndexerExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeIndexerExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeIndexerExpression);
  }


};
typedef _CodeIndexerExpressionDispT<_CodeIndexerExpression> _CodeIndexerExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeIterationStatement
// Interface: _CodeIterationStatement
// *********************************************************************//
template <class T /* _CodeIterationStatement */ >
class TCOM_CodeIterationStatementT : public TComInterface<_CodeIterationStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeIterationStatementT() {}
  TCOM_CodeIterationStatementT(_CodeIterationStatement *intf, bool addRef = false) : TComInterface<_CodeIterationStatement>(intf, addRef) {}
  TCOM_CodeIterationStatementT(const TCOM_CodeIterationStatementT& src) : TComInterface<_CodeIterationStatement>(src) {}
  TCOM_CodeIterationStatementT& operator=(const TCOM_CodeIterationStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeIterationStatementT<_CodeIterationStatement> TCOM_CodeIterationStatement;

// *********************************************************************//
// DispIntf:  _CodeIterationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B16F7137-C0E7-3ECF-9652-FB1EA947E44E}
// *********************************************************************//
template<class T>
class _CodeIterationStatementDispT : public TAutoDriver<_CodeIterationStatement>
{
public:
  _CodeIterationStatementDispT(){}

  _CodeIterationStatementDispT(_CodeIterationStatement *pintf)
  {
    TAutoDriver<_CodeIterationStatement>::Bind(pintf, false);
  }

  _CodeIterationStatementDispT(_CodeIterationStatementPtr pintf)
  {
    TAutoDriver<_CodeIterationStatement>::Bind(pintf, true);
  }

  _CodeIterationStatementDispT& operator=(_CodeIterationStatement *pintf)
  {
    TAutoDriver<_CodeIterationStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeIterationStatementDispT& operator=(_CodeIterationStatementPtr pintf)
  {
    TAutoDriver<_CodeIterationStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeIterationStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeIterationStatement);
  }


};
typedef _CodeIterationStatementDispT<_CodeIterationStatement> _CodeIterationStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeLabeledStatement
// Interface: _CodeLabeledStatement
// *********************************************************************//
template <class T /* _CodeLabeledStatement */ >
class TCOM_CodeLabeledStatementT : public TComInterface<_CodeLabeledStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeLabeledStatementT() {}
  TCOM_CodeLabeledStatementT(_CodeLabeledStatement *intf, bool addRef = false) : TComInterface<_CodeLabeledStatement>(intf, addRef) {}
  TCOM_CodeLabeledStatementT(const TCOM_CodeLabeledStatementT& src) : TComInterface<_CodeLabeledStatement>(src) {}
  TCOM_CodeLabeledStatementT& operator=(const TCOM_CodeLabeledStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeLabeledStatementT<_CodeLabeledStatement> TCOM_CodeLabeledStatement;

// *********************************************************************//
// DispIntf:  _CodeLabeledStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56699CCA-FD8D-3AD2-9643-149BAD87FD60}
// *********************************************************************//
template<class T>
class _CodeLabeledStatementDispT : public TAutoDriver<_CodeLabeledStatement>
{
public:
  _CodeLabeledStatementDispT(){}

  _CodeLabeledStatementDispT(_CodeLabeledStatement *pintf)
  {
    TAutoDriver<_CodeLabeledStatement>::Bind(pintf, false);
  }

  _CodeLabeledStatementDispT(_CodeLabeledStatementPtr pintf)
  {
    TAutoDriver<_CodeLabeledStatement>::Bind(pintf, true);
  }

  _CodeLabeledStatementDispT& operator=(_CodeLabeledStatement *pintf)
  {
    TAutoDriver<_CodeLabeledStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeLabeledStatementDispT& operator=(_CodeLabeledStatementPtr pintf)
  {
    TAutoDriver<_CodeLabeledStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeLabeledStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeLabeledStatement);
  }


};
typedef _CodeLabeledStatementDispT<_CodeLabeledStatement> _CodeLabeledStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeLinePragma
// Interface: _CodeLinePragma
// *********************************************************************//
template <class T /* _CodeLinePragma */ >
class TCOM_CodeLinePragmaT : public TComInterface<_CodeLinePragma>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeLinePragmaT() {}
  TCOM_CodeLinePragmaT(_CodeLinePragma *intf, bool addRef = false) : TComInterface<_CodeLinePragma>(intf, addRef) {}
  TCOM_CodeLinePragmaT(const TCOM_CodeLinePragmaT& src) : TComInterface<_CodeLinePragma>(src) {}
  TCOM_CodeLinePragmaT& operator=(const TCOM_CodeLinePragmaT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeLinePragmaT<_CodeLinePragma> TCOM_CodeLinePragma;

// *********************************************************************//
// DispIntf:  _CodeLinePragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B52DED6-92F3-3B4F-851C-AB1F647582A3}
// *********************************************************************//
template<class T>
class _CodeLinePragmaDispT : public TAutoDriver<_CodeLinePragma>
{
public:
  _CodeLinePragmaDispT(){}

  _CodeLinePragmaDispT(_CodeLinePragma *pintf)
  {
    TAutoDriver<_CodeLinePragma>::Bind(pintf, false);
  }

  _CodeLinePragmaDispT(_CodeLinePragmaPtr pintf)
  {
    TAutoDriver<_CodeLinePragma>::Bind(pintf, true);
  }

  _CodeLinePragmaDispT& operator=(_CodeLinePragma *pintf)
  {
    TAutoDriver<_CodeLinePragma>::Bind(pintf, false);
    return *this;
  }

  _CodeLinePragmaDispT& operator=(_CodeLinePragmaPtr pintf)
  {
    TAutoDriver<_CodeLinePragma>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeLinePragma));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeLinePragma);
  }


};
typedef _CodeLinePragmaDispT<_CodeLinePragma> _CodeLinePragmaDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMemberEvent
// Interface: _CodeMemberEvent
// *********************************************************************//
template <class T /* _CodeMemberEvent */ >
class TCOM_CodeMemberEventT : public TComInterface<_CodeMemberEvent>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMemberEventT() {}
  TCOM_CodeMemberEventT(_CodeMemberEvent *intf, bool addRef = false) : TComInterface<_CodeMemberEvent>(intf, addRef) {}
  TCOM_CodeMemberEventT(const TCOM_CodeMemberEventT& src) : TComInterface<_CodeMemberEvent>(src) {}
  TCOM_CodeMemberEventT& operator=(const TCOM_CodeMemberEventT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMemberEventT<_CodeMemberEvent> TCOM_CodeMemberEvent;

// *********************************************************************//
// DispIntf:  _CodeMemberEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E1A7EA9F-5D43-3FA9-AFBC-9A2BFDA84B65}
// *********************************************************************//
template<class T>
class _CodeMemberEventDispT : public TAutoDriver<_CodeMemberEvent>
{
public:
  _CodeMemberEventDispT(){}

  _CodeMemberEventDispT(_CodeMemberEvent *pintf)
  {
    TAutoDriver<_CodeMemberEvent>::Bind(pintf, false);
  }

  _CodeMemberEventDispT(_CodeMemberEventPtr pintf)
  {
    TAutoDriver<_CodeMemberEvent>::Bind(pintf, true);
  }

  _CodeMemberEventDispT& operator=(_CodeMemberEvent *pintf)
  {
    TAutoDriver<_CodeMemberEvent>::Bind(pintf, false);
    return *this;
  }

  _CodeMemberEventDispT& operator=(_CodeMemberEventPtr pintf)
  {
    TAutoDriver<_CodeMemberEvent>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMemberEvent));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMemberEvent);
  }


};
typedef _CodeMemberEventDispT<_CodeMemberEvent> _CodeMemberEventDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReferenceCollection
// Interface: _CodeTypeReferenceCollection
// *********************************************************************//
template <class T /* _CodeTypeReferenceCollection */ >
class TCOM_CodeTypeReferenceCollectionT : public TComInterface<_CodeTypeReferenceCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeReferenceCollectionT() {}
  TCOM_CodeTypeReferenceCollectionT(_CodeTypeReferenceCollection *intf, bool addRef = false) : TComInterface<_CodeTypeReferenceCollection>(intf, addRef) {}
  TCOM_CodeTypeReferenceCollectionT(const TCOM_CodeTypeReferenceCollectionT& src) : TComInterface<_CodeTypeReferenceCollection>(src) {}
  TCOM_CodeTypeReferenceCollectionT& operator=(const TCOM_CodeTypeReferenceCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeReferenceCollectionT<_CodeTypeReferenceCollection> TCOM_CodeTypeReferenceCollection;

// *********************************************************************//
// DispIntf:  _CodeTypeReferenceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {68A04561-D0A0-3EEB-B904-462DC4EB5531}
// *********************************************************************//
template<class T>
class _CodeTypeReferenceCollectionDispT : public TAutoDriver<_CodeTypeReferenceCollection>
{
public:
  _CodeTypeReferenceCollectionDispT(){}

  _CodeTypeReferenceCollectionDispT(_CodeTypeReferenceCollection *pintf)
  {
    TAutoDriver<_CodeTypeReferenceCollection>::Bind(pintf, false);
  }

  _CodeTypeReferenceCollectionDispT(_CodeTypeReferenceCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeReferenceCollection>::Bind(pintf, true);
  }

  _CodeTypeReferenceCollectionDispT& operator=(_CodeTypeReferenceCollection *pintf)
  {
    TAutoDriver<_CodeTypeReferenceCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeReferenceCollectionDispT& operator=(_CodeTypeReferenceCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeReferenceCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeReferenceCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeReferenceCollection);
  }


};
typedef _CodeTypeReferenceCollectionDispT<_CodeTypeReferenceCollection> _CodeTypeReferenceCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMemberField
// Interface: _CodeMemberField
// *********************************************************************//
template <class T /* _CodeMemberField */ >
class TCOM_CodeMemberFieldT : public TComInterface<_CodeMemberField>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMemberFieldT() {}
  TCOM_CodeMemberFieldT(_CodeMemberField *intf, bool addRef = false) : TComInterface<_CodeMemberField>(intf, addRef) {}
  TCOM_CodeMemberFieldT(const TCOM_CodeMemberFieldT& src) : TComInterface<_CodeMemberField>(src) {}
  TCOM_CodeMemberFieldT& operator=(const TCOM_CodeMemberFieldT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMemberFieldT<_CodeMemberField> TCOM_CodeMemberField;

// *********************************************************************//
// DispIntf:  _CodeMemberField
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEF50D17-7AA6-3E14-96C6-DD90FE5BAA1E}
// *********************************************************************//
template<class T>
class _CodeMemberFieldDispT : public TAutoDriver<_CodeMemberField>
{
public:
  _CodeMemberFieldDispT(){}

  _CodeMemberFieldDispT(_CodeMemberField *pintf)
  {
    TAutoDriver<_CodeMemberField>::Bind(pintf, false);
  }

  _CodeMemberFieldDispT(_CodeMemberFieldPtr pintf)
  {
    TAutoDriver<_CodeMemberField>::Bind(pintf, true);
  }

  _CodeMemberFieldDispT& operator=(_CodeMemberField *pintf)
  {
    TAutoDriver<_CodeMemberField>::Bind(pintf, false);
    return *this;
  }

  _CodeMemberFieldDispT& operator=(_CodeMemberFieldPtr pintf)
  {
    TAutoDriver<_CodeMemberField>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMemberField));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMemberField);
  }


};
typedef _CodeMemberFieldDispT<_CodeMemberField> _CodeMemberFieldDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeParameterDeclarationExpressionCollection
// Interface: _CodeParameterDeclarationExpressionCollection
// *********************************************************************//
template <class T /* _CodeParameterDeclarationExpressionCollection */ >
class TCOM_CodeParameterDeclarationExpressionCollectionT : public TComInterface<_CodeParameterDeclarationExpressionCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeParameterDeclarationExpressionCollectionT() {}
  TCOM_CodeParameterDeclarationExpressionCollectionT(_CodeParameterDeclarationExpressionCollection *intf, bool addRef = false) : TComInterface<_CodeParameterDeclarationExpressionCollection>(intf, addRef) {}
  TCOM_CodeParameterDeclarationExpressionCollectionT(const TCOM_CodeParameterDeclarationExpressionCollectionT& src) : TComInterface<_CodeParameterDeclarationExpressionCollection>(src) {}
  TCOM_CodeParameterDeclarationExpressionCollectionT& operator=(const TCOM_CodeParameterDeclarationExpressionCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeParameterDeclarationExpressionCollectionT<_CodeParameterDeclarationExpressionCollection> TCOM_CodeParameterDeclarationExpressionCollection;

// *********************************************************************//
// DispIntf:  _CodeParameterDeclarationExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05192769-7D6A-3C8C-94C2-DFA668F61088}
// *********************************************************************//
template<class T>
class _CodeParameterDeclarationExpressionCollectionDispT : public TAutoDriver<_CodeParameterDeclarationExpressionCollection>
{
public:
  _CodeParameterDeclarationExpressionCollectionDispT(){}

  _CodeParameterDeclarationExpressionCollectionDispT(_CodeParameterDeclarationExpressionCollection *pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpressionCollection>::Bind(pintf, false);
  }

  _CodeParameterDeclarationExpressionCollectionDispT(_CodeParameterDeclarationExpressionCollectionPtr pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpressionCollection>::Bind(pintf, true);
  }

  _CodeParameterDeclarationExpressionCollectionDispT& operator=(_CodeParameterDeclarationExpressionCollection *pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpressionCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeParameterDeclarationExpressionCollectionDispT& operator=(_CodeParameterDeclarationExpressionCollectionPtr pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpressionCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeParameterDeclarationExpressionCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeParameterDeclarationExpressionCollection);
  }


};
typedef _CodeParameterDeclarationExpressionCollectionDispT<_CodeParameterDeclarationExpressionCollection> _CodeParameterDeclarationExpressionCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeParameterCollection
// Interface: _CodeTypeParameterCollection
// *********************************************************************//
template <class T /* _CodeTypeParameterCollection */ >
class TCOM_CodeTypeParameterCollectionT : public TComInterface<_CodeTypeParameterCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeParameterCollectionT() {}
  TCOM_CodeTypeParameterCollectionT(_CodeTypeParameterCollection *intf, bool addRef = false) : TComInterface<_CodeTypeParameterCollection>(intf, addRef) {}
  TCOM_CodeTypeParameterCollectionT(const TCOM_CodeTypeParameterCollectionT& src) : TComInterface<_CodeTypeParameterCollection>(src) {}
  TCOM_CodeTypeParameterCollectionT& operator=(const TCOM_CodeTypeParameterCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeParameterCollectionT<_CodeTypeParameterCollection> TCOM_CodeTypeParameterCollection;

// *********************************************************************//
// DispIntf:  _CodeTypeParameterCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E814F1F-C349-3766-B55D-87C9B0232B20}
// *********************************************************************//
template<class T>
class _CodeTypeParameterCollectionDispT : public TAutoDriver<_CodeTypeParameterCollection>
{
public:
  _CodeTypeParameterCollectionDispT(){}

  _CodeTypeParameterCollectionDispT(_CodeTypeParameterCollection *pintf)
  {
    TAutoDriver<_CodeTypeParameterCollection>::Bind(pintf, false);
  }

  _CodeTypeParameterCollectionDispT(_CodeTypeParameterCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeParameterCollection>::Bind(pintf, true);
  }

  _CodeTypeParameterCollectionDispT& operator=(_CodeTypeParameterCollection *pintf)
  {
    TAutoDriver<_CodeTypeParameterCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeParameterCollectionDispT& operator=(_CodeTypeParameterCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeParameterCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeParameterCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeParameterCollection);
  }


};
typedef _CodeTypeParameterCollectionDispT<_CodeTypeParameterCollection> _CodeTypeParameterCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMemberProperty
// Interface: _CodeMemberProperty
// *********************************************************************//
template <class T /* _CodeMemberProperty */ >
class TCOM_CodeMemberPropertyT : public TComInterface<_CodeMemberProperty>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMemberPropertyT() {}
  TCOM_CodeMemberPropertyT(_CodeMemberProperty *intf, bool addRef = false) : TComInterface<_CodeMemberProperty>(intf, addRef) {}
  TCOM_CodeMemberPropertyT(const TCOM_CodeMemberPropertyT& src) : TComInterface<_CodeMemberProperty>(src) {}
  TCOM_CodeMemberPropertyT& operator=(const TCOM_CodeMemberPropertyT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMemberPropertyT<_CodeMemberProperty> TCOM_CodeMemberProperty;

// *********************************************************************//
// DispIntf:  _CodeMemberProperty
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {802E2ACC-A7F8-3CA9-9114-F49998BEBE6E}
// *********************************************************************//
template<class T>
class _CodeMemberPropertyDispT : public TAutoDriver<_CodeMemberProperty>
{
public:
  _CodeMemberPropertyDispT(){}

  _CodeMemberPropertyDispT(_CodeMemberProperty *pintf)
  {
    TAutoDriver<_CodeMemberProperty>::Bind(pintf, false);
  }

  _CodeMemberPropertyDispT(_CodeMemberPropertyPtr pintf)
  {
    TAutoDriver<_CodeMemberProperty>::Bind(pintf, true);
  }

  _CodeMemberPropertyDispT& operator=(_CodeMemberProperty *pintf)
  {
    TAutoDriver<_CodeMemberProperty>::Bind(pintf, false);
    return *this;
  }

  _CodeMemberPropertyDispT& operator=(_CodeMemberPropertyPtr pintf)
  {
    TAutoDriver<_CodeMemberProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMemberProperty));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMemberProperty);
  }


};
typedef _CodeMemberPropertyDispT<_CodeMemberProperty> _CodeMemberPropertyDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMethodInvokeExpression
// Interface: _CodeMethodInvokeExpression
// *********************************************************************//
template <class T /* _CodeMethodInvokeExpression */ >
class TCOM_CodeMethodInvokeExpressionT : public TComInterface<_CodeMethodInvokeExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMethodInvokeExpressionT() {}
  TCOM_CodeMethodInvokeExpressionT(_CodeMethodInvokeExpression *intf, bool addRef = false) : TComInterface<_CodeMethodInvokeExpression>(intf, addRef) {}
  TCOM_CodeMethodInvokeExpressionT(const TCOM_CodeMethodInvokeExpressionT& src) : TComInterface<_CodeMethodInvokeExpression>(src) {}
  TCOM_CodeMethodInvokeExpressionT& operator=(const TCOM_CodeMethodInvokeExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMethodInvokeExpressionT<_CodeMethodInvokeExpression> TCOM_CodeMethodInvokeExpression;

// *********************************************************************//
// DispIntf:  _CodeMethodInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFE1F142-85CF-3353-8512-EE73775E9C4C}
// *********************************************************************//
template<class T>
class _CodeMethodInvokeExpressionDispT : public TAutoDriver<_CodeMethodInvokeExpression>
{
public:
  _CodeMethodInvokeExpressionDispT(){}

  _CodeMethodInvokeExpressionDispT(_CodeMethodInvokeExpression *pintf)
  {
    TAutoDriver<_CodeMethodInvokeExpression>::Bind(pintf, false);
  }

  _CodeMethodInvokeExpressionDispT(_CodeMethodInvokeExpressionPtr pintf)
  {
    TAutoDriver<_CodeMethodInvokeExpression>::Bind(pintf, true);
  }

  _CodeMethodInvokeExpressionDispT& operator=(_CodeMethodInvokeExpression *pintf)
  {
    TAutoDriver<_CodeMethodInvokeExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeMethodInvokeExpressionDispT& operator=(_CodeMethodInvokeExpressionPtr pintf)
  {
    TAutoDriver<_CodeMethodInvokeExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMethodInvokeExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMethodInvokeExpression);
  }


};
typedef _CodeMethodInvokeExpressionDispT<_CodeMethodInvokeExpression> _CodeMethodInvokeExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMethodReferenceExpression
// Interface: _CodeMethodReferenceExpression
// *********************************************************************//
template <class T /* _CodeMethodReferenceExpression */ >
class TCOM_CodeMethodReferenceExpressionT : public TComInterface<_CodeMethodReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMethodReferenceExpressionT() {}
  TCOM_CodeMethodReferenceExpressionT(_CodeMethodReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeMethodReferenceExpression>(intf, addRef) {}
  TCOM_CodeMethodReferenceExpressionT(const TCOM_CodeMethodReferenceExpressionT& src) : TComInterface<_CodeMethodReferenceExpression>(src) {}
  TCOM_CodeMethodReferenceExpressionT& operator=(const TCOM_CodeMethodReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMethodReferenceExpressionT<_CodeMethodReferenceExpression> TCOM_CodeMethodReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeMethodReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CBDF02F4-A9F4-33C0-8B24-275008890DCB}
// *********************************************************************//
template<class T>
class _CodeMethodReferenceExpressionDispT : public TAutoDriver<_CodeMethodReferenceExpression>
{
public:
  _CodeMethodReferenceExpressionDispT(){}

  _CodeMethodReferenceExpressionDispT(_CodeMethodReferenceExpression *pintf)
  {
    TAutoDriver<_CodeMethodReferenceExpression>::Bind(pintf, false);
  }

  _CodeMethodReferenceExpressionDispT(_CodeMethodReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeMethodReferenceExpression>::Bind(pintf, true);
  }

  _CodeMethodReferenceExpressionDispT& operator=(_CodeMethodReferenceExpression *pintf)
  {
    TAutoDriver<_CodeMethodReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeMethodReferenceExpressionDispT& operator=(_CodeMethodReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeMethodReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMethodReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMethodReferenceExpression);
  }


};
typedef _CodeMethodReferenceExpressionDispT<_CodeMethodReferenceExpression> _CodeMethodReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeMethodReturnStatement
// Interface: _CodeMethodReturnStatement
// *********************************************************************//
template <class T /* _CodeMethodReturnStatement */ >
class TCOM_CodeMethodReturnStatementT : public TComInterface<_CodeMethodReturnStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeMethodReturnStatementT() {}
  TCOM_CodeMethodReturnStatementT(_CodeMethodReturnStatement *intf, bool addRef = false) : TComInterface<_CodeMethodReturnStatement>(intf, addRef) {}
  TCOM_CodeMethodReturnStatementT(const TCOM_CodeMethodReturnStatementT& src) : TComInterface<_CodeMethodReturnStatement>(src) {}
  TCOM_CodeMethodReturnStatementT& operator=(const TCOM_CodeMethodReturnStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeMethodReturnStatementT<_CodeMethodReturnStatement> TCOM_CodeMethodReturnStatement;

// *********************************************************************//
// DispIntf:  _CodeMethodReturnStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {851D821B-1E0C-3E91-832D-BA593523F566}
// *********************************************************************//
template<class T>
class _CodeMethodReturnStatementDispT : public TAutoDriver<_CodeMethodReturnStatement>
{
public:
  _CodeMethodReturnStatementDispT(){}

  _CodeMethodReturnStatementDispT(_CodeMethodReturnStatement *pintf)
  {
    TAutoDriver<_CodeMethodReturnStatement>::Bind(pintf, false);
  }

  _CodeMethodReturnStatementDispT(_CodeMethodReturnStatementPtr pintf)
  {
    TAutoDriver<_CodeMethodReturnStatement>::Bind(pintf, true);
  }

  _CodeMethodReturnStatementDispT& operator=(_CodeMethodReturnStatement *pintf)
  {
    TAutoDriver<_CodeMethodReturnStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeMethodReturnStatementDispT& operator=(_CodeMethodReturnStatementPtr pintf)
  {
    TAutoDriver<_CodeMethodReturnStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeMethodReturnStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeMethodReturnStatement);
  }


};
typedef _CodeMethodReturnStatementDispT<_CodeMethodReturnStatement> _CodeMethodReturnStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeNamespace
// Interface: _CodeNamespace
// *********************************************************************//
template <class T /* _CodeNamespace */ >
class TCOM_CodeNamespaceT : public TComInterface<_CodeNamespace>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeNamespaceT() {}
  TCOM_CodeNamespaceT(_CodeNamespace *intf, bool addRef = false) : TComInterface<_CodeNamespace>(intf, addRef) {}
  TCOM_CodeNamespaceT(const TCOM_CodeNamespaceT& src) : TComInterface<_CodeNamespace>(src) {}
  TCOM_CodeNamespaceT& operator=(const TCOM_CodeNamespaceT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeNamespaceT<_CodeNamespace> TCOM_CodeNamespace;

// *********************************************************************//
// DispIntf:  _CodeNamespace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {31ED1DCB-C007-3F96-8809-4D5E3540A7C1}
// *********************************************************************//
template<class T>
class _CodeNamespaceDispT : public TAutoDriver<_CodeNamespace>
{
public:
  _CodeNamespaceDispT(){}

  _CodeNamespaceDispT(_CodeNamespace *pintf)
  {
    TAutoDriver<_CodeNamespace>::Bind(pintf, false);
  }

  _CodeNamespaceDispT(_CodeNamespacePtr pintf)
  {
    TAutoDriver<_CodeNamespace>::Bind(pintf, true);
  }

  _CodeNamespaceDispT& operator=(_CodeNamespace *pintf)
  {
    TAutoDriver<_CodeNamespace>::Bind(pintf, false);
    return *this;
  }

  _CodeNamespaceDispT& operator=(_CodeNamespacePtr pintf)
  {
    TAutoDriver<_CodeNamespace>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeNamespace));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeNamespace);
  }


};
typedef _CodeNamespaceDispT<_CodeNamespace> _CodeNamespaceDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDeclarationCollection
// Interface: _CodeTypeDeclarationCollection
// *********************************************************************//
template <class T /* _CodeTypeDeclarationCollection */ >
class TCOM_CodeTypeDeclarationCollectionT : public TComInterface<_CodeTypeDeclarationCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeDeclarationCollectionT() {}
  TCOM_CodeTypeDeclarationCollectionT(_CodeTypeDeclarationCollection *intf, bool addRef = false) : TComInterface<_CodeTypeDeclarationCollection>(intf, addRef) {}
  TCOM_CodeTypeDeclarationCollectionT(const TCOM_CodeTypeDeclarationCollectionT& src) : TComInterface<_CodeTypeDeclarationCollection>(src) {}
  TCOM_CodeTypeDeclarationCollectionT& operator=(const TCOM_CodeTypeDeclarationCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeDeclarationCollectionT<_CodeTypeDeclarationCollection> TCOM_CodeTypeDeclarationCollection;

// *********************************************************************//
// DispIntf:  _CodeTypeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE0ECED3-5F0D-310A-B352-7D1ADF28F8EC}
// *********************************************************************//
template<class T>
class _CodeTypeDeclarationCollectionDispT : public TAutoDriver<_CodeTypeDeclarationCollection>
{
public:
  _CodeTypeDeclarationCollectionDispT(){}

  _CodeTypeDeclarationCollectionDispT(_CodeTypeDeclarationCollection *pintf)
  {
    TAutoDriver<_CodeTypeDeclarationCollection>::Bind(pintf, false);
  }

  _CodeTypeDeclarationCollectionDispT(_CodeTypeDeclarationCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeDeclarationCollection>::Bind(pintf, true);
  }

  _CodeTypeDeclarationCollectionDispT& operator=(_CodeTypeDeclarationCollection *pintf)
  {
    TAutoDriver<_CodeTypeDeclarationCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeDeclarationCollectionDispT& operator=(_CodeTypeDeclarationCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeDeclarationCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeDeclarationCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeDeclarationCollection);
  }


};
typedef _CodeTypeDeclarationCollectionDispT<_CodeTypeDeclarationCollection> _CodeTypeDeclarationCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceImportCollection
// Interface: _CodeNamespaceImportCollection
// *********************************************************************//
template <class T /* _CodeNamespaceImportCollection */ >
class TCOM_CodeNamespaceImportCollectionT : public TComInterface<_CodeNamespaceImportCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeNamespaceImportCollectionT() {}
  TCOM_CodeNamespaceImportCollectionT(_CodeNamespaceImportCollection *intf, bool addRef = false) : TComInterface<_CodeNamespaceImportCollection>(intf, addRef) {}
  TCOM_CodeNamespaceImportCollectionT(const TCOM_CodeNamespaceImportCollectionT& src) : TComInterface<_CodeNamespaceImportCollection>(src) {}
  TCOM_CodeNamespaceImportCollectionT& operator=(const TCOM_CodeNamespaceImportCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeNamespaceImportCollectionT<_CodeNamespaceImportCollection> TCOM_CodeNamespaceImportCollection;

// *********************************************************************//
// DispIntf:  _CodeNamespaceImportCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C545457-76D7-3C56-B277-6A9E86D1046F}
// *********************************************************************//
template<class T>
class _CodeNamespaceImportCollectionDispT : public TAutoDriver<_CodeNamespaceImportCollection>
{
public:
  _CodeNamespaceImportCollectionDispT(){}

  _CodeNamespaceImportCollectionDispT(_CodeNamespaceImportCollection *pintf)
  {
    TAutoDriver<_CodeNamespaceImportCollection>::Bind(pintf, false);
  }

  _CodeNamespaceImportCollectionDispT(_CodeNamespaceImportCollectionPtr pintf)
  {
    TAutoDriver<_CodeNamespaceImportCollection>::Bind(pintf, true);
  }

  _CodeNamespaceImportCollectionDispT& operator=(_CodeNamespaceImportCollection *pintf)
  {
    TAutoDriver<_CodeNamespaceImportCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeNamespaceImportCollectionDispT& operator=(_CodeNamespaceImportCollectionPtr pintf)
  {
    TAutoDriver<_CodeNamespaceImportCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeNamespaceImportCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeNamespaceImportCollection);
  }


};
typedef _CodeNamespaceImportCollectionDispT<_CodeNamespaceImportCollection> _CodeNamespaceImportCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceImport
// Interface: _CodeNamespaceImport
// *********************************************************************//
template <class T /* _CodeNamespaceImport */ >
class TCOM_CodeNamespaceImportT : public TComInterface<_CodeNamespaceImport>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeNamespaceImportT() {}
  TCOM_CodeNamespaceImportT(_CodeNamespaceImport *intf, bool addRef = false) : TComInterface<_CodeNamespaceImport>(intf, addRef) {}
  TCOM_CodeNamespaceImportT(const TCOM_CodeNamespaceImportT& src) : TComInterface<_CodeNamespaceImport>(src) {}
  TCOM_CodeNamespaceImportT& operator=(const TCOM_CodeNamespaceImportT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeNamespaceImportT<_CodeNamespaceImport> TCOM_CodeNamespaceImport;

// *********************************************************************//
// DispIntf:  _CodeNamespaceImport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {34418787-726B-3E74-AEED-C01397FC707D}
// *********************************************************************//
template<class T>
class _CodeNamespaceImportDispT : public TAutoDriver<_CodeNamespaceImport>
{
public:
  _CodeNamespaceImportDispT(){}

  _CodeNamespaceImportDispT(_CodeNamespaceImport *pintf)
  {
    TAutoDriver<_CodeNamespaceImport>::Bind(pintf, false);
  }

  _CodeNamespaceImportDispT(_CodeNamespaceImportPtr pintf)
  {
    TAutoDriver<_CodeNamespaceImport>::Bind(pintf, true);
  }

  _CodeNamespaceImportDispT& operator=(_CodeNamespaceImport *pintf)
  {
    TAutoDriver<_CodeNamespaceImport>::Bind(pintf, false);
    return *this;
  }

  _CodeNamespaceImportDispT& operator=(_CodeNamespaceImportPtr pintf)
  {
    TAutoDriver<_CodeNamespaceImport>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeNamespaceImport));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeNamespaceImport);
  }


};
typedef _CodeNamespaceImportDispT<_CodeNamespaceImport> _CodeNamespaceImportDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeObjectCreateExpression
// Interface: _CodeObjectCreateExpression
// *********************************************************************//
template <class T /* _CodeObjectCreateExpression */ >
class TCOM_CodeObjectCreateExpressionT : public TComInterface<_CodeObjectCreateExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeObjectCreateExpressionT() {}
  TCOM_CodeObjectCreateExpressionT(_CodeObjectCreateExpression *intf, bool addRef = false) : TComInterface<_CodeObjectCreateExpression>(intf, addRef) {}
  TCOM_CodeObjectCreateExpressionT(const TCOM_CodeObjectCreateExpressionT& src) : TComInterface<_CodeObjectCreateExpression>(src) {}
  TCOM_CodeObjectCreateExpressionT& operator=(const TCOM_CodeObjectCreateExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeObjectCreateExpressionT<_CodeObjectCreateExpression> TCOM_CodeObjectCreateExpression;

// *********************************************************************//
// DispIntf:  _CodeObjectCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CFE5E5E9-745F-348B-A7E6-38A46D1A20E0}
// *********************************************************************//
template<class T>
class _CodeObjectCreateExpressionDispT : public TAutoDriver<_CodeObjectCreateExpression>
{
public:
  _CodeObjectCreateExpressionDispT(){}

  _CodeObjectCreateExpressionDispT(_CodeObjectCreateExpression *pintf)
  {
    TAutoDriver<_CodeObjectCreateExpression>::Bind(pintf, false);
  }

  _CodeObjectCreateExpressionDispT(_CodeObjectCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeObjectCreateExpression>::Bind(pintf, true);
  }

  _CodeObjectCreateExpressionDispT& operator=(_CodeObjectCreateExpression *pintf)
  {
    TAutoDriver<_CodeObjectCreateExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeObjectCreateExpressionDispT& operator=(_CodeObjectCreateExpressionPtr pintf)
  {
    TAutoDriver<_CodeObjectCreateExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeObjectCreateExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeObjectCreateExpression);
  }


};
typedef _CodeObjectCreateExpressionDispT<_CodeObjectCreateExpression> _CodeObjectCreateExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeParameterDeclarationExpression
// Interface: _CodeParameterDeclarationExpression
// *********************************************************************//
template <class T /* _CodeParameterDeclarationExpression */ >
class TCOM_CodeParameterDeclarationExpressionT : public TComInterface<_CodeParameterDeclarationExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeParameterDeclarationExpressionT() {}
  TCOM_CodeParameterDeclarationExpressionT(_CodeParameterDeclarationExpression *intf, bool addRef = false) : TComInterface<_CodeParameterDeclarationExpression>(intf, addRef) {}
  TCOM_CodeParameterDeclarationExpressionT(const TCOM_CodeParameterDeclarationExpressionT& src) : TComInterface<_CodeParameterDeclarationExpression>(src) {}
  TCOM_CodeParameterDeclarationExpressionT& operator=(const TCOM_CodeParameterDeclarationExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeParameterDeclarationExpressionT<_CodeParameterDeclarationExpression> TCOM_CodeParameterDeclarationExpression;

// *********************************************************************//
// DispIntf:  _CodeParameterDeclarationExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE96565B-2B1A-33C6-BA07-B63158F1C8C4}
// *********************************************************************//
template<class T>
class _CodeParameterDeclarationExpressionDispT : public TAutoDriver<_CodeParameterDeclarationExpression>
{
public:
  _CodeParameterDeclarationExpressionDispT(){}

  _CodeParameterDeclarationExpressionDispT(_CodeParameterDeclarationExpression *pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpression>::Bind(pintf, false);
  }

  _CodeParameterDeclarationExpressionDispT(_CodeParameterDeclarationExpressionPtr pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpression>::Bind(pintf, true);
  }

  _CodeParameterDeclarationExpressionDispT& operator=(_CodeParameterDeclarationExpression *pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeParameterDeclarationExpressionDispT& operator=(_CodeParameterDeclarationExpressionPtr pintf)
  {
    TAutoDriver<_CodeParameterDeclarationExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeParameterDeclarationExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeParameterDeclarationExpression);
  }


};
typedef _CodeParameterDeclarationExpressionDispT<_CodeParameterDeclarationExpression> _CodeParameterDeclarationExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodePrimitiveExpression
// Interface: _CodePrimitiveExpression
// *********************************************************************//
template <class T /* _CodePrimitiveExpression */ >
class TCOM_CodePrimitiveExpressionT : public TComInterface<_CodePrimitiveExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodePrimitiveExpressionT() {}
  TCOM_CodePrimitiveExpressionT(_CodePrimitiveExpression *intf, bool addRef = false) : TComInterface<_CodePrimitiveExpression>(intf, addRef) {}
  TCOM_CodePrimitiveExpressionT(const TCOM_CodePrimitiveExpressionT& src) : TComInterface<_CodePrimitiveExpression>(src) {}
  TCOM_CodePrimitiveExpressionT& operator=(const TCOM_CodePrimitiveExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodePrimitiveExpressionT<_CodePrimitiveExpression> TCOM_CodePrimitiveExpression;

// *********************************************************************//
// DispIntf:  _CodePrimitiveExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {175BB49A-4CBE-38B3-8C6C-1B0145EDABB7}
// *********************************************************************//
template<class T>
class _CodePrimitiveExpressionDispT : public TAutoDriver<_CodePrimitiveExpression>
{
public:
  _CodePrimitiveExpressionDispT(){}

  _CodePrimitiveExpressionDispT(_CodePrimitiveExpression *pintf)
  {
    TAutoDriver<_CodePrimitiveExpression>::Bind(pintf, false);
  }

  _CodePrimitiveExpressionDispT(_CodePrimitiveExpressionPtr pintf)
  {
    TAutoDriver<_CodePrimitiveExpression>::Bind(pintf, true);
  }

  _CodePrimitiveExpressionDispT& operator=(_CodePrimitiveExpression *pintf)
  {
    TAutoDriver<_CodePrimitiveExpression>::Bind(pintf, false);
    return *this;
  }

  _CodePrimitiveExpressionDispT& operator=(_CodePrimitiveExpressionPtr pintf)
  {
    TAutoDriver<_CodePrimitiveExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodePrimitiveExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodePrimitiveExpression);
  }


};
typedef _CodePrimitiveExpressionDispT<_CodePrimitiveExpression> _CodePrimitiveExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodePropertyReferenceExpression
// Interface: _CodePropertyReferenceExpression
// *********************************************************************//
template <class T /* _CodePropertyReferenceExpression */ >
class TCOM_CodePropertyReferenceExpressionT : public TComInterface<_CodePropertyReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodePropertyReferenceExpressionT() {}
  TCOM_CodePropertyReferenceExpressionT(_CodePropertyReferenceExpression *intf, bool addRef = false) : TComInterface<_CodePropertyReferenceExpression>(intf, addRef) {}
  TCOM_CodePropertyReferenceExpressionT(const TCOM_CodePropertyReferenceExpressionT& src) : TComInterface<_CodePropertyReferenceExpression>(src) {}
  TCOM_CodePropertyReferenceExpressionT& operator=(const TCOM_CodePropertyReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodePropertyReferenceExpressionT<_CodePropertyReferenceExpression> TCOM_CodePropertyReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodePropertyReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F8D64802-F9B7-3095-A641-D31E6E9F87B1}
// *********************************************************************//
template<class T>
class _CodePropertyReferenceExpressionDispT : public TAutoDriver<_CodePropertyReferenceExpression>
{
public:
  _CodePropertyReferenceExpressionDispT(){}

  _CodePropertyReferenceExpressionDispT(_CodePropertyReferenceExpression *pintf)
  {
    TAutoDriver<_CodePropertyReferenceExpression>::Bind(pintf, false);
  }

  _CodePropertyReferenceExpressionDispT(_CodePropertyReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodePropertyReferenceExpression>::Bind(pintf, true);
  }

  _CodePropertyReferenceExpressionDispT& operator=(_CodePropertyReferenceExpression *pintf)
  {
    TAutoDriver<_CodePropertyReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodePropertyReferenceExpressionDispT& operator=(_CodePropertyReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodePropertyReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodePropertyReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodePropertyReferenceExpression);
  }


};
typedef _CodePropertyReferenceExpressionDispT<_CodePropertyReferenceExpression> _CodePropertyReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodePropertySetValueReferenceExpression
// Interface: _CodePropertySetValueReferenceExpression
// *********************************************************************//
template <class T /* _CodePropertySetValueReferenceExpression */ >
class TCOM_CodePropertySetValueReferenceExpressionT : public TComInterface<_CodePropertySetValueReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodePropertySetValueReferenceExpressionT() {}
  TCOM_CodePropertySetValueReferenceExpressionT(_CodePropertySetValueReferenceExpression *intf, bool addRef = false) : TComInterface<_CodePropertySetValueReferenceExpression>(intf, addRef) {}
  TCOM_CodePropertySetValueReferenceExpressionT(const TCOM_CodePropertySetValueReferenceExpressionT& src) : TComInterface<_CodePropertySetValueReferenceExpression>(src) {}
  TCOM_CodePropertySetValueReferenceExpressionT& operator=(const TCOM_CodePropertySetValueReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodePropertySetValueReferenceExpressionT<_CodePropertySetValueReferenceExpression> TCOM_CodePropertySetValueReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodePropertySetValueReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EE13FA1-8A02-3573-9AC9-4FEBD2CEAB45}
// *********************************************************************//
template<class T>
class _CodePropertySetValueReferenceExpressionDispT : public TAutoDriver<_CodePropertySetValueReferenceExpression>
{
public:
  _CodePropertySetValueReferenceExpressionDispT(){}

  _CodePropertySetValueReferenceExpressionDispT(_CodePropertySetValueReferenceExpression *pintf)
  {
    TAutoDriver<_CodePropertySetValueReferenceExpression>::Bind(pintf, false);
  }

  _CodePropertySetValueReferenceExpressionDispT(_CodePropertySetValueReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodePropertySetValueReferenceExpression>::Bind(pintf, true);
  }

  _CodePropertySetValueReferenceExpressionDispT& operator=(_CodePropertySetValueReferenceExpression *pintf)
  {
    TAutoDriver<_CodePropertySetValueReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodePropertySetValueReferenceExpressionDispT& operator=(_CodePropertySetValueReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodePropertySetValueReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodePropertySetValueReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodePropertySetValueReferenceExpression);
  }


};
typedef _CodePropertySetValueReferenceExpressionDispT<_CodePropertySetValueReferenceExpression> _CodePropertySetValueReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeRegionDirective
// Interface: _CodeRegionDirective
// *********************************************************************//
template <class T /* _CodeRegionDirective */ >
class TCOM_CodeRegionDirectiveT : public TComInterface<_CodeRegionDirective>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeRegionDirectiveT() {}
  TCOM_CodeRegionDirectiveT(_CodeRegionDirective *intf, bool addRef = false) : TComInterface<_CodeRegionDirective>(intf, addRef) {}
  TCOM_CodeRegionDirectiveT(const TCOM_CodeRegionDirectiveT& src) : TComInterface<_CodeRegionDirective>(src) {}
  TCOM_CodeRegionDirectiveT& operator=(const TCOM_CodeRegionDirectiveT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeRegionDirectiveT<_CodeRegionDirective> TCOM_CodeRegionDirective;

// *********************************************************************//
// DispIntf:  _CodeRegionDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26AE5CC6-CCFD-3906-8B68-16E5EEFABB10}
// *********************************************************************//
template<class T>
class _CodeRegionDirectiveDispT : public TAutoDriver<_CodeRegionDirective>
{
public:
  _CodeRegionDirectiveDispT(){}

  _CodeRegionDirectiveDispT(_CodeRegionDirective *pintf)
  {
    TAutoDriver<_CodeRegionDirective>::Bind(pintf, false);
  }

  _CodeRegionDirectiveDispT(_CodeRegionDirectivePtr pintf)
  {
    TAutoDriver<_CodeRegionDirective>::Bind(pintf, true);
  }

  _CodeRegionDirectiveDispT& operator=(_CodeRegionDirective *pintf)
  {
    TAutoDriver<_CodeRegionDirective>::Bind(pintf, false);
    return *this;
  }

  _CodeRegionDirectiveDispT& operator=(_CodeRegionDirectivePtr pintf)
  {
    TAutoDriver<_CodeRegionDirective>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeRegionDirective));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeRegionDirective);
  }


};
typedef _CodeRegionDirectiveDispT<_CodeRegionDirective> _CodeRegionDirectiveDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeRemoveEventStatement
// Interface: _CodeRemoveEventStatement
// *********************************************************************//
template <class T /* _CodeRemoveEventStatement */ >
class TCOM_CodeRemoveEventStatementT : public TComInterface<_CodeRemoveEventStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeRemoveEventStatementT() {}
  TCOM_CodeRemoveEventStatementT(_CodeRemoveEventStatement *intf, bool addRef = false) : TComInterface<_CodeRemoveEventStatement>(intf, addRef) {}
  TCOM_CodeRemoveEventStatementT(const TCOM_CodeRemoveEventStatementT& src) : TComInterface<_CodeRemoveEventStatement>(src) {}
  TCOM_CodeRemoveEventStatementT& operator=(const TCOM_CodeRemoveEventStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeRemoveEventStatementT<_CodeRemoveEventStatement> TCOM_CodeRemoveEventStatement;

// *********************************************************************//
// DispIntf:  _CodeRemoveEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {853BC437-CA6E-375D-BCBB-818E917D9691}
// *********************************************************************//
template<class T>
class _CodeRemoveEventStatementDispT : public TAutoDriver<_CodeRemoveEventStatement>
{
public:
  _CodeRemoveEventStatementDispT(){}

  _CodeRemoveEventStatementDispT(_CodeRemoveEventStatement *pintf)
  {
    TAutoDriver<_CodeRemoveEventStatement>::Bind(pintf, false);
  }

  _CodeRemoveEventStatementDispT(_CodeRemoveEventStatementPtr pintf)
  {
    TAutoDriver<_CodeRemoveEventStatement>::Bind(pintf, true);
  }

  _CodeRemoveEventStatementDispT& operator=(_CodeRemoveEventStatement *pintf)
  {
    TAutoDriver<_CodeRemoveEventStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeRemoveEventStatementDispT& operator=(_CodeRemoveEventStatementPtr pintf)
  {
    TAutoDriver<_CodeRemoveEventStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeRemoveEventStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeRemoveEventStatement);
  }


};
typedef _CodeRemoveEventStatementDispT<_CodeRemoveEventStatement> _CodeRemoveEventStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetCompileUnit
// Interface: _CodeSnippetCompileUnit
// *********************************************************************//
template <class T /* _CodeSnippetCompileUnit */ >
class TCOM_CodeSnippetCompileUnitT : public TComInterface<_CodeSnippetCompileUnit>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeSnippetCompileUnitT() {}
  TCOM_CodeSnippetCompileUnitT(_CodeSnippetCompileUnit *intf, bool addRef = false) : TComInterface<_CodeSnippetCompileUnit>(intf, addRef) {}
  TCOM_CodeSnippetCompileUnitT(const TCOM_CodeSnippetCompileUnitT& src) : TComInterface<_CodeSnippetCompileUnit>(src) {}
  TCOM_CodeSnippetCompileUnitT& operator=(const TCOM_CodeSnippetCompileUnitT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeSnippetCompileUnitT<_CodeSnippetCompileUnit> TCOM_CodeSnippetCompileUnit;

// *********************************************************************//
// DispIntf:  _CodeSnippetCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C7D34CF6-CF82-38B0-BF67-EB36DA63AE6E}
// *********************************************************************//
template<class T>
class _CodeSnippetCompileUnitDispT : public TAutoDriver<_CodeSnippetCompileUnit>
{
public:
  _CodeSnippetCompileUnitDispT(){}

  _CodeSnippetCompileUnitDispT(_CodeSnippetCompileUnit *pintf)
  {
    TAutoDriver<_CodeSnippetCompileUnit>::Bind(pintf, false);
  }

  _CodeSnippetCompileUnitDispT(_CodeSnippetCompileUnitPtr pintf)
  {
    TAutoDriver<_CodeSnippetCompileUnit>::Bind(pintf, true);
  }

  _CodeSnippetCompileUnitDispT& operator=(_CodeSnippetCompileUnit *pintf)
  {
    TAutoDriver<_CodeSnippetCompileUnit>::Bind(pintf, false);
    return *this;
  }

  _CodeSnippetCompileUnitDispT& operator=(_CodeSnippetCompileUnitPtr pintf)
  {
    TAutoDriver<_CodeSnippetCompileUnit>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeSnippetCompileUnit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeSnippetCompileUnit);
  }


};
typedef _CodeSnippetCompileUnitDispT<_CodeSnippetCompileUnit> _CodeSnippetCompileUnitDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetExpression
// Interface: _CodeSnippetExpression
// *********************************************************************//
template <class T /* _CodeSnippetExpression */ >
class TCOM_CodeSnippetExpressionT : public TComInterface<_CodeSnippetExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeSnippetExpressionT() {}
  TCOM_CodeSnippetExpressionT(_CodeSnippetExpression *intf, bool addRef = false) : TComInterface<_CodeSnippetExpression>(intf, addRef) {}
  TCOM_CodeSnippetExpressionT(const TCOM_CodeSnippetExpressionT& src) : TComInterface<_CodeSnippetExpression>(src) {}
  TCOM_CodeSnippetExpressionT& operator=(const TCOM_CodeSnippetExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeSnippetExpressionT<_CodeSnippetExpression> TCOM_CodeSnippetExpression;

// *********************************************************************//
// DispIntf:  _CodeSnippetExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9F3E3CD1-8082-31E9-851C-3E177E56A87B}
// *********************************************************************//
template<class T>
class _CodeSnippetExpressionDispT : public TAutoDriver<_CodeSnippetExpression>
{
public:
  _CodeSnippetExpressionDispT(){}

  _CodeSnippetExpressionDispT(_CodeSnippetExpression *pintf)
  {
    TAutoDriver<_CodeSnippetExpression>::Bind(pintf, false);
  }

  _CodeSnippetExpressionDispT(_CodeSnippetExpressionPtr pintf)
  {
    TAutoDriver<_CodeSnippetExpression>::Bind(pintf, true);
  }

  _CodeSnippetExpressionDispT& operator=(_CodeSnippetExpression *pintf)
  {
    TAutoDriver<_CodeSnippetExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeSnippetExpressionDispT& operator=(_CodeSnippetExpressionPtr pintf)
  {
    TAutoDriver<_CodeSnippetExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeSnippetExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeSnippetExpression);
  }


};
typedef _CodeSnippetExpressionDispT<_CodeSnippetExpression> _CodeSnippetExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetStatement
// Interface: _CodeSnippetStatement
// *********************************************************************//
template <class T /* _CodeSnippetStatement */ >
class TCOM_CodeSnippetStatementT : public TComInterface<_CodeSnippetStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeSnippetStatementT() {}
  TCOM_CodeSnippetStatementT(_CodeSnippetStatement *intf, bool addRef = false) : TComInterface<_CodeSnippetStatement>(intf, addRef) {}
  TCOM_CodeSnippetStatementT(const TCOM_CodeSnippetStatementT& src) : TComInterface<_CodeSnippetStatement>(src) {}
  TCOM_CodeSnippetStatementT& operator=(const TCOM_CodeSnippetStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeSnippetStatementT<_CodeSnippetStatement> TCOM_CodeSnippetStatement;

// *********************************************************************//
// DispIntf:  _CodeSnippetStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B4B00613-C48B-3FA9-B8F6-A527EC6F21C3}
// *********************************************************************//
template<class T>
class _CodeSnippetStatementDispT : public TAutoDriver<_CodeSnippetStatement>
{
public:
  _CodeSnippetStatementDispT(){}

  _CodeSnippetStatementDispT(_CodeSnippetStatement *pintf)
  {
    TAutoDriver<_CodeSnippetStatement>::Bind(pintf, false);
  }

  _CodeSnippetStatementDispT(_CodeSnippetStatementPtr pintf)
  {
    TAutoDriver<_CodeSnippetStatement>::Bind(pintf, true);
  }

  _CodeSnippetStatementDispT& operator=(_CodeSnippetStatement *pintf)
  {
    TAutoDriver<_CodeSnippetStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeSnippetStatementDispT& operator=(_CodeSnippetStatementPtr pintf)
  {
    TAutoDriver<_CodeSnippetStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeSnippetStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeSnippetStatement);
  }


};
typedef _CodeSnippetStatementDispT<_CodeSnippetStatement> _CodeSnippetStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetTypeMember
// Interface: _CodeSnippetTypeMember
// *********************************************************************//
template <class T /* _CodeSnippetTypeMember */ >
class TCOM_CodeSnippetTypeMemberT : public TComInterface<_CodeSnippetTypeMember>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeSnippetTypeMemberT() {}
  TCOM_CodeSnippetTypeMemberT(_CodeSnippetTypeMember *intf, bool addRef = false) : TComInterface<_CodeSnippetTypeMember>(intf, addRef) {}
  TCOM_CodeSnippetTypeMemberT(const TCOM_CodeSnippetTypeMemberT& src) : TComInterface<_CodeSnippetTypeMember>(src) {}
  TCOM_CodeSnippetTypeMemberT& operator=(const TCOM_CodeSnippetTypeMemberT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeSnippetTypeMemberT<_CodeSnippetTypeMember> TCOM_CodeSnippetTypeMember;

// *********************************************************************//
// DispIntf:  _CodeSnippetTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {575BF8D0-7A9D-39EB-81F9-AA2BEBA890FA}
// *********************************************************************//
template<class T>
class _CodeSnippetTypeMemberDispT : public TAutoDriver<_CodeSnippetTypeMember>
{
public:
  _CodeSnippetTypeMemberDispT(){}

  _CodeSnippetTypeMemberDispT(_CodeSnippetTypeMember *pintf)
  {
    TAutoDriver<_CodeSnippetTypeMember>::Bind(pintf, false);
  }

  _CodeSnippetTypeMemberDispT(_CodeSnippetTypeMemberPtr pintf)
  {
    TAutoDriver<_CodeSnippetTypeMember>::Bind(pintf, true);
  }

  _CodeSnippetTypeMemberDispT& operator=(_CodeSnippetTypeMember *pintf)
  {
    TAutoDriver<_CodeSnippetTypeMember>::Bind(pintf, false);
    return *this;
  }

  _CodeSnippetTypeMemberDispT& operator=(_CodeSnippetTypeMemberPtr pintf)
  {
    TAutoDriver<_CodeSnippetTypeMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeSnippetTypeMember));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeSnippetTypeMember);
  }


};
typedef _CodeSnippetTypeMemberDispT<_CodeSnippetTypeMember> _CodeSnippetTypeMemberDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeThisReferenceExpression
// Interface: _CodeThisReferenceExpression
// *********************************************************************//
template <class T /* _CodeThisReferenceExpression */ >
class TCOM_CodeThisReferenceExpressionT : public TComInterface<_CodeThisReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeThisReferenceExpressionT() {}
  TCOM_CodeThisReferenceExpressionT(_CodeThisReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeThisReferenceExpression>(intf, addRef) {}
  TCOM_CodeThisReferenceExpressionT(const TCOM_CodeThisReferenceExpressionT& src) : TComInterface<_CodeThisReferenceExpression>(src) {}
  TCOM_CodeThisReferenceExpressionT& operator=(const TCOM_CodeThisReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeThisReferenceExpressionT<_CodeThisReferenceExpression> TCOM_CodeThisReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeThisReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B4A1A6B-8E65-355D-B93A-E6AB753B2401}
// *********************************************************************//
template<class T>
class _CodeThisReferenceExpressionDispT : public TAutoDriver<_CodeThisReferenceExpression>
{
public:
  _CodeThisReferenceExpressionDispT(){}

  _CodeThisReferenceExpressionDispT(_CodeThisReferenceExpression *pintf)
  {
    TAutoDriver<_CodeThisReferenceExpression>::Bind(pintf, false);
  }

  _CodeThisReferenceExpressionDispT(_CodeThisReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeThisReferenceExpression>::Bind(pintf, true);
  }

  _CodeThisReferenceExpressionDispT& operator=(_CodeThisReferenceExpression *pintf)
  {
    TAutoDriver<_CodeThisReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeThisReferenceExpressionDispT& operator=(_CodeThisReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeThisReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeThisReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeThisReferenceExpression);
  }


};
typedef _CodeThisReferenceExpressionDispT<_CodeThisReferenceExpression> _CodeThisReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeThrowExceptionStatement
// Interface: _CodeThrowExceptionStatement
// *********************************************************************//
template <class T /* _CodeThrowExceptionStatement */ >
class TCOM_CodeThrowExceptionStatementT : public TComInterface<_CodeThrowExceptionStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeThrowExceptionStatementT() {}
  TCOM_CodeThrowExceptionStatementT(_CodeThrowExceptionStatement *intf, bool addRef = false) : TComInterface<_CodeThrowExceptionStatement>(intf, addRef) {}
  TCOM_CodeThrowExceptionStatementT(const TCOM_CodeThrowExceptionStatementT& src) : TComInterface<_CodeThrowExceptionStatement>(src) {}
  TCOM_CodeThrowExceptionStatementT& operator=(const TCOM_CodeThrowExceptionStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeThrowExceptionStatementT<_CodeThrowExceptionStatement> TCOM_CodeThrowExceptionStatement;

// *********************************************************************//
// DispIntf:  _CodeThrowExceptionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12350E95-6F4E-30F0-9343-72F1C64380A0}
// *********************************************************************//
template<class T>
class _CodeThrowExceptionStatementDispT : public TAutoDriver<_CodeThrowExceptionStatement>
{
public:
  _CodeThrowExceptionStatementDispT(){}

  _CodeThrowExceptionStatementDispT(_CodeThrowExceptionStatement *pintf)
  {
    TAutoDriver<_CodeThrowExceptionStatement>::Bind(pintf, false);
  }

  _CodeThrowExceptionStatementDispT(_CodeThrowExceptionStatementPtr pintf)
  {
    TAutoDriver<_CodeThrowExceptionStatement>::Bind(pintf, true);
  }

  _CodeThrowExceptionStatementDispT& operator=(_CodeThrowExceptionStatement *pintf)
  {
    TAutoDriver<_CodeThrowExceptionStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeThrowExceptionStatementDispT& operator=(_CodeThrowExceptionStatementPtr pintf)
  {
    TAutoDriver<_CodeThrowExceptionStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeThrowExceptionStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeThrowExceptionStatement);
  }


};
typedef _CodeThrowExceptionStatementDispT<_CodeThrowExceptionStatement> _CodeThrowExceptionStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTryCatchFinallyStatement
// Interface: _CodeTryCatchFinallyStatement
// *********************************************************************//
template <class T /* _CodeTryCatchFinallyStatement */ >
class TCOM_CodeTryCatchFinallyStatementT : public TComInterface<_CodeTryCatchFinallyStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTryCatchFinallyStatementT() {}
  TCOM_CodeTryCatchFinallyStatementT(_CodeTryCatchFinallyStatement *intf, bool addRef = false) : TComInterface<_CodeTryCatchFinallyStatement>(intf, addRef) {}
  TCOM_CodeTryCatchFinallyStatementT(const TCOM_CodeTryCatchFinallyStatementT& src) : TComInterface<_CodeTryCatchFinallyStatement>(src) {}
  TCOM_CodeTryCatchFinallyStatementT& operator=(const TCOM_CodeTryCatchFinallyStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTryCatchFinallyStatementT<_CodeTryCatchFinallyStatement> TCOM_CodeTryCatchFinallyStatement;

// *********************************************************************//
// DispIntf:  _CodeTryCatchFinallyStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD0F76A-29BF-3982-8335-C9B44ABF31C3}
// *********************************************************************//
template<class T>
class _CodeTryCatchFinallyStatementDispT : public TAutoDriver<_CodeTryCatchFinallyStatement>
{
public:
  _CodeTryCatchFinallyStatementDispT(){}

  _CodeTryCatchFinallyStatementDispT(_CodeTryCatchFinallyStatement *pintf)
  {
    TAutoDriver<_CodeTryCatchFinallyStatement>::Bind(pintf, false);
  }

  _CodeTryCatchFinallyStatementDispT(_CodeTryCatchFinallyStatementPtr pintf)
  {
    TAutoDriver<_CodeTryCatchFinallyStatement>::Bind(pintf, true);
  }

  _CodeTryCatchFinallyStatementDispT& operator=(_CodeTryCatchFinallyStatement *pintf)
  {
    TAutoDriver<_CodeTryCatchFinallyStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeTryCatchFinallyStatementDispT& operator=(_CodeTryCatchFinallyStatementPtr pintf)
  {
    TAutoDriver<_CodeTryCatchFinallyStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTryCatchFinallyStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTryCatchFinallyStatement);
  }


};
typedef _CodeTryCatchFinallyStatementDispT<_CodeTryCatchFinallyStatement> _CodeTryCatchFinallyStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeConstructor
// Interface: _CodeTypeConstructor
// *********************************************************************//
template <class T /* _CodeTypeConstructor */ >
class TCOM_CodeTypeConstructorT : public TComInterface<_CodeTypeConstructor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeConstructorT() {}
  TCOM_CodeTypeConstructorT(_CodeTypeConstructor *intf, bool addRef = false) : TComInterface<_CodeTypeConstructor>(intf, addRef) {}
  TCOM_CodeTypeConstructorT(const TCOM_CodeTypeConstructorT& src) : TComInterface<_CodeTypeConstructor>(src) {}
  TCOM_CodeTypeConstructorT& operator=(const TCOM_CodeTypeConstructorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeConstructorT<_CodeTypeConstructor> TCOM_CodeTypeConstructor;

// *********************************************************************//
// DispIntf:  _CodeTypeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {261AD877-0F22-33DE-9A3A-31F5DA424B30}
// *********************************************************************//
template<class T>
class _CodeTypeConstructorDispT : public TAutoDriver<_CodeTypeConstructor>
{
public:
  _CodeTypeConstructorDispT(){}

  _CodeTypeConstructorDispT(_CodeTypeConstructor *pintf)
  {
    TAutoDriver<_CodeTypeConstructor>::Bind(pintf, false);
  }

  _CodeTypeConstructorDispT(_CodeTypeConstructorPtr pintf)
  {
    TAutoDriver<_CodeTypeConstructor>::Bind(pintf, true);
  }

  _CodeTypeConstructorDispT& operator=(_CodeTypeConstructor *pintf)
  {
    TAutoDriver<_CodeTypeConstructor>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeConstructorDispT& operator=(_CodeTypeConstructorPtr pintf)
  {
    TAutoDriver<_CodeTypeConstructor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeConstructor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeConstructor);
  }


};
typedef _CodeTypeConstructorDispT<_CodeTypeConstructor> _CodeTypeConstructorDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDeclaration
// Interface: _CodeTypeDeclaration
// *********************************************************************//
template <class T /* _CodeTypeDeclaration */ >
class TCOM_CodeTypeDeclarationT : public TComInterface<_CodeTypeDeclaration>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeDeclarationT() {}
  TCOM_CodeTypeDeclarationT(_CodeTypeDeclaration *intf, bool addRef = false) : TComInterface<_CodeTypeDeclaration>(intf, addRef) {}
  TCOM_CodeTypeDeclarationT(const TCOM_CodeTypeDeclarationT& src) : TComInterface<_CodeTypeDeclaration>(src) {}
  TCOM_CodeTypeDeclarationT& operator=(const TCOM_CodeTypeDeclarationT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeDeclarationT<_CodeTypeDeclaration> TCOM_CodeTypeDeclaration;

// *********************************************************************//
// DispIntf:  _CodeTypeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7AA363E1-FA53-31EB-BE4A-1EB4838264F3}
// *********************************************************************//
template<class T>
class _CodeTypeDeclarationDispT : public TAutoDriver<_CodeTypeDeclaration>
{
public:
  _CodeTypeDeclarationDispT(){}

  _CodeTypeDeclarationDispT(_CodeTypeDeclaration *pintf)
  {
    TAutoDriver<_CodeTypeDeclaration>::Bind(pintf, false);
  }

  _CodeTypeDeclarationDispT(_CodeTypeDeclarationPtr pintf)
  {
    TAutoDriver<_CodeTypeDeclaration>::Bind(pintf, true);
  }

  _CodeTypeDeclarationDispT& operator=(_CodeTypeDeclaration *pintf)
  {
    TAutoDriver<_CodeTypeDeclaration>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeDeclarationDispT& operator=(_CodeTypeDeclarationPtr pintf)
  {
    TAutoDriver<_CodeTypeDeclaration>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeDeclaration));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeDeclaration);
  }


};
typedef _CodeTypeDeclarationDispT<_CodeTypeDeclaration> _CodeTypeDeclarationDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeMemberCollection
// Interface: _CodeTypeMemberCollection
// *********************************************************************//
template <class T /* _CodeTypeMemberCollection */ >
class TCOM_CodeTypeMemberCollectionT : public TComInterface<_CodeTypeMemberCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeMemberCollectionT() {}
  TCOM_CodeTypeMemberCollectionT(_CodeTypeMemberCollection *intf, bool addRef = false) : TComInterface<_CodeTypeMemberCollection>(intf, addRef) {}
  TCOM_CodeTypeMemberCollectionT(const TCOM_CodeTypeMemberCollectionT& src) : TComInterface<_CodeTypeMemberCollection>(src) {}
  TCOM_CodeTypeMemberCollectionT& operator=(const TCOM_CodeTypeMemberCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeMemberCollectionT<_CodeTypeMemberCollection> TCOM_CodeTypeMemberCollection;

// *********************************************************************//
// DispIntf:  _CodeTypeMemberCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F943231E-6192-33A0-9CA3-D6ED0E4F323D}
// *********************************************************************//
template<class T>
class _CodeTypeMemberCollectionDispT : public TAutoDriver<_CodeTypeMemberCollection>
{
public:
  _CodeTypeMemberCollectionDispT(){}

  _CodeTypeMemberCollectionDispT(_CodeTypeMemberCollection *pintf)
  {
    TAutoDriver<_CodeTypeMemberCollection>::Bind(pintf, false);
  }

  _CodeTypeMemberCollectionDispT(_CodeTypeMemberCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeMemberCollection>::Bind(pintf, true);
  }

  _CodeTypeMemberCollectionDispT& operator=(_CodeTypeMemberCollection *pintf)
  {
    TAutoDriver<_CodeTypeMemberCollection>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeMemberCollectionDispT& operator=(_CodeTypeMemberCollectionPtr pintf)
  {
    TAutoDriver<_CodeTypeMemberCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeMemberCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeMemberCollection);
  }


};
typedef _CodeTypeMemberCollectionDispT<_CodeTypeMemberCollection> _CodeTypeMemberCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDelegate
// Interface: _CodeTypeDelegate
// *********************************************************************//
template <class T /* _CodeTypeDelegate */ >
class TCOM_CodeTypeDelegateT : public TComInterface<_CodeTypeDelegate>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeDelegateT() {}
  TCOM_CodeTypeDelegateT(_CodeTypeDelegate *intf, bool addRef = false) : TComInterface<_CodeTypeDelegate>(intf, addRef) {}
  TCOM_CodeTypeDelegateT(const TCOM_CodeTypeDelegateT& src) : TComInterface<_CodeTypeDelegate>(src) {}
  TCOM_CodeTypeDelegateT& operator=(const TCOM_CodeTypeDelegateT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeDelegateT<_CodeTypeDelegate> TCOM_CodeTypeDelegate;

// *********************************************************************//
// DispIntf:  _CodeTypeDelegate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {455090AB-5C44-3F4F-8EED-CCC90A3112B5}
// *********************************************************************//
template<class T>
class _CodeTypeDelegateDispT : public TAutoDriver<_CodeTypeDelegate>
{
public:
  _CodeTypeDelegateDispT(){}

  _CodeTypeDelegateDispT(_CodeTypeDelegate *pintf)
  {
    TAutoDriver<_CodeTypeDelegate>::Bind(pintf, false);
  }

  _CodeTypeDelegateDispT(_CodeTypeDelegatePtr pintf)
  {
    TAutoDriver<_CodeTypeDelegate>::Bind(pintf, true);
  }

  _CodeTypeDelegateDispT& operator=(_CodeTypeDelegate *pintf)
  {
    TAutoDriver<_CodeTypeDelegate>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeDelegateDispT& operator=(_CodeTypeDelegatePtr pintf)
  {
    TAutoDriver<_CodeTypeDelegate>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeDelegate));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeDelegate);
  }


};
typedef _CodeTypeDelegateDispT<_CodeTypeDelegate> _CodeTypeDelegateDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeOfExpression
// Interface: _CodeTypeOfExpression
// *********************************************************************//
template <class T /* _CodeTypeOfExpression */ >
class TCOM_CodeTypeOfExpressionT : public TComInterface<_CodeTypeOfExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeOfExpressionT() {}
  TCOM_CodeTypeOfExpressionT(_CodeTypeOfExpression *intf, bool addRef = false) : TComInterface<_CodeTypeOfExpression>(intf, addRef) {}
  TCOM_CodeTypeOfExpressionT(const TCOM_CodeTypeOfExpressionT& src) : TComInterface<_CodeTypeOfExpression>(src) {}
  TCOM_CodeTypeOfExpressionT& operator=(const TCOM_CodeTypeOfExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeOfExpressionT<_CodeTypeOfExpression> TCOM_CodeTypeOfExpression;

// *********************************************************************//
// DispIntf:  _CodeTypeOfExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12CBCE8E-75FF-312F-81B9-7FBC6212090B}
// *********************************************************************//
template<class T>
class _CodeTypeOfExpressionDispT : public TAutoDriver<_CodeTypeOfExpression>
{
public:
  _CodeTypeOfExpressionDispT(){}

  _CodeTypeOfExpressionDispT(_CodeTypeOfExpression *pintf)
  {
    TAutoDriver<_CodeTypeOfExpression>::Bind(pintf, false);
  }

  _CodeTypeOfExpressionDispT(_CodeTypeOfExpressionPtr pintf)
  {
    TAutoDriver<_CodeTypeOfExpression>::Bind(pintf, true);
  }

  _CodeTypeOfExpressionDispT& operator=(_CodeTypeOfExpression *pintf)
  {
    TAutoDriver<_CodeTypeOfExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeOfExpressionDispT& operator=(_CodeTypeOfExpressionPtr pintf)
  {
    TAutoDriver<_CodeTypeOfExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeOfExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeOfExpression);
  }


};
typedef _CodeTypeOfExpressionDispT<_CodeTypeOfExpression> _CodeTypeOfExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeParameter
// Interface: _CodeTypeParameter
// *********************************************************************//
template <class T /* _CodeTypeParameter */ >
class TCOM_CodeTypeParameterT : public TComInterface<_CodeTypeParameter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeParameterT() {}
  TCOM_CodeTypeParameterT(_CodeTypeParameter *intf, bool addRef = false) : TComInterface<_CodeTypeParameter>(intf, addRef) {}
  TCOM_CodeTypeParameterT(const TCOM_CodeTypeParameterT& src) : TComInterface<_CodeTypeParameter>(src) {}
  TCOM_CodeTypeParameterT& operator=(const TCOM_CodeTypeParameterT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeParameterT<_CodeTypeParameter> TCOM_CodeTypeParameter;

// *********************************************************************//
// DispIntf:  _CodeTypeParameter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6ED2127-296F-3B31-AEB5-E2101E98D746}
// *********************************************************************//
template<class T>
class _CodeTypeParameterDispT : public TAutoDriver<_CodeTypeParameter>
{
public:
  _CodeTypeParameterDispT(){}

  _CodeTypeParameterDispT(_CodeTypeParameter *pintf)
  {
    TAutoDriver<_CodeTypeParameter>::Bind(pintf, false);
  }

  _CodeTypeParameterDispT(_CodeTypeParameterPtr pintf)
  {
    TAutoDriver<_CodeTypeParameter>::Bind(pintf, true);
  }

  _CodeTypeParameterDispT& operator=(_CodeTypeParameter *pintf)
  {
    TAutoDriver<_CodeTypeParameter>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeParameterDispT& operator=(_CodeTypeParameterPtr pintf)
  {
    TAutoDriver<_CodeTypeParameter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeParameter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeParameter);
  }


};
typedef _CodeTypeParameterDispT<_CodeTypeParameter> _CodeTypeParameterDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReferenceExpression
// Interface: _CodeTypeReferenceExpression
// *********************************************************************//
template <class T /* _CodeTypeReferenceExpression */ >
class TCOM_CodeTypeReferenceExpressionT : public TComInterface<_CodeTypeReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeTypeReferenceExpressionT() {}
  TCOM_CodeTypeReferenceExpressionT(_CodeTypeReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeTypeReferenceExpression>(intf, addRef) {}
  TCOM_CodeTypeReferenceExpressionT(const TCOM_CodeTypeReferenceExpressionT& src) : TComInterface<_CodeTypeReferenceExpression>(src) {}
  TCOM_CodeTypeReferenceExpressionT& operator=(const TCOM_CodeTypeReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeTypeReferenceExpressionT<_CodeTypeReferenceExpression> TCOM_CodeTypeReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeTypeReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {726BB04D-2C4C-3E3D-A01A-31448DB063DD}
// *********************************************************************//
template<class T>
class _CodeTypeReferenceExpressionDispT : public TAutoDriver<_CodeTypeReferenceExpression>
{
public:
  _CodeTypeReferenceExpressionDispT(){}

  _CodeTypeReferenceExpressionDispT(_CodeTypeReferenceExpression *pintf)
  {
    TAutoDriver<_CodeTypeReferenceExpression>::Bind(pintf, false);
  }

  _CodeTypeReferenceExpressionDispT(_CodeTypeReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeTypeReferenceExpression>::Bind(pintf, true);
  }

  _CodeTypeReferenceExpressionDispT& operator=(_CodeTypeReferenceExpression *pintf)
  {
    TAutoDriver<_CodeTypeReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeTypeReferenceExpressionDispT& operator=(_CodeTypeReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeTypeReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeTypeReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeTypeReferenceExpression);
  }


};
typedef _CodeTypeReferenceExpressionDispT<_CodeTypeReferenceExpression> _CodeTypeReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeVariableDeclarationStatement
// Interface: _CodeVariableDeclarationStatement
// *********************************************************************//
template <class T /* _CodeVariableDeclarationStatement */ >
class TCOM_CodeVariableDeclarationStatementT : public TComInterface<_CodeVariableDeclarationStatement>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeVariableDeclarationStatementT() {}
  TCOM_CodeVariableDeclarationStatementT(_CodeVariableDeclarationStatement *intf, bool addRef = false) : TComInterface<_CodeVariableDeclarationStatement>(intf, addRef) {}
  TCOM_CodeVariableDeclarationStatementT(const TCOM_CodeVariableDeclarationStatementT& src) : TComInterface<_CodeVariableDeclarationStatement>(src) {}
  TCOM_CodeVariableDeclarationStatementT& operator=(const TCOM_CodeVariableDeclarationStatementT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeVariableDeclarationStatementT<_CodeVariableDeclarationStatement> TCOM_CodeVariableDeclarationStatement;

// *********************************************************************//
// DispIntf:  _CodeVariableDeclarationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4192A87C-5C57-3879-8624-AF5CA2ED9EB2}
// *********************************************************************//
template<class T>
class _CodeVariableDeclarationStatementDispT : public TAutoDriver<_CodeVariableDeclarationStatement>
{
public:
  _CodeVariableDeclarationStatementDispT(){}

  _CodeVariableDeclarationStatementDispT(_CodeVariableDeclarationStatement *pintf)
  {
    TAutoDriver<_CodeVariableDeclarationStatement>::Bind(pintf, false);
  }

  _CodeVariableDeclarationStatementDispT(_CodeVariableDeclarationStatementPtr pintf)
  {
    TAutoDriver<_CodeVariableDeclarationStatement>::Bind(pintf, true);
  }

  _CodeVariableDeclarationStatementDispT& operator=(_CodeVariableDeclarationStatement *pintf)
  {
    TAutoDriver<_CodeVariableDeclarationStatement>::Bind(pintf, false);
    return *this;
  }

  _CodeVariableDeclarationStatementDispT& operator=(_CodeVariableDeclarationStatementPtr pintf)
  {
    TAutoDriver<_CodeVariableDeclarationStatement>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeVariableDeclarationStatement));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeVariableDeclarationStatement);
  }


};
typedef _CodeVariableDeclarationStatementDispT<_CodeVariableDeclarationStatement> _CodeVariableDeclarationStatementDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeVariableReferenceExpression
// Interface: _CodeVariableReferenceExpression
// *********************************************************************//
template <class T /* _CodeVariableReferenceExpression */ >
class TCOM_CodeVariableReferenceExpressionT : public TComInterface<_CodeVariableReferenceExpression>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeVariableReferenceExpressionT() {}
  TCOM_CodeVariableReferenceExpressionT(_CodeVariableReferenceExpression *intf, bool addRef = false) : TComInterface<_CodeVariableReferenceExpression>(intf, addRef) {}
  TCOM_CodeVariableReferenceExpressionT(const TCOM_CodeVariableReferenceExpressionT& src) : TComInterface<_CodeVariableReferenceExpression>(src) {}
  TCOM_CodeVariableReferenceExpressionT& operator=(const TCOM_CodeVariableReferenceExpressionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CodeVariableReferenceExpressionT<_CodeVariableReferenceExpression> TCOM_CodeVariableReferenceExpression;

// *********************************************************************//
// DispIntf:  _CodeVariableReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54B54936-A71C-3A45-B982-2C484E7BCF86}
// *********************************************************************//
template<class T>
class _CodeVariableReferenceExpressionDispT : public TAutoDriver<_CodeVariableReferenceExpression>
{
public:
  _CodeVariableReferenceExpressionDispT(){}

  _CodeVariableReferenceExpressionDispT(_CodeVariableReferenceExpression *pintf)
  {
    TAutoDriver<_CodeVariableReferenceExpression>::Bind(pintf, false);
  }

  _CodeVariableReferenceExpressionDispT(_CodeVariableReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeVariableReferenceExpression>::Bind(pintf, true);
  }

  _CodeVariableReferenceExpressionDispT& operator=(_CodeVariableReferenceExpression *pintf)
  {
    TAutoDriver<_CodeVariableReferenceExpression>::Bind(pintf, false);
    return *this;
  }

  _CodeVariableReferenceExpressionDispT& operator=(_CodeVariableReferenceExpressionPtr pintf)
  {
    TAutoDriver<_CodeVariableReferenceExpression>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeVariableReferenceExpression));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeVariableReferenceExpression);
  }


};
typedef _CodeVariableReferenceExpressionDispT<_CodeVariableReferenceExpression> _CodeVariableReferenceExpressionDisp;

// *********************************************************************//
// SmartIntf: TCOM_Component
// Interface: _Component
// *********************************************************************//
template <class T /* _Component */ >
class TCOM_ComponentT : public TComInterface<_Component>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentT() {}
  TCOM_ComponentT(_Component *intf, bool addRef = false) : TComInterface<_Component>(intf, addRef) {}
  TCOM_ComponentT(const TCOM_ComponentT& src) : TComInterface<_Component>(src) {}
  TCOM_ComponentT& operator=(const TCOM_ComponentT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentT<_Component> TCOM_Component;

// *********************************************************************//
// DispIntf:  _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {06565C0F-C465-37DE-896F-9864BC0BFC96}
// *********************************************************************//
template<class T>
class _ComponentDispT : public TAutoDriver<_Component>
{
public:
  _ComponentDispT(){}

  _ComponentDispT(_Component *pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, false);
  }

  _ComponentDispT(_ComponentPtr pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, true);
  }

  _ComponentDispT& operator=(_Component *pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, false);
    return *this;
  }

  _ComponentDispT& operator=(_ComponentPtr pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_component));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_component);
  }


};
typedef _ComponentDispT<_Component> _ComponentDisp;

// *********************************************************************//
// SmartIntf: TCOM_AttributeCollection
// Interface: _AttributeCollection
// *********************************************************************//
template <class T /* _AttributeCollection */ >
class TCOM_AttributeCollectionT : public TComInterface<_AttributeCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_AttributeCollectionT() {}
  TCOM_AttributeCollectionT(_AttributeCollection *intf, bool addRef = false) : TComInterface<_AttributeCollection>(intf, addRef) {}
  TCOM_AttributeCollectionT(const TCOM_AttributeCollectionT& src) : TComInterface<_AttributeCollection>(src) {}
  TCOM_AttributeCollectionT& operator=(const TCOM_AttributeCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_AttributeCollectionT<_AttributeCollection> TCOM_AttributeCollection;

// *********************************************************************//
// DispIntf:  _AttributeCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F971E04-B06A-3DD0-B6F5-622826693454}
// *********************************************************************//
template<class T>
class _AttributeCollectionDispT : public TAutoDriver<_AttributeCollection>
{
public:
  _AttributeCollectionDispT(){}

  _AttributeCollectionDispT(_AttributeCollection *pintf)
  {
    TAutoDriver<_AttributeCollection>::Bind(pintf, false);
  }

  _AttributeCollectionDispT(_AttributeCollectionPtr pintf)
  {
    TAutoDriver<_AttributeCollection>::Bind(pintf, true);
  }

  _AttributeCollectionDispT& operator=(_AttributeCollection *pintf)
  {
    TAutoDriver<_AttributeCollection>::Bind(pintf, false);
    return *this;
  }

  _AttributeCollectionDispT& operator=(_AttributeCollectionPtr pintf)
  {
    TAutoDriver<_AttributeCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AttributeCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AttributeCollection);
  }


};
typedef _AttributeCollectionDispT<_AttributeCollection> _AttributeCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_PropertyDescriptor
// Interface: _PropertyDescriptor
// *********************************************************************//
template <class T /* _PropertyDescriptor */ >
class TCOM_PropertyDescriptorT : public TComInterface<_PropertyDescriptor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PropertyDescriptorT() {}
  TCOM_PropertyDescriptorT(_PropertyDescriptor *intf, bool addRef = false) : TComInterface<_PropertyDescriptor>(intf, addRef) {}
  TCOM_PropertyDescriptorT(const TCOM_PropertyDescriptorT& src) : TComInterface<_PropertyDescriptor>(src) {}
  TCOM_PropertyDescriptorT& operator=(const TCOM_PropertyDescriptorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PropertyDescriptorT<_PropertyDescriptor> TCOM_PropertyDescriptor;

// *********************************************************************//
// DispIntf:  _PropertyDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE5060F8-212F-3A4F-8FA8-DB2E14588C49}
// *********************************************************************//
template<class T>
class _PropertyDescriptorDispT : public TAutoDriver<_PropertyDescriptor>
{
public:
  _PropertyDescriptorDispT(){}

  _PropertyDescriptorDispT(_PropertyDescriptor *pintf)
  {
    TAutoDriver<_PropertyDescriptor>::Bind(pintf, false);
  }

  _PropertyDescriptorDispT(_PropertyDescriptorPtr pintf)
  {
    TAutoDriver<_PropertyDescriptor>::Bind(pintf, true);
  }

  _PropertyDescriptorDispT& operator=(_PropertyDescriptor *pintf)
  {
    TAutoDriver<_PropertyDescriptor>::Bind(pintf, false);
    return *this;
  }

  _PropertyDescriptorDispT& operator=(_PropertyDescriptorPtr pintf)
  {
    TAutoDriver<_PropertyDescriptor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PropertyDescriptor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PropertyDescriptor);
  }


};
typedef _PropertyDescriptorDispT<_PropertyDescriptor> _PropertyDescriptorDisp;

typedef TComInterface<IComponent>  TCOMIComponent;

// *********************************************************************//
// DispIntf:  IComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B86E59F2-F1E2-389D-B5F1-C55307C8106E}
// *********************************************************************//
template<class T>
class IComponentDispT : public TAutoDriver<IComponent>
{
public:
  IComponentDispT(){}

  IComponentDispT(IComponent *pintf)
  {
    TAutoDriver<IComponent>::Bind(pintf, false);
  }

  IComponentDispT(IComponentPtr pintf)
  {
    TAutoDriver<IComponent>::Bind(pintf, true);
  }

  IComponentDispT& operator=(IComponent *pintf)
  {
    TAutoDriver<IComponent>::Bind(pintf, false);
    return *this;
  }

  IComponentDispT& operator=(IComponentPtr pintf)
  {
    TAutoDriver<IComponent>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Site(System_tlb::ISite** pRetVal/*[out,retval]*/);
  System_tlb::ISitePtr __fastcall get_Site(void);
  HRESULT         __fastcall _set_Site(System_tlb::ISite* pRetVal/*[in]*/);
  HRESULT         __fastcall add_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/);

  __property   System_tlb::ISitePtr Site = {read = get_Site};
};
typedef IComponentDispT<IComponent> IComponentDisp;

typedef TComInterface<ISite>  TCOMISite;

// *********************************************************************//
// DispIntf:  ISite
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C4E1006A-9D98-3E96-A07E-921725135C28}
// *********************************************************************//
template<class T>
class ISiteDispT : public TAutoDriver<ISite>
{
public:
  ISiteDispT(){}

  ISiteDispT(ISite *pintf)
  {
    TAutoDriver<ISite>::Bind(pintf, false);
  }

  ISiteDispT(ISitePtr pintf)
  {
    TAutoDriver<ISite>::Bind(pintf, true);
  }

  ISiteDispT& operator=(ISite *pintf)
  {
    TAutoDriver<ISite>::Bind(pintf, false);
    return *this;
  }

  ISiteDispT& operator=(ISitePtr pintf)
  {
    TAutoDriver<ISite>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/);
  System_tlb::IComponentPtr __fastcall get_component(void);
  HRESULT         __fastcall get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/);
  System_tlb::IContainerPtr __fastcall get_Container(void);
  HRESULT         __fastcall get_DesignMode(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DesignMode(void);
  HRESULT         __fastcall get_name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall set_name(BSTR pRetVal/*[in]*/);

  __property   System_tlb::IComponentPtr component = {read = get_component};
  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   VARIANT_BOOL    DesignMode = {read = get_DesignMode};
  __property   BSTR            name = {read = get_name, write = set_name};
};
typedef ISiteDispT<ISite> ISiteDisp;

typedef TComInterface<IContainer>  TCOMIContainer;

// *********************************************************************//
// DispIntf:  IContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61D9C50C-4AAD-3539-AF82-4F36C19D77C8}
// *********************************************************************//
template<class T>
class IContainerDispT : public TAutoDriver<IContainer>
{
public:
  IContainerDispT(){}

  IContainerDispT(IContainer *pintf)
  {
    TAutoDriver<IContainer>::Bind(pintf, false);
  }

  IContainerDispT(IContainerPtr pintf)
  {
    TAutoDriver<IContainer>::Bind(pintf, true);
  }

  IContainerDispT& operator=(IContainer *pintf)
  {
    TAutoDriver<IContainer>::Bind(pintf, false);
    return *this;
  }

  IContainerDispT& operator=(IContainerPtr pintf)
  {
    TAutoDriver<IContainer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Add(System_tlb::IComponent* component/*[in]*/);
  HRESULT         __fastcall Add_2(System_tlb::IComponent* component/*[in]*/, BSTR name/*[in]*/);
  HRESULT         __fastcall get_Components(System_tlb::_ComponentCollection** pRetVal/*[out,retval]*/);
  System_tlb::_ComponentCollectionPtr __fastcall get_Components(void);
  HRESULT         __fastcall Remove(System_tlb::IComponent* component/*[in]*/);

  __property   System_tlb::_ComponentCollectionPtr Components = {read = get_Components};
};
typedef IContainerDispT<IContainer> IContainerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentCollection
// Interface: _ComponentCollection
// *********************************************************************//
template <class T /* _ComponentCollection */ >
class TCOM_ComponentCollectionT : public TComInterface<_ComponentCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentCollectionT() {}
  TCOM_ComponentCollectionT(_ComponentCollection *intf, bool addRef = false) : TComInterface<_ComponentCollection>(intf, addRef) {}
  TCOM_ComponentCollectionT(const TCOM_ComponentCollectionT& src) : TComInterface<_ComponentCollection>(src) {}
  TCOM_ComponentCollectionT& operator=(const TCOM_ComponentCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentCollectionT<_ComponentCollection> TCOM_ComponentCollection;

// *********************************************************************//
// DispIntf:  _ComponentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42F00C62-F454-3A38-AF9E-35D4E2BDFDAC}
// *********************************************************************//
template<class T>
class _ComponentCollectionDispT : public TAutoDriver<_ComponentCollection>
{
public:
  _ComponentCollectionDispT(){}

  _ComponentCollectionDispT(_ComponentCollection *pintf)
  {
    TAutoDriver<_ComponentCollection>::Bind(pintf, false);
  }

  _ComponentCollectionDispT(_ComponentCollectionPtr pintf)
  {
    TAutoDriver<_ComponentCollection>::Bind(pintf, true);
  }

  _ComponentCollectionDispT& operator=(_ComponentCollection *pintf)
  {
    TAutoDriver<_ComponentCollection>::Bind(pintf, false);
    return *this;
  }

  _ComponentCollectionDispT& operator=(_ComponentCollectionPtr pintf)
  {
    TAutoDriver<_ComponentCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentCollection);
  }


};
typedef _ComponentCollectionDispT<_ComponentCollection> _ComponentCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_EventDescriptor
// Interface: _EventDescriptor
// *********************************************************************//
template <class T /* _EventDescriptor */ >
class TCOM_EventDescriptorT : public TComInterface<_EventDescriptor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_EventDescriptorT() {}
  TCOM_EventDescriptorT(_EventDescriptor *intf, bool addRef = false) : TComInterface<_EventDescriptor>(intf, addRef) {}
  TCOM_EventDescriptorT(const TCOM_EventDescriptorT& src) : TComInterface<_EventDescriptor>(src) {}
  TCOM_EventDescriptorT& operator=(const TCOM_EventDescriptorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_EventDescriptorT<_EventDescriptor> TCOM_EventDescriptor;

// *********************************************************************//
// DispIntf:  _EventDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95B6A563-4A39-37A2-91D7-04B8ECDD1B66}
// *********************************************************************//
template<class T>
class _EventDescriptorDispT : public TAutoDriver<_EventDescriptor>
{
public:
  _EventDescriptorDispT(){}

  _EventDescriptorDispT(_EventDescriptor *pintf)
  {
    TAutoDriver<_EventDescriptor>::Bind(pintf, false);
  }

  _EventDescriptorDispT(_EventDescriptorPtr pintf)
  {
    TAutoDriver<_EventDescriptor>::Bind(pintf, true);
  }

  _EventDescriptorDispT& operator=(_EventDescriptor *pintf)
  {
    TAutoDriver<_EventDescriptor>::Bind(pintf, false);
    return *this;
  }

  _EventDescriptorDispT& operator=(_EventDescriptorPtr pintf)
  {
    TAutoDriver<_EventDescriptor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventDescriptor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventDescriptor);
  }


};
typedef _EventDescriptorDispT<_EventDescriptor> _EventDescriptorDisp;

// *********************************************************************//
// SmartIntf: TCOM_EventDescriptorCollection
// Interface: _EventDescriptorCollection
// *********************************************************************//
template <class T /* _EventDescriptorCollection */ >
class TCOM_EventDescriptorCollectionT : public TComInterface<_EventDescriptorCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_EventDescriptorCollectionT() {}
  TCOM_EventDescriptorCollectionT(_EventDescriptorCollection *intf, bool addRef = false) : TComInterface<_EventDescriptorCollection>(intf, addRef) {}
  TCOM_EventDescriptorCollectionT(const TCOM_EventDescriptorCollectionT& src) : TComInterface<_EventDescriptorCollection>(src) {}
  TCOM_EventDescriptorCollectionT& operator=(const TCOM_EventDescriptorCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_EventDescriptorCollectionT<_EventDescriptorCollection> TCOM_EventDescriptorCollection;

// *********************************************************************//
// DispIntf:  _EventDescriptorCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C933253-83F2-35B6-961A-0780FF1BAF7C}
// *********************************************************************//
template<class T>
class _EventDescriptorCollectionDispT : public TAutoDriver<_EventDescriptorCollection>
{
public:
  _EventDescriptorCollectionDispT(){}

  _EventDescriptorCollectionDispT(_EventDescriptorCollection *pintf)
  {
    TAutoDriver<_EventDescriptorCollection>::Bind(pintf, false);
  }

  _EventDescriptorCollectionDispT(_EventDescriptorCollectionPtr pintf)
  {
    TAutoDriver<_EventDescriptorCollection>::Bind(pintf, true);
  }

  _EventDescriptorCollectionDispT& operator=(_EventDescriptorCollection *pintf)
  {
    TAutoDriver<_EventDescriptorCollection>::Bind(pintf, false);
    return *this;
  }

  _EventDescriptorCollectionDispT& operator=(_EventDescriptorCollectionPtr pintf)
  {
    TAutoDriver<_EventDescriptorCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventDescriptorCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventDescriptorCollection);
  }


};
typedef _EventDescriptorCollectionDispT<_EventDescriptorCollection> _EventDescriptorCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_MemberDescriptor
// Interface: _MemberDescriptor
// *********************************************************************//
template <class T /* _MemberDescriptor */ >
class TCOM_MemberDescriptorT : public TComInterface<_MemberDescriptor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MemberDescriptorT() {}
  TCOM_MemberDescriptorT(_MemberDescriptor *intf, bool addRef = false) : TComInterface<_MemberDescriptor>(intf, addRef) {}
  TCOM_MemberDescriptorT(const TCOM_MemberDescriptorT& src) : TComInterface<_MemberDescriptor>(src) {}
  TCOM_MemberDescriptorT& operator=(const TCOM_MemberDescriptorT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MemberDescriptorT<_MemberDescriptor> TCOM_MemberDescriptor;

// *********************************************************************//
// DispIntf:  _MemberDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F55EFA91-812E-3C6E-998F-3598E93FB8A7}
// *********************************************************************//
template<class T>
class _MemberDescriptorDispT : public TAutoDriver<_MemberDescriptor>
{
public:
  _MemberDescriptorDispT(){}

  _MemberDescriptorDispT(_MemberDescriptor *pintf)
  {
    TAutoDriver<_MemberDescriptor>::Bind(pintf, false);
  }

  _MemberDescriptorDispT(_MemberDescriptorPtr pintf)
  {
    TAutoDriver<_MemberDescriptor>::Bind(pintf, true);
  }

  _MemberDescriptorDispT& operator=(_MemberDescriptor *pintf)
  {
    TAutoDriver<_MemberDescriptor>::Bind(pintf, false);
    return *this;
  }

  _MemberDescriptorDispT& operator=(_MemberDescriptorPtr pintf)
  {
    TAutoDriver<_MemberDescriptor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MemberDescriptor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MemberDescriptor);
  }


};
typedef _MemberDescriptorDispT<_MemberDescriptor> _MemberDescriptorDisp;

// *********************************************************************//
// SmartIntf: TCOM_MarshalByValueComponent
// Interface: _MarshalByValueComponent
// *********************************************************************//
template <class T /* _MarshalByValueComponent */ >
class TCOM_MarshalByValueComponentT : public TComInterface<_MarshalByValueComponent>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MarshalByValueComponentT() {}
  TCOM_MarshalByValueComponentT(_MarshalByValueComponent *intf, bool addRef = false) : TComInterface<_MarshalByValueComponent>(intf, addRef) {}
  TCOM_MarshalByValueComponentT(const TCOM_MarshalByValueComponentT& src) : TComInterface<_MarshalByValueComponent>(src) {}
  TCOM_MarshalByValueComponentT& operator=(const TCOM_MarshalByValueComponentT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MarshalByValueComponentT<_MarshalByValueComponent> TCOM_MarshalByValueComponent;

// *********************************************************************//
// DispIntf:  _MarshalByValueComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35F38044-2017-3E05-BA83-1B87CC0D49C7}
// *********************************************************************//
template<class T>
class _MarshalByValueComponentDispT : public TAutoDriver<_MarshalByValueComponent>
{
public:
  _MarshalByValueComponentDispT(){}

  _MarshalByValueComponentDispT(_MarshalByValueComponent *pintf)
  {
    TAutoDriver<_MarshalByValueComponent>::Bind(pintf, false);
  }

  _MarshalByValueComponentDispT(_MarshalByValueComponentPtr pintf)
  {
    TAutoDriver<_MarshalByValueComponent>::Bind(pintf, true);
  }

  _MarshalByValueComponentDispT& operator=(_MarshalByValueComponent *pintf)
  {
    TAutoDriver<_MarshalByValueComponent>::Bind(pintf, false);
    return *this;
  }

  _MarshalByValueComponentDispT& operator=(_MarshalByValueComponentPtr pintf)
  {
    TAutoDriver<_MarshalByValueComponent>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MarshalByValueComponent));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MarshalByValueComponent);
  }


};
typedef _MarshalByValueComponentDispT<_MarshalByValueComponent> _MarshalByValueComponentDisp;

typedef TComInterface<IDesigner>  TCOMIDesigner;

// *********************************************************************//
// DispIntf:  IDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}
// *********************************************************************//
template<class T>
class IDesignerDispT : public TAutoDriver<IDesigner>
{
public:
  IDesignerDispT(){}

  IDesignerDispT(IDesigner *pintf)
  {
    TAutoDriver<IDesigner>::Bind(pintf, false);
  }

  IDesignerDispT(IDesignerPtr pintf)
  {
    TAutoDriver<IDesigner>::Bind(pintf, true);
  }

  IDesignerDispT& operator=(IDesigner *pintf)
  {
    TAutoDriver<IDesigner>::Bind(pintf, false);
    return *this;
  }

  IDesignerDispT& operator=(IDesignerPtr pintf)
  {
    TAutoDriver<IDesigner>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/);
  System_tlb::IComponentPtr __fastcall get_component(void);
  HRESULT         __fastcall get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/);
  System_tlb::_DesignerVerbCollectionPtr __fastcall get_Verbs(void);
  HRESULT         __fastcall DoDefaultAction();
  HRESULT         __fastcall Initialize(System_tlb::IComponent* component/*[in]*/);

  __property   System_tlb::IComponentPtr component = {read = get_component};
  __property   System_tlb::_DesignerVerbCollectionPtr Verbs = {read = get_Verbs};
};
typedef IDesignerDispT<IDesigner> IDesignerDisp;

typedef TComInterface<IDesignerHost>  TCOMIDesignerHost;

// *********************************************************************//
// DispIntf:  IDesignerHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}
// *********************************************************************//
template<class T>
class IDesignerHostDispT : public TAutoDriver<IDesignerHost>
{
public:
  IDesignerHostDispT(){}

  IDesignerHostDispT(IDesignerHost *pintf)
  {
    TAutoDriver<IDesignerHost>::Bind(pintf, false);
  }

  IDesignerHostDispT(IDesignerHostPtr pintf)
  {
    TAutoDriver<IDesignerHost>::Bind(pintf, true);
  }

  IDesignerHostDispT& operator=(IDesignerHost *pintf)
  {
    TAutoDriver<IDesignerHost>::Bind(pintf, false);
    return *this;
  }

  IDesignerHostDispT& operator=(IDesignerHostPtr pintf)
  {
    TAutoDriver<IDesignerHost>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Loading(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Loading(void);
  HRESULT         __fastcall get_InTransaction(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InTransaction(void);
  HRESULT         __fastcall get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/);
  System_tlb::IContainerPtr __fastcall get_Container(void);
  HRESULT         __fastcall get_RootComponent(System_tlb::IComponent** pRetVal/*[out,retval]*/);
  System_tlb::IComponentPtr __fastcall get_RootComponent(void);
  HRESULT         __fastcall get_RootComponentClassName(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_RootComponentClassName(void);
  HRESULT         __fastcall get_TransactionDescription(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_TransactionDescription(void);
  HRESULT         __fastcall add_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall add_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall add_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall add_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall add_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall Activate();
  HRESULT         __fastcall CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                             System_tlb::IComponent** pRetVal/*[out,retval]*/);
  System_tlb::IComponent* __fastcall CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/);
  HRESULT         __fastcall CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                               BSTR name/*[in]*/, 
                                               System_tlb::IComponent** pRetVal/*[out,retval]*/);
  System_tlb::IComponent* __fastcall CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                                       BSTR name/*[in]*/);
  HRESULT         __fastcall CreateTransaction(LPUNKNOWN* pRetVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall CreateTransaction(void);
  HRESULT         __fastcall CreateTransaction_2(BSTR description/*[in]*/, 
                                                 LPUNKNOWN* pRetVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall CreateTransaction_2(BSTR description/*[in]*/);
  HRESULT         __fastcall DestroyComponent(System_tlb::IComponent* component/*[in]*/);
  HRESULT         __fastcall GetDesigner(System_tlb::IComponent* component/*[in]*/, 
                                         System_tlb::IDesigner** pRetVal/*[out,retval]*/);
  System_tlb::IDesigner* __fastcall GetDesigner(System_tlb::IComponent* component/*[in]*/);
  HRESULT         __fastcall GetType(BSTR typeName/*[in]*/, 
                                     Mscorlib_tlb::_Type** pRetVal/*[out,retval]*/);
  Mscorlib_tlb::_Type* __fastcall GetType(BSTR typeName/*[in]*/);

  __property   VARIANT_BOOL    Loading = {read = get_Loading};
  __property   VARIANT_BOOL    InTransaction = {read = get_InTransaction};
  __property   System_tlb::IContainerPtr Container = {read = get_Container};
  __property   System_tlb::IComponentPtr RootComponent = {read = get_RootComponent};
  __property   BSTR            RootComponentClassName = {read = get_RootComponentClassName};
  __property   BSTR            TransactionDescription = {read = get_TransactionDescription};
};
typedef IDesignerHostDispT<IDesignerHost> IDesignerHostDisp;

// *********************************************************************//
// SmartIntf: TCOM_CommandID
// Interface: _CommandID
// *********************************************************************//
template <class T /* _CommandID */ >
class TCOM_CommandIDT : public TComInterface<_CommandID>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandIDT() {}
  TCOM_CommandIDT(_CommandID *intf, bool addRef = false) : TComInterface<_CommandID>(intf, addRef) {}
  TCOM_CommandIDT(const TCOM_CommandIDT& src) : TComInterface<_CommandID>(src) {}
  TCOM_CommandIDT& operator=(const TCOM_CommandIDT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CommandIDT<_CommandID> TCOM_CommandID;

// *********************************************************************//
// DispIntf:  _CommandID
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC50598B-2406-33D2-BA9A-CFBEA52BC05A}
// *********************************************************************//
template<class T>
class _CommandIDDispT : public TAutoDriver<_CommandID>
{
public:
  _CommandIDDispT(){}

  _CommandIDDispT(_CommandID *pintf)
  {
    TAutoDriver<_CommandID>::Bind(pintf, false);
  }

  _CommandIDDispT(_CommandIDPtr pintf)
  {
    TAutoDriver<_CommandID>::Bind(pintf, true);
  }

  _CommandIDDispT& operator=(_CommandID *pintf)
  {
    TAutoDriver<_CommandID>::Bind(pintf, false);
    return *this;
  }

  _CommandIDDispT& operator=(_CommandIDPtr pintf)
  {
    TAutoDriver<_CommandID>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommandID));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommandID);
  }


};
typedef _CommandIDDispT<_CommandID> _CommandIDDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentChangedEventArgs
// Interface: _ComponentChangedEventArgs
// *********************************************************************//
template <class T /* _ComponentChangedEventArgs */ >
class TCOM_ComponentChangedEventArgsT : public TComInterface<_ComponentChangedEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentChangedEventArgsT() {}
  TCOM_ComponentChangedEventArgsT(_ComponentChangedEventArgs *intf, bool addRef = false) : TComInterface<_ComponentChangedEventArgs>(intf, addRef) {}
  TCOM_ComponentChangedEventArgsT(const TCOM_ComponentChangedEventArgsT& src) : TComInterface<_ComponentChangedEventArgs>(src) {}
  TCOM_ComponentChangedEventArgsT& operator=(const TCOM_ComponentChangedEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentChangedEventArgsT<_ComponentChangedEventArgs> TCOM_ComponentChangedEventArgs;

// *********************************************************************//
// DispIntf:  _ComponentChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A8FEF1C6-D434-3686-A4DE-B68E8EABB509}
// *********************************************************************//
template<class T>
class _ComponentChangedEventArgsDispT : public TAutoDriver<_ComponentChangedEventArgs>
{
public:
  _ComponentChangedEventArgsDispT(){}

  _ComponentChangedEventArgsDispT(_ComponentChangedEventArgs *pintf)
  {
    TAutoDriver<_ComponentChangedEventArgs>::Bind(pintf, false);
  }

  _ComponentChangedEventArgsDispT(_ComponentChangedEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentChangedEventArgs>::Bind(pintf, true);
  }

  _ComponentChangedEventArgsDispT& operator=(_ComponentChangedEventArgs *pintf)
  {
    TAutoDriver<_ComponentChangedEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ComponentChangedEventArgsDispT& operator=(_ComponentChangedEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentChangedEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentChangedEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentChangedEventArgs);
  }


};
typedef _ComponentChangedEventArgsDispT<_ComponentChangedEventArgs> _ComponentChangedEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentChangedEventHandler
// Interface: _ComponentChangedEventHandler
// *********************************************************************//
template <class T /* _ComponentChangedEventHandler */ >
class TCOM_ComponentChangedEventHandlerT : public TComInterface<_ComponentChangedEventHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentChangedEventHandlerT() {}
  TCOM_ComponentChangedEventHandlerT(_ComponentChangedEventHandler *intf, bool addRef = false) : TComInterface<_ComponentChangedEventHandler>(intf, addRef) {}
  TCOM_ComponentChangedEventHandlerT(const TCOM_ComponentChangedEventHandlerT& src) : TComInterface<_ComponentChangedEventHandler>(src) {}
  TCOM_ComponentChangedEventHandlerT& operator=(const TCOM_ComponentChangedEventHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentChangedEventHandlerT<_ComponentChangedEventHandler> TCOM_ComponentChangedEventHandler;

// *********************************************************************//
// DispIntf:  _ComponentChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0451C390-1F90-341D-9278-B9FF2636D67D}
// *********************************************************************//
template<class T>
class _ComponentChangedEventHandlerDispT : public TAutoDriver<_ComponentChangedEventHandler>
{
public:
  _ComponentChangedEventHandlerDispT(){}

  _ComponentChangedEventHandlerDispT(_ComponentChangedEventHandler *pintf)
  {
    TAutoDriver<_ComponentChangedEventHandler>::Bind(pintf, false);
  }

  _ComponentChangedEventHandlerDispT(_ComponentChangedEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentChangedEventHandler>::Bind(pintf, true);
  }

  _ComponentChangedEventHandlerDispT& operator=(_ComponentChangedEventHandler *pintf)
  {
    TAutoDriver<_ComponentChangedEventHandler>::Bind(pintf, false);
    return *this;
  }

  _ComponentChangedEventHandlerDispT& operator=(_ComponentChangedEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentChangedEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentChangedEventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentChangedEventHandler);
  }


};
typedef _ComponentChangedEventHandlerDispT<_ComponentChangedEventHandler> _ComponentChangedEventHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentChangingEventArgs
// Interface: _ComponentChangingEventArgs
// *********************************************************************//
template <class T /* _ComponentChangingEventArgs */ >
class TCOM_ComponentChangingEventArgsT : public TComInterface<_ComponentChangingEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentChangingEventArgsT() {}
  TCOM_ComponentChangingEventArgsT(_ComponentChangingEventArgs *intf, bool addRef = false) : TComInterface<_ComponentChangingEventArgs>(intf, addRef) {}
  TCOM_ComponentChangingEventArgsT(const TCOM_ComponentChangingEventArgsT& src) : TComInterface<_ComponentChangingEventArgs>(src) {}
  TCOM_ComponentChangingEventArgsT& operator=(const TCOM_ComponentChangingEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentChangingEventArgsT<_ComponentChangingEventArgs> TCOM_ComponentChangingEventArgs;

// *********************************************************************//
// DispIntf:  _ComponentChangingEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B78CBAA3-37DF-31C9-ABD2-CDCB1A7FBA9F}
// *********************************************************************//
template<class T>
class _ComponentChangingEventArgsDispT : public TAutoDriver<_ComponentChangingEventArgs>
{
public:
  _ComponentChangingEventArgsDispT(){}

  _ComponentChangingEventArgsDispT(_ComponentChangingEventArgs *pintf)
  {
    TAutoDriver<_ComponentChangingEventArgs>::Bind(pintf, false);
  }

  _ComponentChangingEventArgsDispT(_ComponentChangingEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentChangingEventArgs>::Bind(pintf, true);
  }

  _ComponentChangingEventArgsDispT& operator=(_ComponentChangingEventArgs *pintf)
  {
    TAutoDriver<_ComponentChangingEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ComponentChangingEventArgsDispT& operator=(_ComponentChangingEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentChangingEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentChangingEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentChangingEventArgs);
  }


};
typedef _ComponentChangingEventArgsDispT<_ComponentChangingEventArgs> _ComponentChangingEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentChangingEventHandler
// Interface: _ComponentChangingEventHandler
// *********************************************************************//
template <class T /* _ComponentChangingEventHandler */ >
class TCOM_ComponentChangingEventHandlerT : public TComInterface<_ComponentChangingEventHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentChangingEventHandlerT() {}
  TCOM_ComponentChangingEventHandlerT(_ComponentChangingEventHandler *intf, bool addRef = false) : TComInterface<_ComponentChangingEventHandler>(intf, addRef) {}
  TCOM_ComponentChangingEventHandlerT(const TCOM_ComponentChangingEventHandlerT& src) : TComInterface<_ComponentChangingEventHandler>(src) {}
  TCOM_ComponentChangingEventHandlerT& operator=(const TCOM_ComponentChangingEventHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentChangingEventHandlerT<_ComponentChangingEventHandler> TCOM_ComponentChangingEventHandler;

// *********************************************************************//
// DispIntf:  _ComponentChangingEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7F8C2DA3-D337-334F-92E9-87BE9BDC6070}
// *********************************************************************//
template<class T>
class _ComponentChangingEventHandlerDispT : public TAutoDriver<_ComponentChangingEventHandler>
{
public:
  _ComponentChangingEventHandlerDispT(){}

  _ComponentChangingEventHandlerDispT(_ComponentChangingEventHandler *pintf)
  {
    TAutoDriver<_ComponentChangingEventHandler>::Bind(pintf, false);
  }

  _ComponentChangingEventHandlerDispT(_ComponentChangingEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentChangingEventHandler>::Bind(pintf, true);
  }

  _ComponentChangingEventHandlerDispT& operator=(_ComponentChangingEventHandler *pintf)
  {
    TAutoDriver<_ComponentChangingEventHandler>::Bind(pintf, false);
    return *this;
  }

  _ComponentChangingEventHandlerDispT& operator=(_ComponentChangingEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentChangingEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentChangingEventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentChangingEventHandler);
  }


};
typedef _ComponentChangingEventHandlerDispT<_ComponentChangingEventHandler> _ComponentChangingEventHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentEventArgs
// Interface: _ComponentEventArgs
// *********************************************************************//
template <class T /* _ComponentEventArgs */ >
class TCOM_ComponentEventArgsT : public TComInterface<_ComponentEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentEventArgsT() {}
  TCOM_ComponentEventArgsT(_ComponentEventArgs *intf, bool addRef = false) : TComInterface<_ComponentEventArgs>(intf, addRef) {}
  TCOM_ComponentEventArgsT(const TCOM_ComponentEventArgsT& src) : TComInterface<_ComponentEventArgs>(src) {}
  TCOM_ComponentEventArgsT& operator=(const TCOM_ComponentEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentEventArgsT<_ComponentEventArgs> TCOM_ComponentEventArgs;

// *********************************************************************//
// DispIntf:  _ComponentEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {438E8DCF-6875-305F-8CA5-40DBB15782A6}
// *********************************************************************//
template<class T>
class _ComponentEventArgsDispT : public TAutoDriver<_ComponentEventArgs>
{
public:
  _ComponentEventArgsDispT(){}

  _ComponentEventArgsDispT(_ComponentEventArgs *pintf)
  {
    TAutoDriver<_ComponentEventArgs>::Bind(pintf, false);
  }

  _ComponentEventArgsDispT(_ComponentEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentEventArgs>::Bind(pintf, true);
  }

  _ComponentEventArgsDispT& operator=(_ComponentEventArgs *pintf)
  {
    TAutoDriver<_ComponentEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ComponentEventArgsDispT& operator=(_ComponentEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentEventArgs);
  }


};
typedef _ComponentEventArgsDispT<_ComponentEventArgs> _ComponentEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentEventHandler
// Interface: _ComponentEventHandler
// *********************************************************************//
template <class T /* _ComponentEventHandler */ >
class TCOM_ComponentEventHandlerT : public TComInterface<_ComponentEventHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentEventHandlerT() {}
  TCOM_ComponentEventHandlerT(_ComponentEventHandler *intf, bool addRef = false) : TComInterface<_ComponentEventHandler>(intf, addRef) {}
  TCOM_ComponentEventHandlerT(const TCOM_ComponentEventHandlerT& src) : TComInterface<_ComponentEventHandler>(src) {}
  TCOM_ComponentEventHandlerT& operator=(const TCOM_ComponentEventHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentEventHandlerT<_ComponentEventHandler> TCOM_ComponentEventHandler;

// *********************************************************************//
// DispIntf:  _ComponentEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {290B355D-80D3-3AFA-96AB-B4D395729374}
// *********************************************************************//
template<class T>
class _ComponentEventHandlerDispT : public TAutoDriver<_ComponentEventHandler>
{
public:
  _ComponentEventHandlerDispT(){}

  _ComponentEventHandlerDispT(_ComponentEventHandler *pintf)
  {
    TAutoDriver<_ComponentEventHandler>::Bind(pintf, false);
  }

  _ComponentEventHandlerDispT(_ComponentEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentEventHandler>::Bind(pintf, true);
  }

  _ComponentEventHandlerDispT& operator=(_ComponentEventHandler *pintf)
  {
    TAutoDriver<_ComponentEventHandler>::Bind(pintf, false);
    return *this;
  }

  _ComponentEventHandlerDispT& operator=(_ComponentEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentEventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentEventHandler);
  }


};
typedef _ComponentEventHandlerDispT<_ComponentEventHandler> _ComponentEventHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentRenameEventArgs
// Interface: _ComponentRenameEventArgs
// *********************************************************************//
template <class T /* _ComponentRenameEventArgs */ >
class TCOM_ComponentRenameEventArgsT : public TComInterface<_ComponentRenameEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentRenameEventArgsT() {}
  TCOM_ComponentRenameEventArgsT(_ComponentRenameEventArgs *intf, bool addRef = false) : TComInterface<_ComponentRenameEventArgs>(intf, addRef) {}
  TCOM_ComponentRenameEventArgsT(const TCOM_ComponentRenameEventArgsT& src) : TComInterface<_ComponentRenameEventArgs>(src) {}
  TCOM_ComponentRenameEventArgsT& operator=(const TCOM_ComponentRenameEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentRenameEventArgsT<_ComponentRenameEventArgs> TCOM_ComponentRenameEventArgs;

// *********************************************************************//
// DispIntf:  _ComponentRenameEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DA5D7739-9522-3E28-9AB7-7C2D7D27C63A}
// *********************************************************************//
template<class T>
class _ComponentRenameEventArgsDispT : public TAutoDriver<_ComponentRenameEventArgs>
{
public:
  _ComponentRenameEventArgsDispT(){}

  _ComponentRenameEventArgsDispT(_ComponentRenameEventArgs *pintf)
  {
    TAutoDriver<_ComponentRenameEventArgs>::Bind(pintf, false);
  }

  _ComponentRenameEventArgsDispT(_ComponentRenameEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentRenameEventArgs>::Bind(pintf, true);
  }

  _ComponentRenameEventArgsDispT& operator=(_ComponentRenameEventArgs *pintf)
  {
    TAutoDriver<_ComponentRenameEventArgs>::Bind(pintf, false);
    return *this;
  }

  _ComponentRenameEventArgsDispT& operator=(_ComponentRenameEventArgsPtr pintf)
  {
    TAutoDriver<_ComponentRenameEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentRenameEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentRenameEventArgs);
  }


};
typedef _ComponentRenameEventArgsDispT<_ComponentRenameEventArgs> _ComponentRenameEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ComponentRenameEventHandler
// Interface: _ComponentRenameEventHandler
// *********************************************************************//
template <class T /* _ComponentRenameEventHandler */ >
class TCOM_ComponentRenameEventHandlerT : public TComInterface<_ComponentRenameEventHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentRenameEventHandlerT() {}
  TCOM_ComponentRenameEventHandlerT(_ComponentRenameEventHandler *intf, bool addRef = false) : TComInterface<_ComponentRenameEventHandler>(intf, addRef) {}
  TCOM_ComponentRenameEventHandlerT(const TCOM_ComponentRenameEventHandlerT& src) : TComInterface<_ComponentRenameEventHandler>(src) {}
  TCOM_ComponentRenameEventHandlerT& operator=(const TCOM_ComponentRenameEventHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ComponentRenameEventHandlerT<_ComponentRenameEventHandler> TCOM_ComponentRenameEventHandler;

// *********************************************************************//
// DispIntf:  _ComponentRenameEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA2DF049-DA87-3BD1-97B0-7904B59ADF7E}
// *********************************************************************//
template<class T>
class _ComponentRenameEventHandlerDispT : public TAutoDriver<_ComponentRenameEventHandler>
{
public:
  _ComponentRenameEventHandlerDispT(){}

  _ComponentRenameEventHandlerDispT(_ComponentRenameEventHandler *pintf)
  {
    TAutoDriver<_ComponentRenameEventHandler>::Bind(pintf, false);
  }

  _ComponentRenameEventHandlerDispT(_ComponentRenameEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentRenameEventHandler>::Bind(pintf, true);
  }

  _ComponentRenameEventHandlerDispT& operator=(_ComponentRenameEventHandler *pintf)
  {
    TAutoDriver<_ComponentRenameEventHandler>::Bind(pintf, false);
    return *this;
  }

  _ComponentRenameEventHandlerDispT& operator=(_ComponentRenameEventHandlerPtr pintf)
  {
    TAutoDriver<_ComponentRenameEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComponentRenameEventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComponentRenameEventHandler);
  }


};
typedef _ComponentRenameEventHandlerDispT<_ComponentRenameEventHandler> _ComponentRenameEventHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOM_DesignerTransactionCloseEventArgs
// Interface: _DesignerTransactionCloseEventArgs
// *********************************************************************//
template <class T /* _DesignerTransactionCloseEventArgs */ >
class TCOM_DesignerTransactionCloseEventArgsT : public TComInterface<_DesignerTransactionCloseEventArgs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DesignerTransactionCloseEventArgsT() {}
  TCOM_DesignerTransactionCloseEventArgsT(_DesignerTransactionCloseEventArgs *intf, bool addRef = false) : TComInterface<_DesignerTransactionCloseEventArgs>(intf, addRef) {}
  TCOM_DesignerTransactionCloseEventArgsT(const TCOM_DesignerTransactionCloseEventArgsT& src) : TComInterface<_DesignerTransactionCloseEventArgs>(src) {}
  TCOM_DesignerTransactionCloseEventArgsT& operator=(const TCOM_DesignerTransactionCloseEventArgsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DesignerTransactionCloseEventArgsT<_DesignerTransactionCloseEventArgs> TCOM_DesignerTransactionCloseEventArgs;

// *********************************************************************//
// DispIntf:  _DesignerTransactionCloseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3924A637-C2C4-3558-945F-279B5AC39ED9}
// *********************************************************************//
template<class T>
class _DesignerTransactionCloseEventArgsDispT : public TAutoDriver<_DesignerTransactionCloseEventArgs>
{
public:
  _DesignerTransactionCloseEventArgsDispT(){}

  _DesignerTransactionCloseEventArgsDispT(_DesignerTransactionCloseEventArgs *pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventArgs>::Bind(pintf, false);
  }

  _DesignerTransactionCloseEventArgsDispT(_DesignerTransactionCloseEventArgsPtr pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventArgs>::Bind(pintf, true);
  }

  _DesignerTransactionCloseEventArgsDispT& operator=(_DesignerTransactionCloseEventArgs *pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventArgs>::Bind(pintf, false);
    return *this;
  }

  _DesignerTransactionCloseEventArgsDispT& operator=(_DesignerTransactionCloseEventArgsPtr pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventArgs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignerTransactionCloseEventArgs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignerTransactionCloseEventArgs);
  }


};
typedef _DesignerTransactionCloseEventArgsDispT<_DesignerTransactionCloseEventArgs> _DesignerTransactionCloseEventArgsDisp;

// *********************************************************************//
// SmartIntf: TCOM_DesignerTransactionCloseEventHandler
// Interface: _DesignerTransactionCloseEventHandler
// *********************************************************************//
template <class T /* _DesignerTransactionCloseEventHandler */ >
class TCOM_DesignerTransactionCloseEventHandlerT : public TComInterface<_DesignerTransactionCloseEventHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DesignerTransactionCloseEventHandlerT() {}
  TCOM_DesignerTransactionCloseEventHandlerT(_DesignerTransactionCloseEventHandler *intf, bool addRef = false) : TComInterface<_DesignerTransactionCloseEventHandler>(intf, addRef) {}
  TCOM_DesignerTransactionCloseEventHandlerT(const TCOM_DesignerTransactionCloseEventHandlerT& src) : TComInterface<_DesignerTransactionCloseEventHandler>(src) {}
  TCOM_DesignerTransactionCloseEventHandlerT& operator=(const TCOM_DesignerTransactionCloseEventHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DesignerTransactionCloseEventHandlerT<_DesignerTransactionCloseEventHandler> TCOM_DesignerTransactionCloseEventHandler;

// *********************************************************************//
// DispIntf:  _DesignerTransactionCloseEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4543D155-EE6A-3529-BC8D-CF0E866B6B0B}
// *********************************************************************//
template<class T>
class _DesignerTransactionCloseEventHandlerDispT : public TAutoDriver<_DesignerTransactionCloseEventHandler>
{
public:
  _DesignerTransactionCloseEventHandlerDispT(){}

  _DesignerTransactionCloseEventHandlerDispT(_DesignerTransactionCloseEventHandler *pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventHandler>::Bind(pintf, false);
  }

  _DesignerTransactionCloseEventHandlerDispT(_DesignerTransactionCloseEventHandlerPtr pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventHandler>::Bind(pintf, true);
  }

  _DesignerTransactionCloseEventHandlerDispT& operator=(_DesignerTransactionCloseEventHandler *pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventHandler>::Bind(pintf, false);
    return *this;
  }

  _DesignerTransactionCloseEventHandlerDispT& operator=(_DesignerTransactionCloseEventHandlerPtr pintf)
  {
    TAutoDriver<_DesignerTransactionCloseEventHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignerTransactionCloseEventHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignerTransactionCloseEventHandler);
  }


};
typedef _DesignerTransactionCloseEventHandlerDispT<_DesignerTransactionCloseEventHandler> _DesignerTransactionCloseEventHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOM_DesignerVerb
// Interface: _DesignerVerb
// *********************************************************************//
template <class T /* _DesignerVerb */ >
class TCOM_DesignerVerbT : public TComInterface<_DesignerVerb>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DesignerVerbT() {}
  TCOM_DesignerVerbT(_DesignerVerb *intf, bool addRef = false) : TComInterface<_DesignerVerb>(intf, addRef) {}
  TCOM_DesignerVerbT(const TCOM_DesignerVerbT& src) : TComInterface<_DesignerVerb>(src) {}
  TCOM_DesignerVerbT& operator=(const TCOM_DesignerVerbT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DesignerVerbT<_DesignerVerb> TCOM_DesignerVerb;

// *********************************************************************//
// DispIntf:  _DesignerVerb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7C41B90E-52FB-3E54-8B03-EBE0BF172C84}
// *********************************************************************//
template<class T>
class _DesignerVerbDispT : public TAutoDriver<_DesignerVerb>
{
public:
  _DesignerVerbDispT(){}

  _DesignerVerbDispT(_DesignerVerb *pintf)
  {
    TAutoDriver<_DesignerVerb>::Bind(pintf, false);
  }

  _DesignerVerbDispT(_DesignerVerbPtr pintf)
  {
    TAutoDriver<_DesignerVerb>::Bind(pintf, true);
  }

  _DesignerVerbDispT& operator=(_DesignerVerb *pintf)
  {
    TAutoDriver<_DesignerVerb>::Bind(pintf, false);
    return *this;
  }

  _DesignerVerbDispT& operator=(_DesignerVerbPtr pintf)
  {
    TAutoDriver<_DesignerVerb>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignerVerb));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignerVerb);
  }


};
typedef _DesignerVerbDispT<_DesignerVerb> _DesignerVerbDisp;

// *********************************************************************//
// SmartIntf: TCOM_MenuCommand
// Interface: _MenuCommand
// *********************************************************************//
template <class T /* _MenuCommand */ >
class TCOM_MenuCommandT : public TComInterface<_MenuCommand>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MenuCommandT() {}
  TCOM_MenuCommandT(_MenuCommand *intf, bool addRef = false) : TComInterface<_MenuCommand>(intf, addRef) {}
  TCOM_MenuCommandT(const TCOM_MenuCommandT& src) : TComInterface<_MenuCommand>(src) {}
  TCOM_MenuCommandT& operator=(const TCOM_MenuCommandT& src) { Bind(src, true); return *this;}


};
typedef TCOM_MenuCommandT<_MenuCommand> TCOM_MenuCommand;

// *********************************************************************//
// DispIntf:  _MenuCommand
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1FF238CE-6190-3750-A34F-05F02B7315A6}
// *********************************************************************//
template<class T>
class _MenuCommandDispT : public TAutoDriver<_MenuCommand>
{
public:
  _MenuCommandDispT(){}

  _MenuCommandDispT(_MenuCommand *pintf)
  {
    TAutoDriver<_MenuCommand>::Bind(pintf, false);
  }

  _MenuCommandDispT(_MenuCommandPtr pintf)
  {
    TAutoDriver<_MenuCommand>::Bind(pintf, true);
  }

  _MenuCommandDispT& operator=(_MenuCommand *pintf)
  {
    TAutoDriver<_MenuCommand>::Bind(pintf, false);
    return *this;
  }

  _MenuCommandDispT& operator=(_MenuCommandPtr pintf)
  {
    TAutoDriver<_MenuCommand>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MenuCommand));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MenuCommand);
  }


};
typedef _MenuCommandDispT<_MenuCommand> _MenuCommandDisp;

// *********************************************************************//
// SmartIntf: TCOM_DesignerVerbCollection
// Interface: _DesignerVerbCollection
// *********************************************************************//
template <class T /* _DesignerVerbCollection */ >
class TCOM_DesignerVerbCollectionT : public TComInterface<_DesignerVerbCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DesignerVerbCollectionT() {}
  TCOM_DesignerVerbCollectionT(_DesignerVerbCollection *intf, bool addRef = false) : TComInterface<_DesignerVerbCollection>(intf, addRef) {}
  TCOM_DesignerVerbCollectionT(const TCOM_DesignerVerbCollectionT& src) : TComInterface<_DesignerVerbCollection>(src) {}
  TCOM_DesignerVerbCollectionT& operator=(const TCOM_DesignerVerbCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DesignerVerbCollectionT<_DesignerVerbCollection> TCOM_DesignerVerbCollection;

// *********************************************************************//
// DispIntf:  _DesignerVerbCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC3BDDA4-25B8-3321-A1C0-7C37BBF2DDED}
// *********************************************************************//
template<class T>
class _DesignerVerbCollectionDispT : public TAutoDriver<_DesignerVerbCollection>
{
public:
  _DesignerVerbCollectionDispT(){}

  _DesignerVerbCollectionDispT(_DesignerVerbCollection *pintf)
  {
    TAutoDriver<_DesignerVerbCollection>::Bind(pintf, false);
  }

  _DesignerVerbCollectionDispT(_DesignerVerbCollectionPtr pintf)
  {
    TAutoDriver<_DesignerVerbCollection>::Bind(pintf, true);
  }

  _DesignerVerbCollectionDispT& operator=(_DesignerVerbCollection *pintf)
  {
    TAutoDriver<_DesignerVerbCollection>::Bind(pintf, false);
    return *this;
  }

  _DesignerVerbCollectionDispT& operator=(_DesignerVerbCollectionPtr pintf)
  {
    TAutoDriver<_DesignerVerbCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignerVerbCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignerVerbCollection);
  }


};
typedef _DesignerVerbCollectionDispT<_DesignerVerbCollection> _DesignerVerbCollectionDisp;

typedef TComInterface<IComponentChangeService>  TCOMIComponentChangeService;

// *********************************************************************//
// DispIntf:  IComponentChangeService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}
// *********************************************************************//
template<class T>
class IComponentChangeServiceDispT : public TAutoDriver<IComponentChangeService>
{
public:
  IComponentChangeServiceDispT(){}

  IComponentChangeServiceDispT(IComponentChangeService *pintf)
  {
    TAutoDriver<IComponentChangeService>::Bind(pintf, false);
  }

  IComponentChangeServiceDispT(IComponentChangeServicePtr pintf)
  {
    TAutoDriver<IComponentChangeService>::Bind(pintf, true);
  }

  IComponentChangeServiceDispT& operator=(IComponentChangeService *pintf)
  {
    TAutoDriver<IComponentChangeService>::Bind(pintf, false);
    return *this;
  }

  IComponentChangeServiceDispT& operator=(IComponentChangeServicePtr pintf)
  {
    TAutoDriver<IComponentChangeService>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall add_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/);
  HRESULT         __fastcall add_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/);
  HRESULT         __fastcall OnComponentChanged(VARIANT component/*[in]*/, 
                                                System_tlb::_MemberDescriptor* member/*[in]*/, 
                                                VARIANT oldValue/*[in]*/, VARIANT newValue/*[in]*/);
  HRESULT         __fastcall OnComponentChanging(VARIANT component/*[in]*/, 
                                                 System_tlb::_MemberDescriptor* member/*[in]*/);

};
typedef IComponentChangeServiceDispT<IComponentChangeService> IComponentChangeServiceDisp;

typedef TComInterface<IServiceContainer>  TCOMIServiceContainer;

// *********************************************************************//
// DispIntf:  IServiceContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BA96B42-7FDD-3223-BF52-7FE677B92815}
// *********************************************************************//
template<class T>
class IServiceContainerDispT : public TAutoDriver<IServiceContainer>
{
public:
  IServiceContainerDispT(){}

  IServiceContainerDispT(IServiceContainer *pintf)
  {
    TAutoDriver<IServiceContainer>::Bind(pintf, false);
  }

  IServiceContainerDispT(IServiceContainerPtr pintf)
  {
    TAutoDriver<IServiceContainer>::Bind(pintf, true);
  }

  IServiceContainerDispT& operator=(IServiceContainer *pintf)
  {
    TAutoDriver<IServiceContainer>::Bind(pintf, false);
    return *this;
  }

  IServiceContainerDispT& operator=(IServiceContainerPtr pintf)
  {
    TAutoDriver<IServiceContainer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall AddService(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                        VARIANT serviceInstance/*[in]*/);
  HRESULT         __fastcall AddService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                          VARIANT serviceInstance/*[in]*/, 
                                          VARIANT_BOOL promote/*[in]*/);
  HRESULT         __fastcall AddService_3(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                          System_tlb::_ServiceCreatorCallback* callback/*[in]*/);
  HRESULT         __fastcall AddService_4(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                          System_tlb::_ServiceCreatorCallback* callback/*[in]*/, 
                                          VARIANT_BOOL promote/*[in]*/);
  HRESULT         __fastcall RemoveService(Mscorlib_tlb::_Type* serviceType/*[in]*/);
  HRESULT         __fastcall RemoveService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                             VARIANT_BOOL promote/*[in]*/);

};
typedef IServiceContainerDispT<IServiceContainer> IServiceContainerDisp;

typedef TComInterface<IEventBindingService>  TCOMIEventBindingService;

// *********************************************************************//
// DispIntf:  IEventBindingService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}
// *********************************************************************//
template<class T>
class IEventBindingServiceDispT : public TAutoDriver<IEventBindingService>
{
public:
  IEventBindingServiceDispT(){}

  IEventBindingServiceDispT(IEventBindingService *pintf)
  {
    TAutoDriver<IEventBindingService>::Bind(pintf, false);
  }

  IEventBindingServiceDispT(IEventBindingServicePtr pintf)
  {
    TAutoDriver<IEventBindingService>::Bind(pintf, true);
  }

  IEventBindingServiceDispT& operator=(IEventBindingService *pintf)
  {
    TAutoDriver<IEventBindingService>::Bind(pintf, false);
    return *this;
  }

  IEventBindingServiceDispT& operator=(IEventBindingServicePtr pintf)
  {
    TAutoDriver<IEventBindingService>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                                    System_tlb::_EventDescriptor* e/*[in]*/, 
                                                    BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                                    System_tlb::_EventDescriptor* e/*[in]*/);
  HRESULT         __fastcall GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/, 
                                                  Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/);
  Mscorlib_tlb::ICollection* __fastcall GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/);
  HRESULT         __fastcall GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/, 
                                      System_tlb::_EventDescriptor** pRetVal/*[out,retval]*/);
  System_tlb::_EventDescriptor* __fastcall GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/);
  HRESULT         __fastcall GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/
                                                , LPUNKNOWN* pRetVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/);
  HRESULT         __fastcall GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/, 
                                              System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/);
  System_tlb::_PropertyDescriptor* __fastcall GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/);
  HRESULT         __fastcall ShowCode(VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall ShowCode(void);
  HRESULT         __fastcall ShowCode_2(long lineNumber/*[in]*/, 
                                        VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall ShowCode_2(long lineNumber/*[in]*/);
  HRESULT         __fastcall ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                        System_tlb::_EventDescriptor* e/*[in]*/, 
                                        VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                        System_tlb::_EventDescriptor* e/*[in]*/);

};
typedef IEventBindingServiceDispT<IEventBindingService> IEventBindingServiceDisp;

typedef TComInterface<IMenuCommandService>  TCOMIMenuCommandService;

// *********************************************************************//
// DispIntf:  IMenuCommandService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DF651C5D-783E-3789-901F-A962B7587E69}
// *********************************************************************//
template<class T>
class IMenuCommandServiceDispT : public TAutoDriver<IMenuCommandService>
{
public:
  IMenuCommandServiceDispT(){}

  IMenuCommandServiceDispT(IMenuCommandService *pintf)
  {
    TAutoDriver<IMenuCommandService>::Bind(pintf, false);
  }

  IMenuCommandServiceDispT(IMenuCommandServicePtr pintf)
  {
    TAutoDriver<IMenuCommandService>::Bind(pintf, true);
  }

  IMenuCommandServiceDispT& operator=(IMenuCommandService *pintf)
  {
    TAutoDriver<IMenuCommandService>::Bind(pintf, false);
    return *this;
  }

  IMenuCommandServiceDispT& operator=(IMenuCommandServicePtr pintf)
  {
    TAutoDriver<IMenuCommandService>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/);
  System_tlb::_DesignerVerbCollectionPtr __fastcall get_Verbs(void);
  HRESULT         __fastcall AddCommand(System_tlb::_MenuCommand* command/*[in]*/);
  HRESULT         __fastcall AddVerb(System_tlb::_DesignerVerb* verb/*[in]*/);
  HRESULT         __fastcall FindCommand(System_tlb::_CommandID* CommandID/*[in]*/, 
                                         System_tlb::_MenuCommand** pRetVal/*[out,retval]*/);
  System_tlb::_MenuCommand* __fastcall FindCommand(System_tlb::_CommandID* CommandID/*[in]*/);
  HRESULT         __fastcall GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/, 
                                          VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/);
  HRESULT         __fastcall RemoveCommand(System_tlb::_MenuCommand* command/*[in]*/);
  HRESULT         __fastcall RemoveVerb(System_tlb::_DesignerVerb* verb/*[in]*/);
  HRESULT         __fastcall ShowContextMenu(System_tlb::_CommandID* menuID/*[in]*/, long x/*[in]*/
                                             , long y/*[in]*/);

  __property   System_tlb::_DesignerVerbCollectionPtr Verbs = {read = get_Verbs};
};
typedef IMenuCommandServiceDispT<IMenuCommandService> IMenuCommandServiceDisp;

typedef TComInterface<IRootDesigner>  TCOMIRootDesigner;

// *********************************************************************//
// DispIntf:  IRootDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}
// *********************************************************************//
template<class T>
class IRootDesignerDispT : public TAutoDriver<IRootDesigner>
{
public:
  IRootDesignerDispT(){}

  IRootDesignerDispT(IRootDesigner *pintf)
  {
    TAutoDriver<IRootDesigner>::Bind(pintf, false);
  }

  IRootDesignerDispT(IRootDesignerPtr pintf)
  {
    TAutoDriver<IRootDesigner>::Bind(pintf, true);
  }

  IRootDesignerDispT& operator=(IRootDesigner *pintf)
  {
    TAutoDriver<IRootDesigner>::Bind(pintf, false);
    return *this;
  }

  IRootDesignerDispT& operator=(IRootDesignerPtr pintf)
  {
    TAutoDriver<IRootDesigner>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SupportedTechnologies(LPSAFEARRAY* pRetVal/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_SupportedTechnologies(void);
  HRESULT         __fastcall GetView(System_tlb::ViewTechnology technology/*[in]*/, 
                                     VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall GetView(System_tlb::ViewTechnology technology/*[in]*/);

};
typedef IRootDesignerDispT<IRootDesigner> IRootDesignerDisp;

typedef TComInterface<ISelectionService>  TCOMISelectionService;

// *********************************************************************//
// DispIntf:  ISelectionService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {297A65BE-5080-3F7F-AD19-B0D05D6F2327}
// *********************************************************************//
template<class T>
class ISelectionServiceDispT : public TAutoDriver<ISelectionService>
{
public:
  ISelectionServiceDispT(){}

  ISelectionServiceDispT(ISelectionService *pintf)
  {
    TAutoDriver<ISelectionService>::Bind(pintf, false);
  }

  ISelectionServiceDispT(ISelectionServicePtr pintf)
  {
    TAutoDriver<ISelectionService>::Bind(pintf, true);
  }

  ISelectionServiceDispT& operator=(ISelectionService *pintf)
  {
    TAutoDriver<ISelectionService>::Bind(pintf, false);
    return *this;
  }

  ISelectionServiceDispT& operator=(ISelectionServicePtr pintf)
  {
    TAutoDriver<ISelectionService>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_PrimarySelection(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_PrimarySelection(void);
  HRESULT         __fastcall get_SelectionCount(long* pRetVal/*[out,retval]*/);
  long            __fastcall get_SelectionCount(void);
  HRESULT         __fastcall add_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall add_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall remove_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/);
  HRESULT         __fastcall GetComponentSelected(VARIANT component/*[in]*/, 
                                                  VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetComponentSelected(VARIANT component/*[in]*/);
  HRESULT         __fastcall GetSelectedComponents(Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/);
  Mscorlib_tlb::ICollection* __fastcall GetSelectedComponents(void);
  HRESULT         __fastcall SetSelectedComponents(Mscorlib_tlb::ICollection* Components/*[in]*/);
  HRESULT         __fastcall SetSelectedComponents_2(Mscorlib_tlb::ICollection* Components/*[in]*/, 
                                                     System_tlb::SelectionTypes selectionType/*[in]*/);

  __property   long            SelectionCount = {read = get_SelectionCount};
};
typedef ISelectionServiceDispT<ISelectionService> ISelectionServiceDisp;

// *********************************************************************//
// SmartIntf: TCOM_ServiceCreatorCallback
// Interface: _ServiceCreatorCallback
// *********************************************************************//
template <class T /* _ServiceCreatorCallback */ >
class TCOM_ServiceCreatorCallbackT : public TComInterface<_ServiceCreatorCallback>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ServiceCreatorCallbackT() {}
  TCOM_ServiceCreatorCallbackT(_ServiceCreatorCallback *intf, bool addRef = false) : TComInterface<_ServiceCreatorCallback>(intf, addRef) {}
  TCOM_ServiceCreatorCallbackT(const TCOM_ServiceCreatorCallbackT& src) : TComInterface<_ServiceCreatorCallback>(src) {}
  TCOM_ServiceCreatorCallbackT& operator=(const TCOM_ServiceCreatorCallbackT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ServiceCreatorCallbackT<_ServiceCreatorCallback> TCOM_ServiceCreatorCallback;

// *********************************************************************//
// DispIntf:  _ServiceCreatorCallback
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE380BEC-79F2-3876-B510-FA2FE43B7EB7}
// *********************************************************************//
template<class T>
class _ServiceCreatorCallbackDispT : public TAutoDriver<_ServiceCreatorCallback>
{
public:
  _ServiceCreatorCallbackDispT(){}

  _ServiceCreatorCallbackDispT(_ServiceCreatorCallback *pintf)
  {
    TAutoDriver<_ServiceCreatorCallback>::Bind(pintf, false);
  }

  _ServiceCreatorCallbackDispT(_ServiceCreatorCallbackPtr pintf)
  {
    TAutoDriver<_ServiceCreatorCallback>::Bind(pintf, true);
  }

  _ServiceCreatorCallbackDispT& operator=(_ServiceCreatorCallback *pintf)
  {
    TAutoDriver<_ServiceCreatorCallback>::Bind(pintf, false);
    return *this;
  }

  _ServiceCreatorCallbackDispT& operator=(_ServiceCreatorCallbackPtr pintf)
  {
    TAutoDriver<_ServiceCreatorCallback>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ServiceCreatorCallback));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ServiceCreatorCallback);
  }


};
typedef _ServiceCreatorCallbackDispT<_ServiceCreatorCallback> _ServiceCreatorCallbackDisp;

// *********************************************************************//
// SmartIntf: TCOM_DesignerLoader
// Interface: _DesignerLoader
// *********************************************************************//
template <class T /* _DesignerLoader */ >
class TCOM_DesignerLoaderT : public TComInterface<_DesignerLoader>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DesignerLoaderT() {}
  TCOM_DesignerLoaderT(_DesignerLoader *intf, bool addRef = false) : TComInterface<_DesignerLoader>(intf, addRef) {}
  TCOM_DesignerLoaderT(const TCOM_DesignerLoaderT& src) : TComInterface<_DesignerLoader>(src) {}
  TCOM_DesignerLoaderT& operator=(const TCOM_DesignerLoaderT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DesignerLoaderT<_DesignerLoader> TCOM_DesignerLoader;

// *********************************************************************//
// DispIntf:  _DesignerLoader
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {43BE964C-1B4A-3D1F-9D94-8185A1E6CB7B}
// *********************************************************************//
template<class T>
class _DesignerLoaderDispT : public TAutoDriver<_DesignerLoader>
{
public:
  _DesignerLoaderDispT(){}

  _DesignerLoaderDispT(_DesignerLoader *pintf)
  {
    TAutoDriver<_DesignerLoader>::Bind(pintf, false);
  }

  _DesignerLoaderDispT(_DesignerLoaderPtr pintf)
  {
    TAutoDriver<_DesignerLoader>::Bind(pintf, true);
  }

  _DesignerLoaderDispT& operator=(_DesignerLoader *pintf)
  {
    TAutoDriver<_DesignerLoader>::Bind(pintf, false);
    return *this;
  }

  _DesignerLoaderDispT& operator=(_DesignerLoaderPtr pintf)
  {
    TAutoDriver<_DesignerLoader>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DesignerLoader));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DesignerLoader);
  }


};
typedef _DesignerLoaderDispT<_DesignerLoader> _DesignerLoaderDisp;

// *********************************************************************//
// SmartIntf: TCOM_PerformanceCounterManager
// Interface: _PerformanceCounterManager
// *********************************************************************//
template <class T /* _PerformanceCounterManager */ >
class TCOM_PerformanceCounterManagerT : public TComInterface<_PerformanceCounterManager>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PerformanceCounterManagerT() {}
  TCOM_PerformanceCounterManagerT(_PerformanceCounterManager *intf, bool addRef = false) : TComInterface<_PerformanceCounterManager>(intf, addRef) {}
  TCOM_PerformanceCounterManagerT(const TCOM_PerformanceCounterManagerT& src) : TComInterface<_PerformanceCounterManager>(src) {}
  TCOM_PerformanceCounterManagerT& operator=(const TCOM_PerformanceCounterManagerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_PerformanceCounterManagerT<_PerformanceCounterManager> TCOM_PerformanceCounterManager;

// *********************************************************************//
// DispIntf:  _PerformanceCounterManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A9809E7D-42F8-3284-82CF-AB5F863A29AA}
// *********************************************************************//
template<class T>
class _PerformanceCounterManagerDispT : public TAutoDriver<_PerformanceCounterManager>
{
public:
  _PerformanceCounterManagerDispT(){}

  _PerformanceCounterManagerDispT(_PerformanceCounterManager *pintf)
  {
    TAutoDriver<_PerformanceCounterManager>::Bind(pintf, false);
  }

  _PerformanceCounterManagerDispT(_PerformanceCounterManagerPtr pintf)
  {
    TAutoDriver<_PerformanceCounterManager>::Bind(pintf, true);
  }

  _PerformanceCounterManagerDispT& operator=(_PerformanceCounterManager *pintf)
  {
    TAutoDriver<_PerformanceCounterManager>::Bind(pintf, false);
    return *this;
  }

  _PerformanceCounterManagerDispT& operator=(_PerformanceCounterManagerPtr pintf)
  {
    TAutoDriver<_PerformanceCounterManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PerformanceCounterManager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PerformanceCounterManager);
  }


};
typedef _PerformanceCounterManagerDispT<_PerformanceCounterManager> _PerformanceCounterManagerDisp;

// *********************************************************************//
// SmartIntf: TCOM_WebHeaderCollection
// Interface: _WebHeaderCollection
// *********************************************************************//
template <class T /* _WebHeaderCollection */ >
class TCOM_WebHeaderCollectionT : public TComInterface<_WebHeaderCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_WebHeaderCollectionT() {}
  TCOM_WebHeaderCollectionT(_WebHeaderCollection *intf, bool addRef = false) : TComInterface<_WebHeaderCollection>(intf, addRef) {}
  TCOM_WebHeaderCollectionT(const TCOM_WebHeaderCollectionT& src) : TComInterface<_WebHeaderCollection>(src) {}
  TCOM_WebHeaderCollectionT& operator=(const TCOM_WebHeaderCollectionT& src) { Bind(src, true); return *this;}


};
typedef TCOM_WebHeaderCollectionT<_WebHeaderCollection> TCOM_WebHeaderCollection;

// *********************************************************************//
// DispIntf:  _WebHeaderCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B97E84F2-FAB2-340D-8D49-2AC85CF5C0EC}
// *********************************************************************//
template<class T>
class _WebHeaderCollectionDispT : public TAutoDriver<_WebHeaderCollection>
{
public:
  _WebHeaderCollectionDispT(){}

  _WebHeaderCollectionDispT(_WebHeaderCollection *pintf)
  {
    TAutoDriver<_WebHeaderCollection>::Bind(pintf, false);
  }

  _WebHeaderCollectionDispT(_WebHeaderCollectionPtr pintf)
  {
    TAutoDriver<_WebHeaderCollection>::Bind(pintf, true);
  }

  _WebHeaderCollectionDispT& operator=(_WebHeaderCollection *pintf)
  {
    TAutoDriver<_WebHeaderCollection>::Bind(pintf, false);
    return *this;
  }

  _WebHeaderCollectionDispT& operator=(_WebHeaderCollectionPtr pintf)
  {
    TAutoDriver<_WebHeaderCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebHeaderCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebHeaderCollection);
  }


};
typedef _WebHeaderCollectionDispT<_WebHeaderCollection> _WebHeaderCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_WebClient
// Interface: _WebClient
// *********************************************************************//
template <class T /* _WebClient */ >
class TCOM_WebClientT : public TComInterface<_WebClient>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_WebClientT() {}
  TCOM_WebClientT(_WebClient *intf, bool addRef = false) : TComInterface<_WebClient>(intf, addRef) {}
  TCOM_WebClientT(const TCOM_WebClientT& src) : TComInterface<_WebClient>(src) {}
  TCOM_WebClientT& operator=(const TCOM_WebClientT& src) { Bind(src, true); return *this;}


};
typedef TCOM_WebClientT<_WebClient> TCOM_WebClient;

// *********************************************************************//
// DispIntf:  _WebClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85B4A627-7552-3AA6-8A1C-A213C5788FEC}
// *********************************************************************//
template<class T>
class _WebClientDispT : public TAutoDriver<_WebClient>
{
public:
  _WebClientDispT(){}

  _WebClientDispT(_WebClient *pintf)
  {
    TAutoDriver<_WebClient>::Bind(pintf, false);
  }

  _WebClientDispT(_WebClientPtr pintf)
  {
    TAutoDriver<_WebClient>::Bind(pintf, true);
  }

  _WebClientDispT& operator=(_WebClient *pintf)
  {
    TAutoDriver<_WebClient>::Bind(pintf, false);
    return *this;
  }

  _WebClientDispT& operator=(_WebClientPtr pintf)
  {
    TAutoDriver<_WebClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebClient));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebClient);
  }


};
typedef _WebClientDispT<_WebClient> _WebClientDisp;

// *********************************************************************//
// SmartIntf: TCOM_StandardOleMarshalObject
// Interface: _StandardOleMarshalObject
// *********************************************************************//
template <class T /* _StandardOleMarshalObject */ >
class TCOM_StandardOleMarshalObjectT : public TComInterface<_StandardOleMarshalObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_StandardOleMarshalObjectT() {}
  TCOM_StandardOleMarshalObjectT(_StandardOleMarshalObject *intf, bool addRef = false) : TComInterface<_StandardOleMarshalObject>(intf, addRef) {}
  TCOM_StandardOleMarshalObjectT(const TCOM_StandardOleMarshalObjectT& src) : TComInterface<_StandardOleMarshalObject>(src) {}
  TCOM_StandardOleMarshalObjectT& operator=(const TCOM_StandardOleMarshalObjectT& src) { Bind(src, true); return *this;}


};
typedef TCOM_StandardOleMarshalObjectT<_StandardOleMarshalObject> TCOM_StandardOleMarshalObject;

// *********************************************************************//
// DispIntf:  _StandardOleMarshalObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05F3D6C7-D4D1-37EB-AC35-63347B838A23}
// *********************************************************************//
template<class T>
class _StandardOleMarshalObjectDispT : public TAutoDriver<_StandardOleMarshalObject>
{
public:
  _StandardOleMarshalObjectDispT(){}

  _StandardOleMarshalObjectDispT(_StandardOleMarshalObject *pintf)
  {
    TAutoDriver<_StandardOleMarshalObject>::Bind(pintf, false);
  }

  _StandardOleMarshalObjectDispT(_StandardOleMarshalObjectPtr pintf)
  {
    TAutoDriver<_StandardOleMarshalObject>::Bind(pintf, true);
  }

  _StandardOleMarshalObjectDispT& operator=(_StandardOleMarshalObject *pintf)
  {
    TAutoDriver<_StandardOleMarshalObject>::Bind(pintf, false);
    return *this;
  }

  _StandardOleMarshalObjectDispT& operator=(_StandardOleMarshalObjectPtr pintf)
  {
    TAutoDriver<_StandardOleMarshalObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StandardOleMarshalObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StandardOleMarshalObject);
  }


};
typedef _StandardOleMarshalObjectDispT<_StandardOleMarshalObject> _StandardOleMarshalObjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeDomProvider
// Interface: _CodeDomProvider
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDomProvider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {61059E8D-1DD2-3F4B-A4C5-D566B8968FFB}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_TypeConverter
// Interface: _TypeConverter
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _TypeConverter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05241989-96C5-3BF9-AB9B-37E261C1B8F8}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeMember
// Interface: _CodeTypeMember
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8068AE1D-26CB-3DB6-97CD-ED83DE116C5A}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  ITypeDescriptorContext
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5CBAE170-8759-3B8A-B919-E12FB86AD1F3}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITypeDescriptorContextDispT<T>::get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IContainer**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IContainerPtr __fastcall
ITypeDescriptorContextDispT<T>::get_Container(void)
{
  System_tlb::IContainerPtr pRetVal;
  this->get_Container(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITypeDescriptorContextDispT<T>::get_Instance(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Instance"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITypeDescriptorContextDispT<T>::get_Instance(void)
{
  VARIANT pRetVal;
  this->get_Instance((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITypeDescriptorContextDispT<T>::get_PropertyDescriptor(System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyDescriptor"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_PropertyDescriptor**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::_PropertyDescriptorPtr __fastcall
ITypeDescriptorContextDispT<T>::get_PropertyDescriptor(void)
{
  System_tlb::_PropertyDescriptorPtr pRetVal;
  this->get_PropertyDescriptor(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITypeDescriptorContextDispT<T>::OnComponentChanging(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnComponentChanging"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITypeDescriptorContextDispT<T>::OnComponentChanging(void)
{
  VARIANT_BOOL pRetVal;
  this->OnComponentChanging((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITypeDescriptorContextDispT<T>::OnComponentChanged()
{
  _TDispID _dispid(*this, OLETEXT("OnComponentChanged"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOM_CodeArgumentReferenceExpression
// Interface: _CodeArgumentReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeArgumentReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A52B85C6-5370-35C9-A04A-04A92013862C}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeExpression
// Interface: _CodeExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD377794-864F-3421-9FB8-C684BBC1BC02}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeArrayCreateExpression
// Interface: _CodeArrayCreateExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeArrayCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7955E55-7F3B-3277-AA0C-F62AA615676D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReference
// Interface: _CodeTypeReference
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeReference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6D972C6-022B-3F91-9655-E288E9D32C55}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeExpressionCollection
// Interface: _CodeExpressionCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AF72CC74-2275-362A-9141-A4A79D596F39}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeArrayIndexerExpression
// Interface: _CodeArrayIndexerExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeArrayIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {732748F5-5256-327B-A7E5-2000B07F21B3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAssignStatement
// Interface: _CodeAssignStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAssignStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E2024DE0-DC21-305D-8761-6C31F2177FB0}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeStatement
// Interface: _CodeStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B125774D-EF66-382B-878D-2D916999B0D2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAttachEventStatement
// Interface: _CodeAttachEventStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAttachEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7BC47E9-706C-3AA7-B1BA-8AB95188FA11}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeEventReferenceExpression
// Interface: _CodeEventReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeEventReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35872687-5A11-34D7-85AB-865830A3BDEE}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeArgument
// Interface: _CodeAttributeArgument
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAttributeArgument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02EFD952-FF8C-3B72-8C33-739A506D53D9}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeArgumentCollection
// Interface: _CodeAttributeArgumentCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAttributeArgumentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE84E484-A7EC-3D15-B5E2-EDC2DE2DB42E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeDeclaration
// Interface: _CodeAttributeDeclaration
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAttributeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EF72D021-2C6D-3E33-9442-574BFD6E0871}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeAttributeDeclarationCollection
// Interface: _CodeAttributeDeclarationCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeAttributeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7E9ACA22-637C-3F88-A931-AAF36A4F9A6B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeBaseReferenceExpression
// Interface: _CodeBaseReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeBaseReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {45E29CA6-670A-3B13-9557-4E5903056BF3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeBinaryOperatorExpression
// Interface: _CodeBinaryOperatorExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeBinaryOperatorExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A22929C9-D301-3F5B-98B7-844FDBA1DEDF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCastExpression
// Interface: _CodeCastExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCastExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90BED8ED-21E3-31FE-8F02-C929BA4FB0AC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCatchClause
// Interface: _CodeCatchClause
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCatchClause
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {609C7788-BDB0-364C-92E3-FC16AC613430}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeStatementCollection
// Interface: _CodeStatementCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B9A5032-4B8C-3DE6-997C-C38B4B3AF26A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCatchClauseCollection
// Interface: _CodeCatchClauseCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCatchClauseCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF5E1CD9-0478-34A4-9B9C-7C80BCB1A725}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeChecksumPragma
// Interface: _CodeChecksumPragma
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeChecksumPragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB20114-E822-358C-BDAB-DCF9E5090F23}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDirective
// Interface: _CodeDirective
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {767E752E-2315-35CF-9652-7FC46AE870D3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeComment
// Interface: _CodeComment
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeComment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C94F39B3-436F-3711-9CB0-91C6299B62A2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeObject
// Interface: _CodeObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE499EFD-22E2-3740-A64A-2AB010099C01}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCommentStatement
// Interface: _CodeCommentStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCommentStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C13F8B9-F2E0-3918-A33E-3E491BDC529E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCommentStatementCollection
// Interface: _CodeCommentStatementCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCommentStatementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E34CEB72-8F86-333D-AEDA-069221DF6A1A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeCompileUnit
// Interface: _CodeCompileUnit
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F20C263-AF67-380F-A482-9A21F7599748}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceCollection
// Interface: _CodeNamespaceCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeNamespaceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5E54F16-ADE3-3B5D-8B05-1F9803557905}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDirectiveCollection
// Interface: _CodeDirectiveCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDirectiveCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEFBDD27-4904-3E90-ACFC-624164CB45DD}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeConditionStatement
// Interface: _CodeConditionStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeConditionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {69904B31-5FB5-39BF-83B0-5DDFA1F26D71}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeConstructor
// Interface: _CodeConstructor
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5A33C771-806E-337D-AE1F-66B523FC49BF}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMemberMethod
// Interface: _CodeMemberMethod
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMemberMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95C2EE26-4247-3DDC-8056-97353F10DE8F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDefaultValueExpression
// Interface: _CodeDefaultValueExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDefaultValueExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EA9E1DD2-EF9A-3570-AE1A-2F625F594C3B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDelegateCreateExpression
// Interface: _CodeDelegateCreateExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDelegateCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D14E12C1-E1D1-3B74-A3AF-021A5A268FBE}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDelegateInvokeExpression
// Interface: _CodeDelegateInvokeExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDelegateInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F6C3482-8900-36EA-B621-943534E82C73}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeDirectionExpression
// Interface: _CodeDirectionExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeDirectionExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11EDAF3B-144E-32C8-8BE0-81D40A950656}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeEntryPointMethod
// Interface: _CodeEntryPointMethod
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeEntryPointMethod
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7CD4EF19-27EB-399E-8ED2-C6647A99C03E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeExpressionStatement
// Interface: _CodeExpressionStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeExpressionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CEA240AF-60C5-3C69-9DA1-DA3F9A6D7B3C}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeFieldReferenceExpression
// Interface: _CodeFieldReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeFieldReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82D57B2B-C639-32A0-89B4-62A0C29DD64E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeGotoStatement
// Interface: _CodeGotoStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeGotoStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8F1BAED9-52EC-3545-9CF0-6ED71A76A5CA}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeIndexerExpression
// Interface: _CodeIndexerExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeIndexerExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C92C323F-8601-34D4-A2D6-F5E2653DB456}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeIterationStatement
// Interface: _CodeIterationStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeIterationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B16F7137-C0E7-3ECF-9652-FB1EA947E44E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeLabeledStatement
// Interface: _CodeLabeledStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeLabeledStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {56699CCA-FD8D-3AD2-9643-149BAD87FD60}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeLinePragma
// Interface: _CodeLinePragma
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeLinePragma
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1B52DED6-92F3-3B4F-851C-AB1F647582A3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMemberEvent
// Interface: _CodeMemberEvent
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMemberEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E1A7EA9F-5D43-3FA9-AFBC-9A2BFDA84B65}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReferenceCollection
// Interface: _CodeTypeReferenceCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeReferenceCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {68A04561-D0A0-3EEB-B904-462DC4EB5531}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMemberField
// Interface: _CodeMemberField
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMemberField
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EEF50D17-7AA6-3E14-96C6-DD90FE5BAA1E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeParameterDeclarationExpressionCollection
// Interface: _CodeParameterDeclarationExpressionCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeParameterDeclarationExpressionCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05192769-7D6A-3C8C-94C2-DFA668F61088}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeParameterCollection
// Interface: _CodeTypeParameterCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeParameterCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E814F1F-C349-3766-B55D-87C9B0232B20}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMemberProperty
// Interface: _CodeMemberProperty
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMemberProperty
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {802E2ACC-A7F8-3CA9-9114-F49998BEBE6E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMethodInvokeExpression
// Interface: _CodeMethodInvokeExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMethodInvokeExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFE1F142-85CF-3353-8512-EE73775E9C4C}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMethodReferenceExpression
// Interface: _CodeMethodReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMethodReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CBDF02F4-A9F4-33C0-8B24-275008890DCB}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeMethodReturnStatement
// Interface: _CodeMethodReturnStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeMethodReturnStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {851D821B-1E0C-3E91-832D-BA593523F566}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeNamespace
// Interface: _CodeNamespace
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeNamespace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {31ED1DCB-C007-3F96-8809-4D5E3540A7C1}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDeclarationCollection
// Interface: _CodeTypeDeclarationCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeDeclarationCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE0ECED3-5F0D-310A-B352-7D1ADF28F8EC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceImportCollection
// Interface: _CodeNamespaceImportCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeNamespaceImportCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C545457-76D7-3C56-B277-6A9E86D1046F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeNamespaceImport
// Interface: _CodeNamespaceImport
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeNamespaceImport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {34418787-726B-3E74-AEED-C01397FC707D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeObjectCreateExpression
// Interface: _CodeObjectCreateExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeObjectCreateExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CFE5E5E9-745F-348B-A7E6-38A46D1A20E0}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeParameterDeclarationExpression
// Interface: _CodeParameterDeclarationExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeParameterDeclarationExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE96565B-2B1A-33C6-BA07-B63158F1C8C4}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodePrimitiveExpression
// Interface: _CodePrimitiveExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodePrimitiveExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {175BB49A-4CBE-38B3-8C6C-1B0145EDABB7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodePropertyReferenceExpression
// Interface: _CodePropertyReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodePropertyReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F8D64802-F9B7-3095-A641-D31E6E9F87B1}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodePropertySetValueReferenceExpression
// Interface: _CodePropertySetValueReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodePropertySetValueReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2EE13FA1-8A02-3573-9AC9-4FEBD2CEAB45}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeRegionDirective
// Interface: _CodeRegionDirective
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeRegionDirective
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26AE5CC6-CCFD-3906-8B68-16E5EEFABB10}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeRemoveEventStatement
// Interface: _CodeRemoveEventStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeRemoveEventStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {853BC437-CA6E-375D-BCBB-818E917D9691}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetCompileUnit
// Interface: _CodeSnippetCompileUnit
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeSnippetCompileUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C7D34CF6-CF82-38B0-BF67-EB36DA63AE6E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetExpression
// Interface: _CodeSnippetExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeSnippetExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9F3E3CD1-8082-31E9-851C-3E177E56A87B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetStatement
// Interface: _CodeSnippetStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeSnippetStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B4B00613-C48B-3FA9-B8F6-A527EC6F21C3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeSnippetTypeMember
// Interface: _CodeSnippetTypeMember
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeSnippetTypeMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {575BF8D0-7A9D-39EB-81F9-AA2BEBA890FA}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeThisReferenceExpression
// Interface: _CodeThisReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeThisReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B4A1A6B-8E65-355D-B93A-E6AB753B2401}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeThrowExceptionStatement
// Interface: _CodeThrowExceptionStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeThrowExceptionStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12350E95-6F4E-30F0-9343-72F1C64380A0}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTryCatchFinallyStatement
// Interface: _CodeTryCatchFinallyStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTryCatchFinallyStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8FD0F76A-29BF-3982-8335-C9B44ABF31C3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeConstructor
// Interface: _CodeTypeConstructor
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeConstructor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {261AD877-0F22-33DE-9A3A-31F5DA424B30}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDeclaration
// Interface: _CodeTypeDeclaration
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeDeclaration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7AA363E1-FA53-31EB-BE4A-1EB4838264F3}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeMemberCollection
// Interface: _CodeTypeMemberCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeMemberCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F943231E-6192-33A0-9CA3-D6ED0E4F323D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeDelegate
// Interface: _CodeTypeDelegate
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeDelegate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {455090AB-5C44-3F4F-8EED-CCC90A3112B5}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeOfExpression
// Interface: _CodeTypeOfExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeOfExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {12CBCE8E-75FF-312F-81B9-7FBC6212090B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeParameter
// Interface: _CodeTypeParameter
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeParameter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B6ED2127-296F-3B31-AEB5-E2101E98D746}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeTypeReferenceExpression
// Interface: _CodeTypeReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeTypeReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {726BB04D-2C4C-3E3D-A01A-31448DB063DD}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeVariableDeclarationStatement
// Interface: _CodeVariableDeclarationStatement
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeVariableDeclarationStatement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4192A87C-5C57-3879-8624-AF5CA2ED9EB2}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_CodeVariableReferenceExpression
// Interface: _CodeVariableReferenceExpression
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CodeVariableReferenceExpression
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54B54936-A71C-3A45-B982-2C484E7BCF86}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Component
// Interface: _Component
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {06565C0F-C465-37DE-896F-9864BC0BFC96}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_AttributeCollection
// Interface: _AttributeCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _AttributeCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6F971E04-B06A-3DD0-B6F5-622826693454}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PropertyDescriptor
// Interface: _PropertyDescriptor
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PropertyDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FE5060F8-212F-3A4F-8FA8-DB2E14588C49}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B86E59F2-F1E2-389D-B5F1-C55307C8106E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IComponentDispT<T>::get_Site(System_tlb::ISite** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Site"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::ISite**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::ISitePtr __fastcall
IComponentDispT<T>::get_Site(void)
{
  System_tlb::ISitePtr pRetVal;
  this->get_Site(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IComponentDispT<T>::_set_Site(System_tlb::ISite* pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Site"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::ISite*)pRetVal /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentDispT<T>::add_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_Disposed"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentDispT<T>::remove_Disposed(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_Disposed"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISite
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C4E1006A-9D98-3E96-A07E-921725135C28}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISiteDispT<T>::get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("component"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IComponent**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IComponentPtr __fastcall
ISiteDispT<T>::get_component(void)
{
  System_tlb::IComponentPtr pRetVal;
  this->get_component(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISiteDispT<T>::get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IContainer**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IContainerPtr __fastcall
ISiteDispT<T>::get_Container(void)
{
  System_tlb::IContainerPtr pRetVal;
  this->get_Container(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISiteDispT<T>::get_DesignMode(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISiteDispT<T>::get_DesignMode(void)
{
  VARIANT_BOOL pRetVal;
  this->get_DesignMode((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISiteDispT<T>::get_name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISiteDispT<T>::get_name(void)
{
  BSTR pRetVal;
  this->get_name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISiteDispT<T>::set_name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61D9C50C-4AAD-3539-AF82-4F36C19D77C8}
// *********************************************************************//
template <class T> HRESULT __fastcall
IContainerDispT<T>::Add(System_tlb::IComponent* component/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContainerDispT<T>::Add_2(System_tlb::IComponent* component/*[in]*/, BSTR name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add_2"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  _args[2] = name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContainerDispT<T>::get_Components(System_tlb::_ComponentCollection** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Components"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_ComponentCollection**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::_ComponentCollectionPtr __fastcall
IContainerDispT<T>::get_Components(void)
{
  System_tlb::_ComponentCollectionPtr pRetVal;
  this->get_Components(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IContainerDispT<T>::Remove(System_tlb::IComponent* component/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ComponentCollection
// Interface: _ComponentCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {42F00C62-F454-3A38-AF9E-35D4E2BDFDAC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_EventDescriptor
// Interface: _EventDescriptor
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _EventDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {95B6A563-4A39-37A2-91D7-04B8ECDD1B66}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_EventDescriptorCollection
// Interface: _EventDescriptorCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _EventDescriptorCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C933253-83F2-35B6-961A-0780FF1BAF7C}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MemberDescriptor
// Interface: _MemberDescriptor
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MemberDescriptor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F55EFA91-812E-3C6E-998F-3598E93FB8A7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MarshalByValueComponent
// Interface: _MarshalByValueComponent
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MarshalByValueComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35F38044-2017-3E05-BA83-1B87CC0D49C7}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDesignerDispT<T>::get_component(System_tlb::IComponent** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("component"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IComponent**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IComponentPtr __fastcall
IDesignerDispT<T>::get_component(void)
{
  System_tlb::IComponentPtr pRetVal;
  this->get_component(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerDispT<T>::get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verbs"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_DesignerVerbCollection**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::_DesignerVerbCollectionPtr __fastcall
IDesignerDispT<T>::get_Verbs(void)
{
  System_tlb::_DesignerVerbCollectionPtr pRetVal;
  this->get_Verbs(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerDispT<T>::DoDefaultAction()
{
  _TDispID _dispid(*this, OLETEXT("DoDefaultAction"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDesignerDispT<T>::Initialize(System_tlb::IComponent* component/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Initialize"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IDesignerHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_Loading(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loading"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDesignerHostDispT<T>::get_Loading(void)
{
  VARIANT_BOOL pRetVal;
  this->get_Loading((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_InTransaction(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InTransaction"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDesignerHostDispT<T>::get_InTransaction(void)
{
  VARIANT_BOOL pRetVal;
  this->get_InTransaction((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_Container(System_tlb::IContainer** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IContainer**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IContainerPtr __fastcall
IDesignerHostDispT<T>::get_Container(void)
{
  System_tlb::IContainerPtr pRetVal;
  this->get_Container(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_RootComponent(System_tlb::IComponent** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RootComponent"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IComponent**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::IComponentPtr __fastcall
IDesignerHostDispT<T>::get_RootComponent(void)
{
  System_tlb::IComponentPtr pRetVal;
  this->get_RootComponent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_RootComponentClassName(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RootComponentClassName"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDesignerHostDispT<T>::get_RootComponentClassName(void)
{
  BSTR pRetVal;
  this->get_RootComponentClassName((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::get_TransactionDescription(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransactionDescription"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDesignerHostDispT<T>::get_TransactionDescription(void)
{
  BSTR pRetVal;
  this->get_TransactionDescription((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_Activated"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_Activated(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_Activated"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_Deactivated"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_Deactivated(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_Deactivated"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_LoadComplete"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_LoadComplete(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_LoadComplete"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_TransactionClosed"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerTransactionCloseEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_TransactionClosed(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_TransactionClosed"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerTransactionCloseEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_TransactionClosing"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerTransactionCloseEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_TransactionClosing(System_tlb::_DesignerTransactionCloseEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_TransactionClosing"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerTransactionCloseEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_TransactionOpened"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_TransactionOpened(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_TransactionOpened"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::add_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_TransactionOpening"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::remove_TransactionOpening(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_TransactionOpening"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                       System_tlb::IComponent** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateComponent"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)componentClass /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IComponent**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::IComponent* __fastcall
IDesignerHostDispT<T>::CreateComponent(Mscorlib_tlb::_Type* componentClass/*[in]*/)
{
  System_tlb::IComponent* pRetVal;
  this->CreateComponent(componentClass, (System_tlb::IComponent**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                         BSTR name/*[in]*/, 
                                         System_tlb::IComponent** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateComponent_2"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)componentClass /*[VT_USERDEFINED:1]*/;
  _args[2] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IComponent**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::IComponent* __fastcall
IDesignerHostDispT<T>::CreateComponent_2(Mscorlib_tlb::_Type* componentClass/*[in]*/, 
                                         BSTR name/*[in]*/)
{
  System_tlb::IComponent* pRetVal;
  this->CreateComponent_2(componentClass, name, (System_tlb::IComponent**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::CreateTransaction(LPUNKNOWN* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateTransaction"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IDesignerHostDispT<T>::CreateTransaction(void)
{
  LPUNKNOWN pRetVal;
  this->CreateTransaction((LPUNKNOWN*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::CreateTransaction_2(BSTR description/*[in]*/, 
                                           LPUNKNOWN* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateTransaction_2"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<1> _args;
  _args[1] = description /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IDesignerHostDispT<T>::CreateTransaction_2(BSTR description/*[in]*/)
{
  LPUNKNOWN pRetVal;
  this->CreateTransaction_2(description, (LPUNKNOWN*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::DestroyComponent(System_tlb::IComponent* component/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DestroyComponent"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::GetDesigner(System_tlb::IComponent* component/*[in]*/, 
                                   System_tlb::IDesigner** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDesigner"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::IDesigner**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::IDesigner* __fastcall
IDesignerHostDispT<T>::GetDesigner(System_tlb::IComponent* component/*[in]*/)
{
  System_tlb::IDesigner* pRetVal;
  this->GetDesigner(component, (System_tlb::IDesigner**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDesignerHostDispT<T>::GetType(BSTR typeName/*[in]*/, Mscorlib_tlb::_Type** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetType"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<1> _args;
  _args[1] = typeName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPUNKNOWN*)(Mscorlib_tlb::_Type**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscorlib_tlb::_Type* __fastcall
IDesignerHostDispT<T>::GetType(BSTR typeName/*[in]*/)
{
  Mscorlib_tlb::_Type* pRetVal;
  this->GetType(typeName, (Mscorlib_tlb::_Type**)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// SmartIntf: TCOM_CommandID
// Interface: _CommandID
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _CommandID
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC50598B-2406-33D2-BA9A-CFBEA52BC05A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentChangedEventArgs
// Interface: _ComponentChangedEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentChangedEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A8FEF1C6-D434-3686-A4DE-B68E8EABB509}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentChangedEventHandler
// Interface: _ComponentChangedEventHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentChangedEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0451C390-1F90-341D-9278-B9FF2636D67D}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentChangingEventArgs
// Interface: _ComponentChangingEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentChangingEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B78CBAA3-37DF-31C9-ABD2-CDCB1A7FBA9F}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentChangingEventHandler
// Interface: _ComponentChangingEventHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentChangingEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7F8C2DA3-D337-334F-92E9-87BE9BDC6070}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentEventArgs
// Interface: _ComponentEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {438E8DCF-6875-305F-8CA5-40DBB15782A6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentEventHandler
// Interface: _ComponentEventHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {290B355D-80D3-3AFA-96AB-B4D395729374}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentRenameEventArgs
// Interface: _ComponentRenameEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentRenameEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DA5D7739-9522-3E28-9AB7-7C2D7D27C63A}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_ComponentRenameEventHandler
// Interface: _ComponentRenameEventHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ComponentRenameEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA2DF049-DA87-3BD1-97B0-7904B59ADF7E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DesignerTransactionCloseEventArgs
// Interface: _DesignerTransactionCloseEventArgs
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DesignerTransactionCloseEventArgs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3924A637-C2C4-3558-945F-279B5AC39ED9}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DesignerTransactionCloseEventHandler
// Interface: _DesignerTransactionCloseEventHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DesignerTransactionCloseEventHandler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4543D155-EE6A-3529-BC8D-CF0E866B6B0B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DesignerVerb
// Interface: _DesignerVerb
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DesignerVerb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7C41B90E-52FB-3E54-8B03-EBE0BF172C84}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_MenuCommand
// Interface: _MenuCommand
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MenuCommand
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1FF238CE-6190-3750-A34F-05F02B7315A6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DesignerVerbCollection
// Interface: _DesignerVerbCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DesignerVerbCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC3BDDA4-25B8-3321-A1C0-7C37BBF2DDED}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IComponentChangeService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentAdded"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentAdded(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentAdded"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentAdding"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentAdding(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentAdding"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentChanged"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentChangedEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentChanged(System_tlb::_ComponentChangedEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentChanged"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentChangedEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentChanging"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentChangingEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentChanging(System_tlb::_ComponentChangingEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentChanging"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentChangingEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentRemoved"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentRemoved(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentRemoved"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentRemoving"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentRemoving(System_tlb::_ComponentEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentRemoving"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::add_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_ComponentRename"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentRenameEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::remove_ComponentRename(System_tlb::_ComponentRenameEventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_ComponentRename"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_ComponentRenameEventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::OnComponentChanged(VARIANT component/*[in]*/, 
                                                    System_tlb::_MemberDescriptor* member/*[in]*/, 
                                                    VARIANT oldValue/*[in]*/, 
                                                    VARIANT newValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnComponentChanged"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<4> _args;
  _args[1] = component /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_MemberDescriptor*)member /*[VT_USERDEFINED:1]*/;
  _args[3] = oldValue /*[VT_VARIANT:0]*/;
  _args[4] = newValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComponentChangeServiceDispT<T>::OnComponentChanging(VARIANT component/*[in]*/, 
                                                     System_tlb::_MemberDescriptor* member/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnComponentChanging"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<2> _args;
  _args[1] = component /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_MemberDescriptor*)member /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IServiceContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BA96B42-7FDD-3223-BF52-7FE677B92815}
// *********************************************************************//
template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::AddService(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                      VARIANT serviceInstance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddService"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  _args[2] = serviceInstance /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::AddService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                        VARIANT serviceInstance/*[in]*/, 
                                        VARIANT_BOOL promote/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddService_2"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  _args[2] = serviceInstance /*[VT_VARIANT:0]*/;
  _args[3] = promote /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::AddService_3(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                        System_tlb::_ServiceCreatorCallback* callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddService_3"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_ServiceCreatorCallback*)callback /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::AddService_4(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                        System_tlb::_ServiceCreatorCallback* callback/*[in]*/, 
                                        VARIANT_BOOL promote/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddService_4"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_ServiceCreatorCallback*)callback /*[VT_USERDEFINED:1]*/;
  _args[3] = promote /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::RemoveService(Mscorlib_tlb::_Type* serviceType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveService"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServiceContainerDispT<T>::RemoveService_2(Mscorlib_tlb::_Type* serviceType/*[in]*/, 
                                           VARIANT_BOOL promote/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveService_2"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Mscorlib_tlb::_Type*)serviceType /*[VT_USERDEFINED:1]*/;
  _args[2] = promote /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IEventBindingService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                                     System_tlb::_EventDescriptor* e/*[in]*/, 
                                                     BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateUniqueMethodName"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_EventDescriptor*)e /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventBindingServiceDispT<T>::CreateUniqueMethodName(System_tlb::IComponent* component/*[in]*/, 
                                                     System_tlb::_EventDescriptor* e/*[in]*/)
{
  BSTR pRetVal;
  this->CreateUniqueMethodName(component, e, (BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/, 
                                                   Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCompatibleMethods"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_EventDescriptor*)e /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscorlib_tlb::ICollection**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscorlib_tlb::ICollection* __fastcall
IEventBindingServiceDispT<T>::GetCompatibleMethods(System_tlb::_EventDescriptor* e/*[in]*/)
{
  Mscorlib_tlb::ICollection* pRetVal;
  this->GetCompatibleMethods(e, (Mscorlib_tlb::ICollection**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/, 
                                       System_tlb::_EventDescriptor** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetEvent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_PropertyDescriptor*)property /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_EventDescriptor**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::_EventDescriptor* __fastcall
IEventBindingServiceDispT<T>::GetEvent(System_tlb::_PropertyDescriptor* property/*[in]*/)
{
  System_tlb::_EventDescriptor* pRetVal;
  this->GetEvent(property, (System_tlb::_EventDescriptor**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/
                                                 , LPUNKNOWN* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetEventProperties"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_EventDescriptorCollection*)events /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IEventBindingServiceDispT<T>::GetEventProperties(System_tlb::_EventDescriptorCollection* events/*[in]*/)
{
  LPUNKNOWN pRetVal;
  this->GetEventProperties(events, (LPUNKNOWN*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/, 
                                               System_tlb::_PropertyDescriptor** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetEventProperty"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_EventDescriptor*)e /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_PropertyDescriptor**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::_PropertyDescriptor* __fastcall
IEventBindingServiceDispT<T>::GetEventProperty(System_tlb::_EventDescriptor* e/*[in]*/)
{
  System_tlb::_PropertyDescriptor* pRetVal;
  this->GetEventProperty(e, (System_tlb::_PropertyDescriptor**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::ShowCode(VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCode"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IEventBindingServiceDispT<T>::ShowCode(void)
{
  VARIANT_BOOL pRetVal;
  this->ShowCode((VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::ShowCode_2(long lineNumber/*[in]*/, 
                                         VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCode_2"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = lineNumber /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IEventBindingServiceDispT<T>::ShowCode_2(long lineNumber/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->ShowCode_2(lineNumber, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventBindingServiceDispT<T>::ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                         System_tlb::_EventDescriptor* e/*[in]*/, 
                                         VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCode_3"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(System_tlb::IComponent*)component /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(System_tlb::_EventDescriptor*)e /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IEventBindingServiceDispT<T>::ShowCode_3(System_tlb::IComponent* component/*[in]*/, 
                                         System_tlb::_EventDescriptor* e/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->ShowCode_3(component, e, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// DispIntf:  IMenuCommandService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DF651C5D-783E-3789-901F-A962B7587E69}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::get_Verbs(System_tlb::_DesignerVerbCollection** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verbs"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_DesignerVerbCollection**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> System_tlb::_DesignerVerbCollectionPtr __fastcall
IMenuCommandServiceDispT<T>::get_Verbs(void)
{
  System_tlb::_DesignerVerbCollectionPtr pRetVal;
  this->get_Verbs(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::AddCommand(System_tlb::_MenuCommand* command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCommand"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_MenuCommand*)command /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::AddVerb(System_tlb::_DesignerVerb* verb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddVerb"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerVerb*)verb /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::FindCommand(System_tlb::_CommandID* CommandID/*[in]*/, 
                                         System_tlb::_MenuCommand** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindCommand"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_CommandID*)CommandID /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(System_tlb::_MenuCommand**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> System_tlb::_MenuCommand* __fastcall
IMenuCommandServiceDispT<T>::FindCommand(System_tlb::_CommandID* CommandID/*[in]*/)
{
  System_tlb::_MenuCommand* pRetVal;
  this->FindCommand(CommandID, (System_tlb::_MenuCommand**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/, 
                                          VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GlobalInvoke"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_CommandID*)CommandID /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMenuCommandServiceDispT<T>::GlobalInvoke(System_tlb::_CommandID* CommandID/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->GlobalInvoke(CommandID, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::RemoveCommand(System_tlb::_MenuCommand* command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveCommand"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_MenuCommand*)command /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::RemoveVerb(System_tlb::_DesignerVerb* verb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveVerb"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_DesignerVerb*)verb /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMenuCommandServiceDispT<T>::ShowContextMenu(System_tlb::_CommandID* menuID/*[in]*/, long x/*[in]*/
                                             , long y/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContextMenu"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(System_tlb::_CommandID*)menuID /*[VT_USERDEFINED:1]*/;
  _args[2] = x /*[VT_I4:0]*/;
  _args[3] = y /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRootDesigner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRootDesignerDispT<T>::get_SupportedTechnologies(LPSAFEARRAY* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SupportedTechnologies"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
IRootDesignerDispT<T>::get_SupportedTechnologies(void)
{
  LPSAFEARRAY pRetVal;
  this->get_SupportedTechnologies((LPSAFEARRAY*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRootDesignerDispT<T>::GetView(System_tlb::ViewTechnology technology/*[in]*/, 
                               VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetView"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)technology /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IRootDesignerDispT<T>::GetView(System_tlb::ViewTechnology technology/*[in]*/)
{
  VARIANT pRetVal;
  this->GetView(technology, (VARIANT*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// DispIntf:  ISelectionService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {297A65BE-5080-3F7F-AD19-B0D05D6F2327}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::get_PrimarySelection(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrimarySelection"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISelectionServiceDispT<T>::get_PrimarySelection(void)
{
  VARIANT pRetVal;
  this->get_PrimarySelection((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::get_SelectionCount(long* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionCount"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISelectionServiceDispT<T>::get_SelectionCount(void)
{
  long pRetVal;
  this->get_SelectionCount((long*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::add_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_SelectionChanged"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::remove_SelectionChanged(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_SelectionChanged"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::add_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add_SelectionChanging"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::remove_SelectionChanging(Mscorlib_tlb::_EventHandler* value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove_SelectionChanging"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::_EventHandler*)value /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::GetComponentSelected(VARIANT component/*[in]*/, 
                                                VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetComponentSelected"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = component /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISelectionServiceDispT<T>::GetComponentSelected(VARIANT component/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->GetComponentSelected(component, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::GetSelectedComponents(Mscorlib_tlb::ICollection** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelectedComponents"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscorlib_tlb::ICollection**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscorlib_tlb::ICollection* __fastcall
ISelectionServiceDispT<T>::GetSelectedComponents(void)
{
  Mscorlib_tlb::ICollection* pRetVal;
  this->GetSelectedComponents((Mscorlib_tlb::ICollection**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::SetSelectedComponents(Mscorlib_tlb::ICollection* Components/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSelectedComponents"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::ICollection*)Components /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISelectionServiceDispT<T>::SetSelectedComponents_2(Mscorlib_tlb::ICollection* Components/*[in]*/, 
                                                   System_tlb::SelectionTypes selectionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSelectedComponents_2"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Mscorlib_tlb::ICollection*)Components /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)selectionType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ServiceCreatorCallback
// Interface: _ServiceCreatorCallback
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ServiceCreatorCallback
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE380BEC-79F2-3876-B510-FA2FE43B7EB7}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_DesignerLoader
// Interface: _DesignerLoader
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DesignerLoader
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {43BE964C-1B4A-3D1F-9D94-8185A1E6CB7B}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_PerformanceCounterManager
// Interface: _PerformanceCounterManager
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _PerformanceCounterManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A9809E7D-42F8-3284-82CF-AB5F863A29AA}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_WebHeaderCollection
// Interface: _WebHeaderCollection
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _WebHeaderCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B97E84F2-FAB2-340D-8D49-2AC85CF5C0EC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_WebClient
// Interface: _WebClient
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _WebClient
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85B4A627-7552-3AA6-8A1C-A213C5788FEC}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_StandardOleMarshalObject
// Interface: _StandardOleMarshalObject
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _StandardOleMarshalObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {05F3D6C7-D4D1-37EB-AC35-63347B838A23}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDomProvider
// Interface: TCOM_CodeDomProvider
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDomProvider, _CodeDomProvider, &CLSID_CodeDomProvider, &IID__CodeDomProvider> CoCodeDomProvider;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TypeConverter
// Interface: TCOM_TypeConverter
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_TypeConverter, _TypeConverter, &CLSID_TypeConverter, &IID__TypeConverter> CoTypeConverter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeMember
// Interface: TCOM_CodeTypeMember
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeMember, _CodeTypeMember, &CLSID_CodeTypeMember, &IID__CodeTypeMember> CoCodeTypeMember;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeArgumentReferenceExpression
// Interface: TCOM_CodeArgumentReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeArgumentReferenceExpression, _CodeArgumentReferenceExpression, &CLSID_CodeArgumentReferenceExpression, &IID__CodeArgumentReferenceExpression> CoCodeArgumentReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeExpression
// Interface: TCOM_CodeExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeExpression, _CodeExpression, &CLSID_CodeExpression, &IID__CodeExpression> CoCodeExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeArrayCreateExpression
// Interface: TCOM_CodeArrayCreateExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeArrayCreateExpression, _CodeArrayCreateExpression, &CLSID_CodeArrayCreateExpression, &IID__CodeArrayCreateExpression> CoCodeArrayCreateExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeReference
// Interface: TCOM_CodeTypeReference
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeReference, _CodeTypeReference, &CLSID_CodeTypeReference, &IID__CodeTypeReference> CoCodeTypeReference;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeExpressionCollection
// Interface: TCOM_CodeExpressionCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeExpressionCollection, _CodeExpressionCollection, &CLSID_CodeExpressionCollection, &IID__CodeExpressionCollection> CoCodeExpressionCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeArrayIndexerExpression
// Interface: TCOM_CodeArrayIndexerExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeArrayIndexerExpression, _CodeArrayIndexerExpression, &CLSID_CodeArrayIndexerExpression, &IID__CodeArrayIndexerExpression> CoCodeArrayIndexerExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAssignStatement
// Interface: TCOM_CodeAssignStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAssignStatement, _CodeAssignStatement, &CLSID_CodeAssignStatement, &IID__CodeAssignStatement> CoCodeAssignStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeStatement
// Interface: TCOM_CodeStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeStatement, _CodeStatement, &CLSID_CodeStatement, &IID__CodeStatement> CoCodeStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAttachEventStatement
// Interface: TCOM_CodeAttachEventStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAttachEventStatement, _CodeAttachEventStatement, &CLSID_CodeAttachEventStatement, &IID__CodeAttachEventStatement> CoCodeAttachEventStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeEventReferenceExpression
// Interface: TCOM_CodeEventReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeEventReferenceExpression, _CodeEventReferenceExpression, &CLSID_CodeEventReferenceExpression, &IID__CodeEventReferenceExpression> CoCodeEventReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAttributeArgument
// Interface: TCOM_CodeAttributeArgument
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAttributeArgument, _CodeAttributeArgument, &CLSID_CodeAttributeArgument, &IID__CodeAttributeArgument> CoCodeAttributeArgument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAttributeArgumentCollection
// Interface: TCOM_CodeAttributeArgumentCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAttributeArgumentCollection, _CodeAttributeArgumentCollection, &CLSID_CodeAttributeArgumentCollection, &IID__CodeAttributeArgumentCollection> CoCodeAttributeArgumentCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAttributeDeclaration
// Interface: TCOM_CodeAttributeDeclaration
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAttributeDeclaration, _CodeAttributeDeclaration, &CLSID_CodeAttributeDeclaration, &IID__CodeAttributeDeclaration> CoCodeAttributeDeclaration;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeAttributeDeclarationCollection
// Interface: TCOM_CodeAttributeDeclarationCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeAttributeDeclarationCollection, _CodeAttributeDeclarationCollection, &CLSID_CodeAttributeDeclarationCollection, &IID__CodeAttributeDeclarationCollection> CoCodeAttributeDeclarationCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeBaseReferenceExpression
// Interface: TCOM_CodeBaseReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeBaseReferenceExpression, _CodeBaseReferenceExpression, &CLSID_CodeBaseReferenceExpression, &IID__CodeBaseReferenceExpression> CoCodeBaseReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeBinaryOperatorExpression
// Interface: TCOM_CodeBinaryOperatorExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeBinaryOperatorExpression, _CodeBinaryOperatorExpression, &CLSID_CodeBinaryOperatorExpression, &IID__CodeBinaryOperatorExpression> CoCodeBinaryOperatorExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCastExpression
// Interface: TCOM_CodeCastExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCastExpression, _CodeCastExpression, &CLSID_CodeCastExpression, &IID__CodeCastExpression> CoCodeCastExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCatchClause
// Interface: TCOM_CodeCatchClause
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCatchClause, _CodeCatchClause, &CLSID_CodeCatchClause, &IID__CodeCatchClause> CoCodeCatchClause;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeStatementCollection
// Interface: TCOM_CodeStatementCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeStatementCollection, _CodeStatementCollection, &CLSID_CodeStatementCollection, &IID__CodeStatementCollection> CoCodeStatementCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCatchClauseCollection
// Interface: TCOM_CodeCatchClauseCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCatchClauseCollection, _CodeCatchClauseCollection, &CLSID_CodeCatchClauseCollection, &IID__CodeCatchClauseCollection> CoCodeCatchClauseCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeChecksumPragma
// Interface: TCOM_CodeChecksumPragma
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeChecksumPragma, _CodeChecksumPragma, &CLSID_CodeChecksumPragma, &IID__CodeChecksumPragma> CoCodeChecksumPragma;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDirective
// Interface: TCOM_CodeDirective
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDirective, _CodeDirective, &CLSID_CodeDirective, &IID__CodeDirective> CoCodeDirective;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeComment
// Interface: TCOM_CodeComment
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeComment, _CodeComment, &CLSID_CodeComment, &IID__CodeComment> CoCodeComment;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeObject
// Interface: TCOM_CodeObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeObject, _CodeObject, &CLSID_CodeObject, &IID__CodeObject> CoCodeObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCommentStatement
// Interface: TCOM_CodeCommentStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCommentStatement, _CodeCommentStatement, &CLSID_CodeCommentStatement, &IID__CodeCommentStatement> CoCodeCommentStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCommentStatementCollection
// Interface: TCOM_CodeCommentStatementCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCommentStatementCollection, _CodeCommentStatementCollection, &CLSID_CodeCommentStatementCollection, &IID__CodeCommentStatementCollection> CoCodeCommentStatementCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeCompileUnit
// Interface: TCOM_CodeCompileUnit
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeCompileUnit, _CodeCompileUnit, &CLSID_CodeCompileUnit, &IID__CodeCompileUnit> CoCodeCompileUnit;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeNamespaceCollection
// Interface: TCOM_CodeNamespaceCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeNamespaceCollection, _CodeNamespaceCollection, &CLSID_CodeNamespaceCollection, &IID__CodeNamespaceCollection> CoCodeNamespaceCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDirectiveCollection
// Interface: TCOM_CodeDirectiveCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDirectiveCollection, _CodeDirectiveCollection, &CLSID_CodeDirectiveCollection, &IID__CodeDirectiveCollection> CoCodeDirectiveCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeConditionStatement
// Interface: TCOM_CodeConditionStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeConditionStatement, _CodeConditionStatement, &CLSID_CodeConditionStatement, &IID__CodeConditionStatement> CoCodeConditionStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeConstructor
// Interface: TCOM_CodeConstructor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeConstructor, _CodeConstructor, &CLSID_CodeConstructor, &IID__CodeConstructor> CoCodeConstructor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMemberMethod
// Interface: TCOM_CodeMemberMethod
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMemberMethod, _CodeMemberMethod, &CLSID_CodeMemberMethod, &IID__CodeMemberMethod> CoCodeMemberMethod;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDefaultValueExpression
// Interface: TCOM_CodeDefaultValueExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDefaultValueExpression, _CodeDefaultValueExpression, &CLSID_CodeDefaultValueExpression, &IID__CodeDefaultValueExpression> CoCodeDefaultValueExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDelegateCreateExpression
// Interface: TCOM_CodeDelegateCreateExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDelegateCreateExpression, _CodeDelegateCreateExpression, &CLSID_CodeDelegateCreateExpression, &IID__CodeDelegateCreateExpression> CoCodeDelegateCreateExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDelegateInvokeExpression
// Interface: TCOM_CodeDelegateInvokeExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDelegateInvokeExpression, _CodeDelegateInvokeExpression, &CLSID_CodeDelegateInvokeExpression, &IID__CodeDelegateInvokeExpression> CoCodeDelegateInvokeExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeDirectionExpression
// Interface: TCOM_CodeDirectionExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeDirectionExpression, _CodeDirectionExpression, &CLSID_CodeDirectionExpression, &IID__CodeDirectionExpression> CoCodeDirectionExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeEntryPointMethod
// Interface: TCOM_CodeEntryPointMethod
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeEntryPointMethod, _CodeEntryPointMethod, &CLSID_CodeEntryPointMethod, &IID__CodeEntryPointMethod> CoCodeEntryPointMethod;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeExpressionStatement
// Interface: TCOM_CodeExpressionStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeExpressionStatement, _CodeExpressionStatement, &CLSID_CodeExpressionStatement, &IID__CodeExpressionStatement> CoCodeExpressionStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeFieldReferenceExpression
// Interface: TCOM_CodeFieldReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeFieldReferenceExpression, _CodeFieldReferenceExpression, &CLSID_CodeFieldReferenceExpression, &IID__CodeFieldReferenceExpression> CoCodeFieldReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeGotoStatement
// Interface: TCOM_CodeGotoStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeGotoStatement, _CodeGotoStatement, &CLSID_CodeGotoStatement, &IID__CodeGotoStatement> CoCodeGotoStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeIndexerExpression
// Interface: TCOM_CodeIndexerExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeIndexerExpression, _CodeIndexerExpression, &CLSID_CodeIndexerExpression, &IID__CodeIndexerExpression> CoCodeIndexerExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeIterationStatement
// Interface: TCOM_CodeIterationStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeIterationStatement, _CodeIterationStatement, &CLSID_CodeIterationStatement, &IID__CodeIterationStatement> CoCodeIterationStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeLabeledStatement
// Interface: TCOM_CodeLabeledStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeLabeledStatement, _CodeLabeledStatement, &CLSID_CodeLabeledStatement, &IID__CodeLabeledStatement> CoCodeLabeledStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeLinePragma
// Interface: TCOM_CodeLinePragma
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeLinePragma, _CodeLinePragma, &CLSID_CodeLinePragma, &IID__CodeLinePragma> CoCodeLinePragma;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMemberEvent
// Interface: TCOM_CodeMemberEvent
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMemberEvent, _CodeMemberEvent, &CLSID_CodeMemberEvent, &IID__CodeMemberEvent> CoCodeMemberEvent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeReferenceCollection
// Interface: TCOM_CodeTypeReferenceCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeReferenceCollection, _CodeTypeReferenceCollection, &CLSID_CodeTypeReferenceCollection, &IID__CodeTypeReferenceCollection> CoCodeTypeReferenceCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMemberField
// Interface: TCOM_CodeMemberField
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMemberField, _CodeMemberField, &CLSID_CodeMemberField, &IID__CodeMemberField> CoCodeMemberField;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeParameterDeclarationExpressionCollection
// Interface: TCOM_CodeParameterDeclarationExpressionCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeParameterDeclarationExpressionCollection, _CodeParameterDeclarationExpressionCollection, &CLSID_CodeParameterDeclarationExpressionCollection, &IID__CodeParameterDeclarationExpressionCollection> CoCodeParameterDeclarationExpressionCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeParameterCollection
// Interface: TCOM_CodeTypeParameterCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeParameterCollection, _CodeTypeParameterCollection, &CLSID_CodeTypeParameterCollection, &IID__CodeTypeParameterCollection> CoCodeTypeParameterCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMemberProperty
// Interface: TCOM_CodeMemberProperty
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMemberProperty, _CodeMemberProperty, &CLSID_CodeMemberProperty, &IID__CodeMemberProperty> CoCodeMemberProperty;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMethodInvokeExpression
// Interface: TCOM_CodeMethodInvokeExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMethodInvokeExpression, _CodeMethodInvokeExpression, &CLSID_CodeMethodInvokeExpression, &IID__CodeMethodInvokeExpression> CoCodeMethodInvokeExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMethodReferenceExpression
// Interface: TCOM_CodeMethodReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMethodReferenceExpression, _CodeMethodReferenceExpression, &CLSID_CodeMethodReferenceExpression, &IID__CodeMethodReferenceExpression> CoCodeMethodReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeMethodReturnStatement
// Interface: TCOM_CodeMethodReturnStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeMethodReturnStatement, _CodeMethodReturnStatement, &CLSID_CodeMethodReturnStatement, &IID__CodeMethodReturnStatement> CoCodeMethodReturnStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeNamespace
// Interface: TCOM_CodeNamespace
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeNamespace, _CodeNamespace, &CLSID_CodeNamespace, &IID__CodeNamespace> CoCodeNamespace;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeDeclarationCollection
// Interface: TCOM_CodeTypeDeclarationCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeDeclarationCollection, _CodeTypeDeclarationCollection, &CLSID_CodeTypeDeclarationCollection, &IID__CodeTypeDeclarationCollection> CoCodeTypeDeclarationCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeNamespaceImportCollection
// Interface: TCOM_CodeNamespaceImportCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeNamespaceImportCollection, _CodeNamespaceImportCollection, &CLSID_CodeNamespaceImportCollection, &IID__CodeNamespaceImportCollection> CoCodeNamespaceImportCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeNamespaceImport
// Interface: TCOM_CodeNamespaceImport
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeNamespaceImport, _CodeNamespaceImport, &CLSID_CodeNamespaceImport, &IID__CodeNamespaceImport> CoCodeNamespaceImport;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeObjectCreateExpression
// Interface: TCOM_CodeObjectCreateExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeObjectCreateExpression, _CodeObjectCreateExpression, &CLSID_CodeObjectCreateExpression, &IID__CodeObjectCreateExpression> CoCodeObjectCreateExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeParameterDeclarationExpression
// Interface: TCOM_CodeParameterDeclarationExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeParameterDeclarationExpression, _CodeParameterDeclarationExpression, &CLSID_CodeParameterDeclarationExpression, &IID__CodeParameterDeclarationExpression> CoCodeParameterDeclarationExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodePrimitiveExpression
// Interface: TCOM_CodePrimitiveExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodePrimitiveExpression, _CodePrimitiveExpression, &CLSID_CodePrimitiveExpression, &IID__CodePrimitiveExpression> CoCodePrimitiveExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodePropertyReferenceExpression
// Interface: TCOM_CodePropertyReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodePropertyReferenceExpression, _CodePropertyReferenceExpression, &CLSID_CodePropertyReferenceExpression, &IID__CodePropertyReferenceExpression> CoCodePropertyReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodePropertySetValueReferenceExpression
// Interface: TCOM_CodePropertySetValueReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodePropertySetValueReferenceExpression, _CodePropertySetValueReferenceExpression, &CLSID_CodePropertySetValueReferenceExpression, &IID__CodePropertySetValueReferenceExpression> CoCodePropertySetValueReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeRegionDirective
// Interface: TCOM_CodeRegionDirective
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeRegionDirective, _CodeRegionDirective, &CLSID_CodeRegionDirective, &IID__CodeRegionDirective> CoCodeRegionDirective;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeRemoveEventStatement
// Interface: TCOM_CodeRemoveEventStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeRemoveEventStatement, _CodeRemoveEventStatement, &CLSID_CodeRemoveEventStatement, &IID__CodeRemoveEventStatement> CoCodeRemoveEventStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeSnippetCompileUnit
// Interface: TCOM_CodeSnippetCompileUnit
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeSnippetCompileUnit, _CodeSnippetCompileUnit, &CLSID_CodeSnippetCompileUnit, &IID__CodeSnippetCompileUnit> CoCodeSnippetCompileUnit;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeSnippetExpression
// Interface: TCOM_CodeSnippetExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeSnippetExpression, _CodeSnippetExpression, &CLSID_CodeSnippetExpression, &IID__CodeSnippetExpression> CoCodeSnippetExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeSnippetStatement
// Interface: TCOM_CodeSnippetStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeSnippetStatement, _CodeSnippetStatement, &CLSID_CodeSnippetStatement, &IID__CodeSnippetStatement> CoCodeSnippetStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeSnippetTypeMember
// Interface: TCOM_CodeSnippetTypeMember
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeSnippetTypeMember, _CodeSnippetTypeMember, &CLSID_CodeSnippetTypeMember, &IID__CodeSnippetTypeMember> CoCodeSnippetTypeMember;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeThisReferenceExpression
// Interface: TCOM_CodeThisReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeThisReferenceExpression, _CodeThisReferenceExpression, &CLSID_CodeThisReferenceExpression, &IID__CodeThisReferenceExpression> CoCodeThisReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeThrowExceptionStatement
// Interface: TCOM_CodeThrowExceptionStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeThrowExceptionStatement, _CodeThrowExceptionStatement, &CLSID_CodeThrowExceptionStatement, &IID__CodeThrowExceptionStatement> CoCodeThrowExceptionStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTryCatchFinallyStatement
// Interface: TCOM_CodeTryCatchFinallyStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTryCatchFinallyStatement, _CodeTryCatchFinallyStatement, &CLSID_CodeTryCatchFinallyStatement, &IID__CodeTryCatchFinallyStatement> CoCodeTryCatchFinallyStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeConstructor
// Interface: TCOM_CodeTypeConstructor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeConstructor, _CodeTypeConstructor, &CLSID_CodeTypeConstructor, &IID__CodeTypeConstructor> CoCodeTypeConstructor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeDeclaration
// Interface: TCOM_CodeTypeDeclaration
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeDeclaration, _CodeTypeDeclaration, &CLSID_CodeTypeDeclaration, &IID__CodeTypeDeclaration> CoCodeTypeDeclaration;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeMemberCollection
// Interface: TCOM_CodeTypeMemberCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeMemberCollection, _CodeTypeMemberCollection, &CLSID_CodeTypeMemberCollection, &IID__CodeTypeMemberCollection> CoCodeTypeMemberCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeDelegate
// Interface: TCOM_CodeTypeDelegate
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeDelegate, _CodeTypeDelegate, &CLSID_CodeTypeDelegate, &IID__CodeTypeDelegate> CoCodeTypeDelegate;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeOfExpression
// Interface: TCOM_CodeTypeOfExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeOfExpression, _CodeTypeOfExpression, &CLSID_CodeTypeOfExpression, &IID__CodeTypeOfExpression> CoCodeTypeOfExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeParameter
// Interface: TCOM_CodeTypeParameter
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeParameter, _CodeTypeParameter, &CLSID_CodeTypeParameter, &IID__CodeTypeParameter> CoCodeTypeParameter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeTypeReferenceExpression
// Interface: TCOM_CodeTypeReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeTypeReferenceExpression, _CodeTypeReferenceExpression, &CLSID_CodeTypeReferenceExpression, &IID__CodeTypeReferenceExpression> CoCodeTypeReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeVariableDeclarationStatement
// Interface: TCOM_CodeVariableDeclarationStatement
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeVariableDeclarationStatement, _CodeVariableDeclarationStatement, &CLSID_CodeVariableDeclarationStatement, &IID__CodeVariableDeclarationStatement> CoCodeVariableDeclarationStatement;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeVariableReferenceExpression
// Interface: TCOM_CodeVariableReferenceExpression
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeVariableReferenceExpression, _CodeVariableReferenceExpression, &CLSID_CodeVariableReferenceExpression, &IID__CodeVariableReferenceExpression> CoCodeVariableReferenceExpression;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : component
// Interface: TCOM_Component
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Component, _Component, &CLSID_component, &IID__Component> Cocomponent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AttributeCollection
// Interface: TCOM_AttributeCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_AttributeCollection, _AttributeCollection, &CLSID_AttributeCollection, &IID__AttributeCollection> CoAttributeCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PropertyDescriptor
// Interface: TCOM_PropertyDescriptor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PropertyDescriptor, _PropertyDescriptor, &CLSID_PropertyDescriptor, &IID__PropertyDescriptor> CoPropertyDescriptor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentCollection
// Interface: TCOM_ComponentCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentCollection, _ComponentCollection, &CLSID_ComponentCollection, &IID__ComponentCollection> CoComponentCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventDescriptor
// Interface: TCOM_EventDescriptor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_EventDescriptor, _EventDescriptor, &CLSID_EventDescriptor, &IID__EventDescriptor> CoEventDescriptor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventDescriptorCollection
// Interface: TCOM_EventDescriptorCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_EventDescriptorCollection, _EventDescriptorCollection, &CLSID_EventDescriptorCollection, &IID__EventDescriptorCollection> CoEventDescriptorCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MemberDescriptor
// Interface: TCOM_MemberDescriptor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MemberDescriptor, _MemberDescriptor, &CLSID_MemberDescriptor, &IID__MemberDescriptor> CoMemberDescriptor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MarshalByValueComponent
// Interface: TCOM_MarshalByValueComponent
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MarshalByValueComponent, _MarshalByValueComponent, &CLSID_MarshalByValueComponent, &IID__MarshalByValueComponent> CoMarshalByValueComponent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CommandID
// Interface: TCOM_CommandID
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CommandID, _CommandID, &CLSID_CommandID, &IID__CommandID> CoCommandID;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentChangedEventArgs
// Interface: TCOM_ComponentChangedEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentChangedEventArgs, _ComponentChangedEventArgs, &CLSID_ComponentChangedEventArgs, &IID__ComponentChangedEventArgs> CoComponentChangedEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentChangedEventHandler
// Interface: TCOM_ComponentChangedEventHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentChangedEventHandler, _ComponentChangedEventHandler, &CLSID_ComponentChangedEventHandler, &IID__ComponentChangedEventHandler> CoComponentChangedEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentChangingEventArgs
// Interface: TCOM_ComponentChangingEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentChangingEventArgs, _ComponentChangingEventArgs, &CLSID_ComponentChangingEventArgs, &IID__ComponentChangingEventArgs> CoComponentChangingEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentChangingEventHandler
// Interface: TCOM_ComponentChangingEventHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentChangingEventHandler, _ComponentChangingEventHandler, &CLSID_ComponentChangingEventHandler, &IID__ComponentChangingEventHandler> CoComponentChangingEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentEventArgs
// Interface: TCOM_ComponentEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentEventArgs, _ComponentEventArgs, &CLSID_ComponentEventArgs, &IID__ComponentEventArgs> CoComponentEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentEventHandler
// Interface: TCOM_ComponentEventHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentEventHandler, _ComponentEventHandler, &CLSID_ComponentEventHandler, &IID__ComponentEventHandler> CoComponentEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentRenameEventArgs
// Interface: TCOM_ComponentRenameEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentRenameEventArgs, _ComponentRenameEventArgs, &CLSID_ComponentRenameEventArgs, &IID__ComponentRenameEventArgs> CoComponentRenameEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComponentRenameEventHandler
// Interface: TCOM_ComponentRenameEventHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ComponentRenameEventHandler, _ComponentRenameEventHandler, &CLSID_ComponentRenameEventHandler, &IID__ComponentRenameEventHandler> CoComponentRenameEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignerTransactionCloseEventArgs
// Interface: TCOM_DesignerTransactionCloseEventArgs
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DesignerTransactionCloseEventArgs, _DesignerTransactionCloseEventArgs, &CLSID_DesignerTransactionCloseEventArgs, &IID__DesignerTransactionCloseEventArgs> CoDesignerTransactionCloseEventArgs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignerTransactionCloseEventHandler
// Interface: TCOM_DesignerTransactionCloseEventHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DesignerTransactionCloseEventHandler, _DesignerTransactionCloseEventHandler, &CLSID_DesignerTransactionCloseEventHandler, &IID__DesignerTransactionCloseEventHandler> CoDesignerTransactionCloseEventHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignerVerb
// Interface: TCOM_DesignerVerb
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DesignerVerb, _DesignerVerb, &CLSID_DesignerVerb, &IID__DesignerVerb> CoDesignerVerb;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MenuCommand
// Interface: TCOM_MenuCommand
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_MenuCommand, _MenuCommand, &CLSID_MenuCommand, &IID__MenuCommand> CoMenuCommand;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignerVerbCollection
// Interface: TCOM_DesignerVerbCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DesignerVerbCollection, _DesignerVerbCollection, &CLSID_DesignerVerbCollection, &IID__DesignerVerbCollection> CoDesignerVerbCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ServiceCreatorCallback
// Interface: TCOM_ServiceCreatorCallback
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ServiceCreatorCallback, _ServiceCreatorCallback, &CLSID_ServiceCreatorCallback, &IID__ServiceCreatorCallback> CoServiceCreatorCallback;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DesignerLoader
// Interface: TCOM_DesignerLoader
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DesignerLoader, _DesignerLoader, &CLSID_DesignerLoader, &IID__DesignerLoader> CoDesignerLoader;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PerformanceCounterManager
// Interface: TCOM_PerformanceCounterManager
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PerformanceCounterManager, _PerformanceCounterManager, &CLSID_PerformanceCounterManager, &IID__PerformanceCounterManager> CoPerformanceCounterManager;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebHeaderCollection
// Interface: TCOM_WebHeaderCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_WebHeaderCollection, _WebHeaderCollection, &CLSID_WebHeaderCollection, &IID__WebHeaderCollection> CoWebHeaderCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebClient
// Interface: TCOM_WebClient
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_WebClient, _WebClient, &CLSID_WebClient, &IID__WebClient> CoWebClient;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : StandardOleMarshalObject
// Interface: TCOM_StandardOleMarshalObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_StandardOleMarshalObject, _StandardOleMarshalObject, &CLSID_StandardOleMarshalObject, &IID__StandardOleMarshalObject> CoStandardOleMarshalObject;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace System_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace System_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // System_TLBH
