// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 29.05.2022 15:36:40 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\SysWOW64\oleacc.dll (1)
// LIBID: {1EA4DBF0-3C3B-11CF-810C-00AA00389B71}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v27.0 Borland_Studio_ToolsAPI, (C:\Program Files (x86)\Embarcadero\Studio\21.0\bin\Borland.Studio.ToolsAPI.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   Accessibility_TLBH
#define   Accessibility_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Accessibility_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Accessibility;
extern __declspec (package) const GUID IID_IAccessible;
extern __declspec (package) const GUID IID_IAccessibleHandler;
extern __declspec (package) const GUID IID_IAccIdentity;
extern __declspec (package) const GUID IID_IAccPropServer;
extern __declspec (package) const GUID IID_IAccPropServices;
extern __declspec (package) const GUID GUID_AnnoScope;
extern __declspec (package) const GUID GUID_wireHWND;
extern __declspec (package) const GUID GUID___MIDL_IWinTypes_0009;
extern __declspec (package) const GUID GUID__RemotableHandle;
extern __declspec (package) const GUID GUID_wireHMENU;
extern __declspec (package) const GUID CLSID_CAccPropServices;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    AnnoScope;
union     __MIDL_IWinTypes_0009;
struct    _RemotableHandle;
interface DECLSPEC_UUID("{618736E0-3C3D-11CF-810C-00AA00389B71}") IAccessible;
typedef TComInterface<IAccessible, &IID_IAccessible> IAccessiblePtr;

interface DECLSPEC_UUID("{03022430-ABC4-11D0-BDE2-00AA001A1953}") IAccessibleHandler;
typedef TComInterface<IAccessibleHandler, &IID_IAccessibleHandler> IAccessibleHandlerPtr;

interface DECLSPEC_UUID("{7852B78D-1CFD-41C1-A615-9C0C85960B5F}") IAccIdentity;
typedef TComInterface<IAccIdentity, &IID_IAccIdentity> IAccIdentityPtr;

interface DECLSPEC_UUID("{76C0DBBB-15E0-4E7B-B61B-20EEEA2001E0}") IAccPropServer;
typedef TComInterface<IAccPropServer, &IID_IAccPropServer> IAccPropServerPtr;

interface DECLSPEC_UUID("{6E26E776-04F0-495D-80E4-3330352E3169}") IAccPropServices;
typedef TComInterface<IAccPropServices, &IID_IAccPropServices> IAccPropServicesPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IAccPropServices CAccPropServices;
typedef IAccPropServicesPtr CAccPropServicesPtr;

#define LIBID_OF_CAccPropServices (&LIBID_Accessibility)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Accessibility_tlb::_RemotableHandle* wireHWND;
typedef Accessibility_tlb::_RemotableHandle* wireHMENU;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class AnnoScope
{
  ANNO_THIS = 0, 
  ANNO_CONTAINER = 1
};


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
union  __MIDL_IWinTypes_0009
{
  long hInproc;
  long hRemote;
};

struct _RemotableHandle
{
  long fContext;
  Accessibility_tlb::__MIDL_IWinTypes_0009 u;
};

// *********************************************************************//
// Interface: IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
interface IAccessible  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/) = 0; // [-5000]
  virtual HRESULT STDMETHODCALLTYPE get_accChildCount(long* pcountChildren/*[out,retval]*/) = 0; // [-5001]
  virtual HRESULT STDMETHODCALLTYPE get_accChild(VARIANT varChild/*[in]*/, 
                                                 LPDISPATCH* ppdispChild/*[out,retval]*/) = 0; // [-5002]
  virtual HRESULT STDMETHODCALLTYPE get_accName(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszName/*[out,retval]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                 BSTR* pszValue/*[out,retval]*/) = 0; // [-5004]
  virtual HRESULT STDMETHODCALLTYPE get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                       BSTR* pszDescription/*[out,retval]*/) = 0; // [-5005]
  virtual HRESULT STDMETHODCALLTYPE get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                VARIANT* pvarRole/*[out,retval]*/) = 0; // [-5006]
  virtual HRESULT STDMETHODCALLTYPE get_accState(VARIANT varChild/*[in,opt]*/, 
                                                 VARIANT* pvarState/*[out,retval]*/) = 0; // [-5007]
  virtual HRESULT STDMETHODCALLTYPE get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszHelp/*[out,retval]*/) = 0; // [-5008]
  virtual HRESULT STDMETHODCALLTYPE get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                     VARIANT varChild/*[in,opt]*/, 
                                                     long* pidTopic/*[out,retval]*/) = 0; // [-5009]
  virtual HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                            BSTR* pszKeyboardShortcut/*[out,retval]*/) = 0; // [-5010]
  virtual HRESULT STDMETHODCALLTYPE get_accFocus(VARIANT* pvarChild/*[out,retval]*/) = 0; // [-5011]
  virtual HRESULT STDMETHODCALLTYPE get_accSelection(VARIANT* pvarChildren/*[out,retval]*/) = 0; // [-5012]
  virtual HRESULT STDMETHODCALLTYPE get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                         BSTR* pszDefaultAction/*[out,retval]*/) = 0; // [-5013]
  virtual HRESULT STDMETHODCALLTYPE accSelect(long flagsSelect/*[in]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5014]
  virtual HRESULT STDMETHODCALLTYPE accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                                VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5015]
  virtual HRESULT STDMETHODCALLTYPE accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                                VARIANT* pvarEndUpAt/*[out,retval]*/) = 0; // [-5016]
  virtual HRESULT STDMETHODCALLTYPE accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                               VARIANT* pvarChild/*[out,retval]*/) = 0; // [-5017]
  virtual HRESULT STDMETHODCALLTYPE accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5018]
  virtual HRESULT STDMETHODCALLTYPE set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/) = 0; // [-5004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_accParent(void)
  {
    LPDISPATCH ppdispParent;
    OLECHECK(this->get_accParent((LPDISPATCH*)&ppdispParent));
    return ppdispParent;
  }

  long __fastcall get_accChildCount(void)
  {
    long pcountChildren;
    OLECHECK(this->get_accChildCount((long*)&pcountChildren));
    return pcountChildren;
  }

  LPDISPATCH __fastcall get_accChild(VARIANT varChild/*[in]*/)
  {
    LPDISPATCH ppdispChild;
    OLECHECK(this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild));
    return ppdispChild;
  }

  BSTR __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszName = 0;
    OLECHECK(this->get_accName(varChild, (BSTR*)&pszName));
    return pszName;
  }

  BSTR __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszValue = 0;
    OLECHECK(this->get_accValue(varChild, (BSTR*)&pszValue));
    return pszValue;
  }

  BSTR __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDescription = 0;
    OLECHECK(this->get_accDescription(varChild, (BSTR*)&pszDescription));
    return pszDescription;
  }

  VARIANT __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarRole;
    OLECHECK(this->get_accRole(varChild, (VARIANT*)&pvarRole));
    return pvarRole;
  }

  VARIANT __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarState;
    OLECHECK(this->get_accState(varChild, (VARIANT*)&pvarState));
    return pvarState;
  }

  BSTR __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszHelp = 0;
    OLECHECK(this->get_accHelp(varChild, (BSTR*)&pszHelp));
    return pszHelp;
  }

  long __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                   VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    long pidTopic;
    OLECHECK(this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic));
    return pidTopic;
  }

  BSTR __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszKeyboardShortcut = 0;
    OLECHECK(this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut));
    return pszKeyboardShortcut;
  }

  VARIANT __fastcall get_accFocus(void)
  {
    VARIANT pvarChild;
    OLECHECK(this->get_accFocus((VARIANT*)&pvarChild));
    return pvarChild;
  }

  VARIANT __fastcall get_accSelection(void)
  {
    VARIANT pvarChildren;
    OLECHECK(this->get_accSelection((VARIANT*)&pvarChildren));
    return pvarChildren;
  }

  BSTR __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDefaultAction = 0;
    OLECHECK(this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction));
    return pszDefaultAction;
  }

  VARIANT __fastcall accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarEndUpAt;
    OLECHECK(this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt));
    return pvarEndUpAt;
  }

  VARIANT __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
  {
    VARIANT pvarChild;
    OLECHECK(this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild));
    return pvarChild;
  }


  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAccessibleHandler
// Flags:     (272) Hidden OleAutomation
// GUID:      {03022430-ABC4-11D0-BDE2-00AA001A1953}
// *********************************************************************//
interface IAccessibleHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE AccessibleObjectFromID(long hwnd/*[in]*/, long lObjectID/*[in]*/, 
                                                           Accessibility_tlb::IAccessible** pIAccessible/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IAccIdentity
// Flags:     (0)
// GUID:      {7852B78D-1CFD-41C1-A615-9C0C85960B5F}
// *********************************************************************//
interface IAccIdentity  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetIdentityString(unsigned_long dwIDChild/*[in]*/, 
                                                      unsigned_char** ppIDString/*[out]*/, 
                                                      unsigned_long* pdwIDStringLen/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IAccPropServer
// Flags:     (0)
// GUID:      {76C0DBBB-15E0-4E7B-B61B-20EEEA2001E0}
// *********************************************************************//
interface IAccPropServer  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetPropValue(unsigned_char* pIDString/*[in]*/, 
                                                 unsigned_long dwIDStringLen/*[in]*/, 
                                                 System::TGUID idProp/*[in]*/, 
                                                 VARIANT* pvarValue/*[out]*/, 
                                                 long* pfHasProp/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IAccPropServices
// Flags:     (0)
// GUID:      {6E26E776-04F0-495D-80E4-3330352E3169}
// *********************************************************************//
interface IAccPropServices  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE SetPropValue(unsigned_char* pIDString/*[in]*/, 
                                                 unsigned_long dwIDStringLen/*[in]*/, 
                                                 System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetPropServer(unsigned_char* pIDString/*[in]*/, 
                                                  unsigned_long dwIDStringLen/*[in]*/, 
                                                  System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                                  Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                                  Accessibility_tlb::AnnoScope AnnoScope/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearProps(unsigned_char* pIDString/*[in]*/, 
                                               unsigned_long dwIDStringLen/*[in]*/, 
                                               System::TGUID* paProps/*[in]*/, int cProps/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHwndProp(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                unsigned_long idObject/*[in]*/, 
                                                unsigned_long idChild/*[in]*/, 
                                                System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHwndPropStr(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                   unsigned_long idObject/*[in]*/, 
                                                   unsigned_long idChild/*[in]*/, 
                                                   System::TGUID idProp/*[in]*/, LPWSTR str/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHwndPropServer(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                      unsigned_long idObject/*[in]*/, 
                                                      unsigned_long idChild/*[in]*/, 
                                                      System::TGUID* paProps/*[in]*/, 
                                                      int cProps/*[in]*/, 
                                                      Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                                      Accessibility_tlb::AnnoScope AnnoScope/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearHwndProps(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                   unsigned_long idObject/*[in]*/, 
                                                   unsigned_long idChild/*[in]*/, 
                                                   System::TGUID* paProps/*[in]*/, 
                                                   int cProps/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ComposeHwndIdentityString(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                              unsigned_long idObject/*[in]*/, 
                                                              unsigned_long idChild/*[in]*/, 
                                                              unsigned_char** ppIDString/*[out]*/, 
                                                              unsigned_long* pdwIDStringLen/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DecomposeHwndIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                                unsigned_long dwIDStringLen/*[in]*/, 
                                                                Accessibility_tlb::wireHWND* phwnd/*[out]*/, 
                                                                unsigned_long* pidObject/*[out]*/, 
                                                                unsigned_long* pidChild/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHmenuProp(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                 unsigned_long idChild/*[in]*/, 
                                                 System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHmenuPropStr(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                    unsigned_long idChild/*[in]*/, 
                                                    System::TGUID idProp/*[in]*/, LPWSTR str/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetHmenuPropServer(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                       unsigned_long idChild/*[in]*/, 
                                                       System::TGUID* paProps/*[in]*/, 
                                                       int cProps/*[in]*/, 
                                                       Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                                       Accessibility_tlb::AnnoScope AnnoScope/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearHmenuProps(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                    unsigned_long idChild/*[in]*/, 
                                                    System::TGUID* paProps/*[in]*/, 
                                                    int cProps/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ComposeHmenuIdentityString(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                               unsigned_long idChild/*[in]*/, 
                                                               unsigned_char** ppIDString/*[out]*/, 
                                                               unsigned_long* pdwIDStringLen/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DecomposeHmenuIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                                 unsigned_long dwIDStringLen/*[in]*/, 
                                                                 Accessibility_tlb::wireHMENU* phmenu/*[out]*/, 
                                                                 unsigned_long* pidChild/*[out]*/) = 0; // [-1]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IAccessible>  TCOMIAccessible;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template<class T>
class IAccessibleDispT : public TAutoDriver<IAccessible>
{
public:
  IAccessibleDispT(){}

  IAccessibleDispT(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
  }

  IAccessibleDispT(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
  }

  IAccessibleDispT& operator=(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
    return *this;
  }

  IAccessibleDispT& operator=(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT         __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT         __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                          LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT         __fastcall get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                          BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                         VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                          VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/, 
                                              long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT         __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT         __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                  BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall accSelect(long flagsSelect/*[in]*/, 
                                       VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                         long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                         VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                         VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                        VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT         __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/);
  HRESULT         __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/);

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef IAccessibleDispT<IAccessible> IAccessibleDisp;

typedef TComInterface<IAccessibleHandler>  TCOMIAccessibleHandler;

typedef TComInterface<IAccIdentity>  TCOMIAccIdentity;

typedef TComInterface<IAccPropServer>  TCOMIAccPropServer;

// *********************************************************************//
// SmartIntf: TCOMIAccPropServices
// Interface: IAccPropServices
// *********************************************************************//
template <class T /* IAccPropServices */ >
class TCOMIAccPropServicesT : public TComInterface<IAccPropServices>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAccPropServicesT() {}
  TCOMIAccPropServicesT(IAccPropServices *intf, bool addRef = false) : TComInterface<IAccPropServices>(intf, addRef) {}
  TCOMIAccPropServicesT(const TCOMIAccPropServicesT& src) : TComInterface<IAccPropServices>(src) {}
  TCOMIAccPropServicesT& operator=(const TCOMIAccPropServicesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall SetPropValue(unsigned_char* pIDString/*[in]*/, 
                                          unsigned_long dwIDStringLen/*[in]*/, 
                                          System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/);
  HRESULT         __fastcall SetPropServer(unsigned_char* pIDString/*[in]*/, 
                                           unsigned_long dwIDStringLen/*[in]*/, 
                                           System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                           Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                           Accessibility_tlb::AnnoScope AnnoScope/*[in]*/);
  HRESULT         __fastcall ClearProps(unsigned_char* pIDString/*[in]*/, 
                                        unsigned_long dwIDStringLen/*[in]*/, 
                                        System::TGUID* paProps/*[in]*/, int cProps/*[in]*/);
  HRESULT         __fastcall SetHwndProp(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                         unsigned_long idObject/*[in]*/, 
                                         unsigned_long idChild/*[in]*/, System::TGUID idProp/*[in]*/, 
                                         VARIANT var/*[in]*/);
  HRESULT         __fastcall SetHwndPropStr(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                            unsigned_long idObject/*[in]*/, 
                                            unsigned_long idChild/*[in]*/, 
                                            System::TGUID idProp/*[in]*/, LPWSTR str/*[in]*/);
  HRESULT         __fastcall SetHwndPropServer(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                               unsigned_long idObject/*[in]*/, 
                                               unsigned_long idChild/*[in]*/, 
                                               System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                               Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                               Accessibility_tlb::AnnoScope AnnoScope/*[in]*/);
  HRESULT         __fastcall ClearHwndProps(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                            unsigned_long idObject/*[in]*/, 
                                            unsigned_long idChild/*[in]*/, 
                                            System::TGUID* paProps/*[in]*/, int cProps/*[in]*/);
  HRESULT         __fastcall ComposeHwndIdentityString(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                       unsigned_long idObject/*[in]*/, 
                                                       unsigned_long idChild/*[in]*/, 
                                                       unsigned_char** ppIDString/*[out]*/, 
                                                       unsigned_long* pdwIDStringLen/*[out]*/);
  HRESULT         __fastcall DecomposeHwndIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                         unsigned_long dwIDStringLen/*[in]*/, 
                                                         Accessibility_tlb::wireHWND* phwnd/*[out]*/, 
                                                         unsigned_long* pidObject/*[out]*/, 
                                                         unsigned_long* pidChild/*[out]*/);
  HRESULT         __fastcall SetHmenuProp(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                          unsigned_long idChild/*[in]*/, 
                                          System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/);
  HRESULT         __fastcall SetHmenuPropStr(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                             unsigned_long idChild/*[in]*/, 
                                             System::TGUID idProp/*[in]*/, LPWSTR str/*[in]*/);
  HRESULT         __fastcall SetHmenuPropServer(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                unsigned_long idChild/*[in]*/, 
                                                System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                                Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                                Accessibility_tlb::AnnoScope AnnoScope/*[in]*/);
  HRESULT         __fastcall ClearHmenuProps(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                             unsigned_long idChild/*[in]*/, 
                                             System::TGUID* paProps/*[in]*/, int cProps/*[in]*/);
  HRESULT         __fastcall ComposeHmenuIdentityString(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                        unsigned_long idChild/*[in]*/, 
                                                        unsigned_char** ppIDString/*[out]*/, 
                                                        unsigned_long* pdwIDStringLen/*[out]*/);
  HRESULT         __fastcall DecomposeHmenuIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                          unsigned_long dwIDStringLen/*[in]*/, 
                                                          Accessibility_tlb::wireHMENU* phmenu/*[out]*/, 
                                                          unsigned_long* pidChild/*[out]*/);

};
typedef TCOMIAccPropServicesT<IAccPropServices> TCOMIAccPropServices;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accChild(VARIANT varChild/*[in]*/, LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                        BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/, 
                                      long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                             BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                          BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                 long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                 VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                 VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccessibleDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIAccPropServices
// Interface: IAccPropServices
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetPropValue(unsigned_char* pIDString/*[in]*/, 
                                       unsigned_long dwIDStringLen/*[in]*/, 
                                       System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/)
{
  return (*this)->SetPropValue(pIDString, dwIDStringLen, idProp, var);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetPropServer(unsigned_char* pIDString/*[in]*/, 
                                        unsigned_long dwIDStringLen/*[in]*/, 
                                        System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                        Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                        Accessibility_tlb::AnnoScope AnnoScope/*[in]*/)
{
  return (*this)->SetPropServer(pIDString, dwIDStringLen, paProps, cProps, pServer, AnnoScope);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::ClearProps(unsigned_char* pIDString/*[in]*/, 
                                     unsigned_long dwIDStringLen/*[in]*/, 
                                     System::TGUID* paProps/*[in]*/, int cProps/*[in]*/)
{
  return (*this)->ClearProps(pIDString, dwIDStringLen, paProps, cProps);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHwndProp(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                      unsigned_long idObject/*[in]*/, unsigned_long idChild/*[in]*/, 
                                      System::TGUID idProp/*[in]*/, VARIANT var/*[in]*/)
{
  return (*this)->SetHwndProp(hwnd, idObject, idChild, idProp, var);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHwndPropStr(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                         unsigned_long idObject/*[in]*/, 
                                         unsigned_long idChild/*[in]*/, System::TGUID idProp/*[in]*/, 
                                         LPWSTR str/*[in]*/)
{
  return (*this)->SetHwndPropStr(hwnd, idObject, idChild, idProp, str);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHwndPropServer(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                            unsigned_long idObject/*[in]*/, 
                                            unsigned_long idChild/*[in]*/, 
                                            System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                            Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                            Accessibility_tlb::AnnoScope AnnoScope/*[in]*/)
{
  return (*this)->SetHwndPropServer(hwnd, idObject, idChild, paProps, cProps, pServer, AnnoScope);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::ClearHwndProps(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                         unsigned_long idObject/*[in]*/, 
                                         unsigned_long idChild/*[in]*/, 
                                         System::TGUID* paProps/*[in]*/, int cProps/*[in]*/)
{
  return (*this)->ClearHwndProps(hwnd, idObject, idChild, paProps, cProps);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::ComposeHwndIdentityString(Accessibility_tlb::wireHWND hwnd/*[in]*/, 
                                                    unsigned_long idObject/*[in]*/, 
                                                    unsigned_long idChild/*[in]*/, 
                                                    unsigned_char** ppIDString/*[out]*/, 
                                                    unsigned_long* pdwIDStringLen/*[out]*/)
{
  return (*this)->ComposeHwndIdentityString(hwnd, idObject, idChild, ppIDString, pdwIDStringLen);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::DecomposeHwndIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                      unsigned_long dwIDStringLen/*[in]*/, 
                                                      Accessibility_tlb::wireHWND* phwnd/*[out]*/, 
                                                      unsigned_long* pidObject/*[out]*/, 
                                                      unsigned_long* pidChild/*[out]*/)
{
  return (*this)->DecomposeHwndIdentityString(pIDString, dwIDStringLen, phwnd, pidObject, pidChild);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHmenuProp(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                       unsigned_long idChild/*[in]*/, System::TGUID idProp/*[in]*/, 
                                       VARIANT var/*[in]*/)
{
  return (*this)->SetHmenuProp(hmenu, idChild, idProp, var);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHmenuPropStr(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                          unsigned_long idChild/*[in]*/, 
                                          System::TGUID idProp/*[in]*/, LPWSTR str/*[in]*/)
{
  return (*this)->SetHmenuPropStr(hmenu, idChild, idProp, str);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::SetHmenuPropServer(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                             unsigned_long idChild/*[in]*/, 
                                             System::TGUID* paProps/*[in]*/, int cProps/*[in]*/, 
                                             Accessibility_tlb::IAccPropServer* pServer/*[in]*/, 
                                             Accessibility_tlb::AnnoScope AnnoScope/*[in]*/)
{
  return (*this)->SetHmenuPropServer(hmenu, idChild, paProps, cProps, pServer, AnnoScope);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::ClearHmenuProps(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                          unsigned_long idChild/*[in]*/, 
                                          System::TGUID* paProps/*[in]*/, int cProps/*[in]*/)
{
  return (*this)->ClearHmenuProps(hmenu, idChild, paProps, cProps);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::ComposeHmenuIdentityString(Accessibility_tlb::wireHMENU hmenu/*[in]*/, 
                                                     unsigned_long idChild/*[in]*/, 
                                                     unsigned_char** ppIDString/*[out]*/, 
                                                     unsigned_long* pdwIDStringLen/*[out]*/)
{
  return (*this)->ComposeHmenuIdentityString(hmenu, idChild, ppIDString, pdwIDStringLen);
}

template <class T> HRESULT __fastcall
TCOMIAccPropServicesT<T>::DecomposeHmenuIdentityString(unsigned_char* pIDString/*[in]*/, 
                                                       unsigned_long dwIDStringLen/*[in]*/, 
                                                       Accessibility_tlb::wireHMENU* phmenu/*[out]*/, 
                                                       unsigned_long* pidChild/*[out]*/)
{
  return (*this)->DecomposeHmenuIdentityString(pIDString, dwIDStringLen, phmenu, pidChild);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CAccPropServices
// Interface: TCOMIAccPropServices
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAccPropServices, IAccPropServices, &CLSID_CAccPropServices, &IID_IAccPropServices> CoCAccPropServices;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Accessibility_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Accessibility_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // Accessibility_TLBH
