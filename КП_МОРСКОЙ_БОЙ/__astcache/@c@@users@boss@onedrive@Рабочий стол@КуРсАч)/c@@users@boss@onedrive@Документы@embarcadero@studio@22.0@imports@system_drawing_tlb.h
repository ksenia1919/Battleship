// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 29.05.2022 15:36:40 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.Drawing.tlb (1)
// LIBID: {D37E2A3E-8545-3A39-9F4F-31827C9124AB}
// LCID: 0
// Helpfile: 
// HelpString: System.Drawing.dll
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.0 mscorlib, (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscorlib.tlb)
// Parent TypeLibrary:
//   (0) v27.0 Borland_Studio_ToolsAPI, (C:\Program Files (x86)\Embarcadero\Studio\21.0\bin\Borland.Studio.ToolsAPI.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   System_Drawing_TLBH
#define   System_Drawing_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace System_drawing_tlb
{

// *********************************************************************//
// HelpString: System.Drawing.dll
// Version:    2.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_System_Drawing;
extern __declspec (package) const GUID IID__Image;
extern __declspec (package) const GUID IID__Bitmap;
extern __declspec (package) const GUID GUID_CopyPixelOperation;
extern __declspec (package) const GUID GUID_Point;
extern __declspec (package) const GUID GUID_Rectangle;
extern __declspec (package) const GUID GUID_Size;
extern __declspec (package) const GUID IID__Font;
extern __declspec (package) const GUID GUID_PointF;
extern __declspec (package) const GUID GUID_SizeF;
extern __declspec (package) const GUID CLSID_Image;
extern __declspec (package) const GUID CLSID_Bitmap;
extern __declspec (package) const GUID CLSID_Font;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    CopyPixelOperation;
struct    Point;
struct    Rectangle;
struct    Size;
struct    PointF;
struct    SizeF;
interface DECLSPEC_UUID("{2948EBCD-5E0A-3184-9A87-37D3258C0D98}") _Image;
typedef TComInterface<_Image, &IID__Image> _ImagePtr;

interface DECLSPEC_UUID("{F86086E0-A89E-3EBE-B036-79BF72354656}") _Bitmap;
typedef TComInterface<_Bitmap, &IID__Bitmap> _BitmapPtr;

interface DECLSPEC_UUID("{BC28F4B1-B9AB-3DD8-A471-5B7AE757F8F9}") _Font;
typedef TComInterface<_Font, &IID__Font> _FontPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Image Image;
typedef _ImagePtr ImagePtr;
typedef _Bitmap Bitmap;
typedef _BitmapPtr BitmapPtr;
typedef _Font Font;
typedef _FontPtr FontPtr;

#define LIBID_OF_Image (&LIBID_System_Drawing)
#define LIBID_OF_Bitmap (&LIBID_System_Drawing)
#define LIBID_OF_Font (&LIBID_System_Drawing)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class CopyPixelOperation
{
  CopyPixelOperation_Blackness = 66, 
  CopyPixelOperation_CaptureBlt = 1073741824, 
  CopyPixelOperation_DestinationInvert = 5570569, 
  CopyPixelOperation_MergeCopy = 12583114, 
  CopyPixelOperation_MergePaint = 12255782, 
  CopyPixelOperation_NoMirrorBitmap = (int)-2147483648,  //0x80000000
  CopyPixelOperation_NotSourceCopy = 3342344, 
  CopyPixelOperation_NotSourceErase = 1114278, 
  CopyPixelOperation_PatCopy = 15728673, 
  CopyPixelOperation_PatInvert = 5898313, 
  CopyPixelOperation_PatPaint = 16452105, 
  CopyPixelOperation_SourceAnd = 8913094, 
  CopyPixelOperation_SourceCopy = 13369376, 
  CopyPixelOperation_SourceErase = 4457256, 
  CopyPixelOperation_SourceInvert = 6684742, 
  CopyPixelOperation_SourcePaint = 15597702, 
  CopyPixelOperation_Whiteness = 16711778
};


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct Point
{
  long x;
  long y;
};

struct Rectangle
{
  long x;
  long y;
  long width;
  long height;
};

struct Size
{
  long width;
  long height;
};

struct PointF
{
  float x;
  float y;
};

struct SizeF
{
  float width;
  float height;
};

// *********************************************************************//
// Interface: _Image
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2948EBCD-5E0A-3184-9A87-37D3258C0D98}
// *********************************************************************//
interface _Image  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Bitmap
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86086E0-A89E-3EBE-B036-79BF72354656}
// *********************************************************************//
interface _Bitmap  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Font
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BC28F4B1-B9AB-3DD8-A471-5B7AE757F8F9}
// *********************************************************************//
interface _Font  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOM_Image
// Interface: _Image
// *********************************************************************//
template <class T /* _Image */ >
class TCOM_ImageT : public TComInterface<_Image>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ImageT() {}
  TCOM_ImageT(_Image *intf, bool addRef = false) : TComInterface<_Image>(intf, addRef) {}
  TCOM_ImageT(const TCOM_ImageT& src) : TComInterface<_Image>(src) {}
  TCOM_ImageT& operator=(const TCOM_ImageT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ImageT<_Image> TCOM_Image;

// *********************************************************************//
// DispIntf:  _Image
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2948EBCD-5E0A-3184-9A87-37D3258C0D98}
// *********************************************************************//
template<class T>
class _ImageDispT : public TAutoDriver<_Image>
{
public:
  _ImageDispT(){}

  _ImageDispT(_Image *pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, false);
  }

  _ImageDispT(_ImagePtr pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, true);
  }

  _ImageDispT& operator=(_Image *pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, false);
    return *this;
  }

  _ImageDispT& operator=(_ImagePtr pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Image));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Image);
  }


};
typedef _ImageDispT<_Image> _ImageDisp;

// *********************************************************************//
// SmartIntf: TCOM_Bitmap
// Interface: _Bitmap
// *********************************************************************//
template <class T /* _Bitmap */ >
class TCOM_BitmapT : public TComInterface<_Bitmap>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_BitmapT() {}
  TCOM_BitmapT(_Bitmap *intf, bool addRef = false) : TComInterface<_Bitmap>(intf, addRef) {}
  TCOM_BitmapT(const TCOM_BitmapT& src) : TComInterface<_Bitmap>(src) {}
  TCOM_BitmapT& operator=(const TCOM_BitmapT& src) { Bind(src, true); return *this;}


};
typedef TCOM_BitmapT<_Bitmap> TCOM_Bitmap;

// *********************************************************************//
// DispIntf:  _Bitmap
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86086E0-A89E-3EBE-B036-79BF72354656}
// *********************************************************************//
template<class T>
class _BitmapDispT : public TAutoDriver<_Bitmap>
{
public:
  _BitmapDispT(){}

  _BitmapDispT(_Bitmap *pintf)
  {
    TAutoDriver<_Bitmap>::Bind(pintf, false);
  }

  _BitmapDispT(_BitmapPtr pintf)
  {
    TAutoDriver<_Bitmap>::Bind(pintf, true);
  }

  _BitmapDispT& operator=(_Bitmap *pintf)
  {
    TAutoDriver<_Bitmap>::Bind(pintf, false);
    return *this;
  }

  _BitmapDispT& operator=(_BitmapPtr pintf)
  {
    TAutoDriver<_Bitmap>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Bitmap));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Bitmap);
  }


};
typedef _BitmapDispT<_Bitmap> _BitmapDisp;

// *********************************************************************//
// SmartIntf: TCOM_Font
// Interface: _Font
// *********************************************************************//
template <class T /* _Font */ >
class TCOM_FontT : public TComInterface<_Font>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FontT() {}
  TCOM_FontT(_Font *intf, bool addRef = false) : TComInterface<_Font>(intf, addRef) {}
  TCOM_FontT(const TCOM_FontT& src) : TComInterface<_Font>(src) {}
  TCOM_FontT& operator=(const TCOM_FontT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FontT<_Font> TCOM_Font;

// *********************************************************************//
// DispIntf:  _Font
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BC28F4B1-B9AB-3DD8-A471-5B7AE757F8F9}
// *********************************************************************//
template<class T>
class _FontDispT : public TAutoDriver<_Font>
{
public:
  _FontDispT(){}

  _FontDispT(_Font *pintf)
  {
    TAutoDriver<_Font>::Bind(pintf, false);
  }

  _FontDispT(_FontPtr pintf)
  {
    TAutoDriver<_Font>::Bind(pintf, true);
  }

  _FontDispT& operator=(_Font *pintf)
  {
    TAutoDriver<_Font>::Bind(pintf, false);
    return *this;
  }

  _FontDispT& operator=(_FontPtr pintf)
  {
    TAutoDriver<_Font>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Font));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Font);
  }


};
typedef _FontDispT<_Font> _FontDisp;

// *********************************************************************//
// SmartIntf: TCOM_Image
// Interface: _Image
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Image
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2948EBCD-5E0A-3184-9A87-37D3258C0D98}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Bitmap
// Interface: _Bitmap
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Bitmap
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86086E0-A89E-3EBE-B036-79BF72354656}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_Font
// Interface: _Font
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Font
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BC28F4B1-B9AB-3DD8-A471-5B7AE757F8F9}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Image
// Interface: TCOM_Image
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Image, _Image, &CLSID_Image, &IID__Image> CoImage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Bitmap
// Interface: TCOM_Bitmap
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Bitmap, _Bitmap, &CLSID_Bitmap, &IID__Bitmap> CoBitmap;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Font
// Interface: TCOM_Font
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Font, _Font, &CLSID_Font, &IID__Font> CoFont;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace System_drawing_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace System_drawing_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // System_Drawing_TLBH
